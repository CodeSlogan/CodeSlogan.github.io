<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title>2021ML笔记</title>
    <url>/2021/09/20/2021ML%E7%AC%94%E8%AE%B0/</url>
    <content><![CDATA[<p>大三时正式开始接触AI机器学习方面的内容，希望能为以后研究生方向铺路</p>
<h1 id="1-Regression"><a href="#1-Regression" class="headerlink" title="1. Regression"></a>1. Regression</h1><p>如何开始一个深度学习？</p>
<ol>
<li><p>Function with unknown parameters</p>
<p>w and b are unknown parameters</p>
<p>w -&gt; weight               b-&gt;bias</p>
</li>
<li><p>Define loss from training data</p>
</li>
<li><p>Optimization</p>
<a id="more"></a>

<p>梯度下降，算积分，使得Loss趋近于最小</p>
<p><img src="/2021/09/20/2021ML%E7%AC%94%E8%AE%B0/p0.png" alt="image1"></p>
</li>
</ol>
<p>​                                                                    可反复增加层数，来达到建立深度神经网络的目的</p>
<p><img src="/2021/09/20/2021ML%E7%AC%94%E8%AE%B0/p1.png" alt="image2"></p>
<h1 id="2-Classification"><a href="#2-Classification" class="headerlink" title="2. Classification"></a>2. Classification</h1><p>模型无法训练起来的原因：</p>
<ul>
<li><p>model bias</p>
<p>参数不够，如同大海捞针，针却不在海里</p>
</li>
<li><p>optimization issue</p>
<p>梯度下降却无法得到最优解，如同大海捞针，方法不好捞不到针</p>
</li>
</ul>
<p>解决方法：</p>
<ol>
<li>比较不同的模型</li>
<li>从浅的网络或一些简单的模型开始优化</li>
<li>如果运用了深度网络，loss却不如其它简单模型来得好，那么可以归结于optimization issue，如下图所示：</li>
</ol>
<p><img src="/2021/09/20/2021ML%E7%AC%94%E8%AE%B0/p3.png" alt="image3"></p>
<h2 id="General-Guide"><a href="#General-Guide" class="headerlink" title="General Guide"></a>General Guide</h2><p><img src="/2021/09/20/2021ML%E7%AC%94%E8%AE%B0/p4.png" alt="image4"></p>
<p>首先判断在训练数据上的损失，在保证小的情况下再判断测试数据的损失</p>
<h2 id="2-1-局部最小值与鞍点"><a href="#2-1-局部最小值与鞍点" class="headerlink" title="2.1 局部最小值与鞍点"></a>2.1 局部最小值与鞍点</h2><p>local minima and saddle point</p>
<h3 id="Hessian"><a href="#Hessian" class="headerlink" title="Hessian"></a>Hessian</h3><p><img src="/2021/09/20/2021ML%E7%AC%94%E8%AE%B0/p2.png" alt="image5"></p>
<p>在梯度为0的情况下，计算L()，以此判断鞍点与局部最小</p>
<p>求二次偏导，构成<strong>hessian matrix</strong>，若此时特征值有正有负，则这个点为鞍点</p>
<p>选取特征值为负所对应的特征向量u</p>
<p>uT<em>H</em>u</p>
<p>用这种方法可逃离鞍点，降低loss</p>
<h2 id="2-2-批次与动量"><a href="#2-2-批次与动量" class="headerlink" title="2.2 批次与动量"></a>2.2 批次与动量</h2><p>batch and momentum</p>
<p>结论：</p>
<ul>
<li>small batch size has better performance </li>
<li>Noisy update is better for training</li>
</ul>
<h3 id="Small-Batch-vs-Large-Batch"><a href="#Small-Batch-vs-Large-Batch" class="headerlink" title="Small Batch vs Large Batch"></a>Small Batch vs Large Batch</h3><p><img src="/2021/09/20/2021ML%E7%AC%94%E8%AE%B0/p5.png" alt="image6"></p>
<p>batch size 代表将训练资料分成多少块，每块的大小即为Batch</p>
<ul>
<li><p>在没有平行计算时，小的batch自然比大的batch计算的要快，这就好比计算10道数学题和计算100道数学题之间的区别</p>
</li>
<li><p>有平行计算时，由于batch中的资料是同时开始计算，所花费的时间等同于计算1道数学题的时间</p>
</li>
<li><p>一次epoch代表利用所有分好的batches进行训练，每个batch内的计算是基于平行计算，因此，如果batch分的小，那么计算次数就多，计算速度就慢；反之速度就快</p>
</li>
<li><p>noisy的数据有利于训练</p>
</li>
<li><p>small batch有助于跳出局部最优解</p>
</li>
</ul>
<hr>
<p>未完待续……</p>
<h1 id="参考资料"><a href="#参考资料" class="headerlink" title="参考资料"></a>参考资料</h1><ol>
<li><p><a href="https://www.bilibili.com/video/BV1Wv411h7kN?p=12">李宏毅2021机器学习</a></p>
</li>
<li><p>《统计学习方法》李航著，第2版，北京：清华大学出版社，2019</p>
</li>
</ol>
]]></content>
      <categories>
        <category>ML_DL</category>
      </categories>
      <tags>
        <tag>ML</tag>
      </tags>
  </entry>
  <entry>
    <title>Git配置</title>
    <url>/2021/04/28/Git%E9%85%8D%E7%BD%AE/</url>
    <content><![CDATA[<p>最早接触Git是用来搭建博客，也就是现在看到的这个界面。git bash给我的第一感觉就是可以用linux的命令来对windows进行一些操作，十分便捷。本文将记录git相关知识。</p>
<p>首先，<strong>Git是目前世界上最先进的分布式版本控制系统。</strong></p>
<a id="more"></a>

<h1 id="版本控制工具"><a href="#版本控制工具" class="headerlink" title="版本控制工具"></a>版本控制工具</h1><p>大致分为3种</p>
<h2 id="本地版本控制"><a href="#本地版本控制" class="headerlink" title="本地版本控制"></a>本地版本控制</h2><p><img src="/2021/04/28/Git%E9%85%8D%E7%BD%AE/capture_20210428223831633.bmp" alt="图片1"></p>
<h2 id="集中版本控制-SVN"><a href="#集中版本控制-SVN" class="headerlink" title="集中版本控制  SVN"></a>集中版本控制  SVN</h2><p><img src="/2021/04/28/Git%E9%85%8D%E7%BD%AE/capture_20210428223840342.bmp" alt="图片2"></p>
<h2 id="分布式版本控制-Git"><a href="#分布式版本控制-Git" class="headerlink" title="分布式版本控制 Git"></a>分布式版本控制 Git</h2><p><img src="/2021/04/28/Git%E9%85%8D%E7%BD%AE/capture_20210428223850663.bmp" alt="图片3"></p>
<h1 id="Git环境配置"><a href="#Git环境配置" class="headerlink" title="Git环境配置"></a>Git环境配置</h1><p>软件的下载这里不再赘述，主要记录关键的几步。所有的这些修改可以在如下目录中找到</p>
<p>1）Git\etc\gitconfig  ：Git 安装目录下的 gitconfig   –system 系统级</p>
<p>2）C:\Users\huawei\ .gitconfig   只适用于当前登录用户的配置  –global 全局</p>
<h2 id="设置用户名与邮箱"><a href="#设置用户名与邮箱" class="headerlink" title="设置用户名与邮箱"></a>设置用户名与邮箱</h2><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">git config --global user.name <span class="string">&quot;CodeSlogan&quot;</span>  <span class="comment">#名称</span></span><br><span class="line">git config --global user.email mrchen40@163.com   <span class="comment">#邮箱</span></span><br></pre></td></tr></table></figure>

<h2 id="SSH公钥"><a href="#SSH公钥" class="headerlink" title="SSH公钥"></a>SSH公钥</h2><p>这里我解释一下这个公钥和Git之间的关系。每台电脑上都可以安装git，从而产生对应的公钥。</p>
<p>gitee/github接收从git提交的项目代码，那问题就来了，如何把git和gitee/github连接起来呢？</p>
<p>就是靠这个公钥。公钥先由本地git产生，然后再将公钥信息提交到码云SSH中，便可实现连接</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 通过ssh-keygen命令生成公钥</span></span><br><span class="line"><span class="comment"># 进入 C:\Users\huawei\.ssh 目录可查看对应的公钥</span></span><br></pre></td></tr></table></figure>

<p><img src="/2021/04/28/Git%E9%85%8D%E7%BD%AE/capture_20210428223930345.bmp" alt="图片4"></p>
<p><img src="/2021/04/28/Git%E9%85%8D%E7%BD%AE/image1.bmp" alt="image1"></p>
<h1 id="Git的工作流程"><a href="#Git的工作流程" class="headerlink" title="Git的工作流程"></a>Git的工作流程</h1><p><img src="/2021/04/28/Git%E9%85%8D%E7%BD%AE/capture_20210428223915568.bmp" alt="图片"></p>
<h1 id="致谢"><a href="#致谢" class="headerlink" title="致谢"></a>致谢</h1><p>狂神说</p>
]]></content>
      <tags>
        <tag>git</tag>
        <tag>工具</tag>
      </tags>
  </entry>
  <entry>
    <title>Matlab笔记</title>
    <url>/2021/05/05/Matlab%E7%AC%94%E8%AE%B0/</url>
    <content><![CDATA[<h1 id="基本操作"><a href="#基本操作" class="headerlink" title="基本操作"></a>基本操作</h1><h2 id="小操作"><a href="#小操作" class="headerlink" title="小操作"></a>小操作</h2><ul>
<li>添加注释 Ctrl+R   % </li>
<li>取消注释 Ctrl+T</li>
<li>清空工作区变量 clear</li>
<li>清除命令行里操作过的命令，使屏幕变干净 clc</li>
<li>clear;clc  表示初始化</li>
<li>分号;表示不显示运行结果</li>
</ul>
<a id="more"></a>

<h2 id="输入输出函数-input-disp"><a href="#输入输出函数-input-disp" class="headerlink" title="输入输出函数(input(), disp())"></a>输入输出函数(input(), disp())</h2><p>disp用法类似C语言中的printf, 结尾无所谓分号</p>
<p>行向量 a = [1 2 3]</p>
<p>列向量 a = [1;2;3]</p>
<hr>
<p>A = input(‘请输入A：’)</p>
<h2 id="num2str"><a href="#num2str" class="headerlink" title="num2str"></a>num2str</h2><p>将数字转化为字符串</p>
<p>a = 40               40</p>
<p>num2str(a)      ‘40’</p>
<h2 id="字符串的拼接"><a href="#字符串的拼接" class="headerlink" title="字符串的拼接"></a>字符串的拼接</h2><p>strcat(‘a的取值为’, a)</p>
<p>[‘a的取值为’ a]</p>
<h2 id="sum"><a href="#sum" class="headerlink" title="sum()"></a>sum()</h2><p>如果是一维向量，则直接求和</p>
<p>如果是多维，默认对列向量求和</p>
<hr>
<p>sum(E, 1) 对列向量求和</p>
<p>sum(E, 2) 对行向量求和</p>
<p>sum(E(:)) 对整个矩阵求和</p>
<h2 id="提取矩阵中的元素"><a href="#提取矩阵中的元素" class="headerlink" title="提取矩阵中的元素"></a>提取矩阵中的元素</h2><p>A(3,2)     表示第三行第二列</p>
<p>A(3,:)      表示第三行所有元素</p>
<p>A(:,2)      表示第二列所有元素</p>
<p>:表示取所有元素</p>
<hr>
<p>A([2,5],:)    只取第二行和第五行</p>
<p>A(2:5,:)       只取第二行到第五行</p>
<p>A(2:2:5,:)    取第二行和第四行</p>
<hr>
<p>A(2:end,:)   取第二行到最后一行</p>
<p>A(2:end-1,:)   取第二行到倒数第2行</p>
<hr>
<p>A(:)将矩阵输出为一个列向量</p>
<h2 id="size"><a href="#size" class="headerlink" title="size()"></a>size()</h2><p> 返回几行几列</p>
<p>size(A, 1) 返回行</p>
<p>size(A, 2) 返回列</p>
<h2 id="repmat"><a href="#repmat" class="headerlink" title="repmat()"></a>repmat()</h2><p>B = repmat(A, 2, 1)</p>
<p>把A看成一个整体，2行1列个A</p>
<h2 id="inv-求逆阵"><a href="#inv-求逆阵" class="headerlink" title="inv()求逆阵"></a>inv()求逆阵</h2><p>inv(B)</p>
<h2 id="矩阵对应元素相乘除"><a href="#矩阵对应元素相乘除" class="headerlink" title="矩阵对应元素相乘除"></a>矩阵对应元素相乘除</h2><h3 id><a href="#" class="headerlink" title=".*   ./"></a>.*   ./</h3><p>区别直接乘除</p>
<h3 id="-1"><a href="#-1" class="headerlink" title="."></a>.</h3><p>点针对每个元素进行操作</p>
<h2 id="特征值和特征向量"><a href="#特征值和特征向量" class="headerlink" title="特征值和特征向量"></a>特征值和特征向量</h2><p>V = eig(B)         取特征值 </p>
<p>[V, D] = eig(B)  得到特征向量和特征值，并且特征值和特征向量一一对应</p>
<h2 id="find"><a href="#find" class="headerlink" title="find()"></a>find()</h2><p>返回不为0的矩阵的索引</p>
<p>ind = find(X)</p>
<p>ind = find(X, 2) 返回前两个不为0值的索引</p>
<p>[r,c] = find(D == Max_eig, 1)</p>
<h1 id="定义一个函数"><a href="#定义一个函数" class="headerlink" title="定义一个函数"></a>定义一个函数</h1><figure class="highlight matlab"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="params">[输出变量]</span> = 函数名称<span class="params">(输入变量）  </span></span></span><br><span class="line"><span class="function"><span class="params"> 函数的中间部分都是函数体</span></span></span><br><span class="line"><span class="function"><span class="params"> 函数的最后要用end结尾</span></span></span><br><span class="line"><span class="function"><span class="params"> 输出变量和输入变量可以有多个，用逗号隔开</span></span></span><br><span class="line"><span class="function"><span class="params">function [a,b,c]=test(d,e,f)</span></span></span><br><span class="line">    a=d+e;</span><br><span class="line">    b=e+f;</span><br><span class="line">    c=f+d;</span><br><span class="line"><span class="keyword">end</span></span><br><span class="line">自定义的函数要单独放在一个m文件中，不可以直接放在主函数里面（和其他大多数语言不同）</span><br></pre></td></tr></table></figure>



<h1 id="定义一个具有自变量的方程"><a href="#定义一个具有自变量的方程" class="headerlink" title="定义一个具有自变量的方程"></a>定义一个具有自变量的方程</h1><p>y=@(x) kx+b</p>
<p>声明x是一个自变量</p>
<h2 id="mean"><a href="#mean" class="headerlink" title="mean()"></a>mean()</h2><p>平均值</p>
]]></content>
  </entry>
  <entry>
    <title>Python笔记</title>
    <url>/2020/10/28/Python%E7%AC%94%E8%AE%B0/</url>
    <content><![CDATA[<h1 id="Python基础语法"><a href="#Python基础语法" class="headerlink" title="Python基础语法"></a>Python基础语法</h1><h2 id="输出"><a href="#输出" class="headerlink" title="输出"></a>输出</h2><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">print(<span class="string">&#x27;helloworld&#x27;</span>)</span><br><span class="line">print(<span class="string">&#x27;I am&#x27;</span>,<span class="string">&#x27;chenshilin&#x27;</span>)</span><br><span class="line"><span class="comment">#会依次打印每个字符串，遇到逗号“,”会输出一个空格</span></span><br><span class="line">print(<span class="string">&#x27;100+200=&#x27;</span>,<span class="number">100</span>+<span class="number">200</span>)</span><br></pre></td></tr></table></figure>

<a id="more"></a>

<h2 id="输入"><a href="#输入" class="headerlink" title="输入"></a>输入</h2><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">name = <span class="built_in">input</span>()</span><br><span class="line">name = <span class="built_in">input</span>(<span class="string">&#x27;please enter a integer:&#x27;</span>)</span><br><span class="line"><span class="comment">#input()可以让你显示一个字符串来提示用户</span></span><br></pre></td></tr></table></figure>

<h2 id="转义字符"><a href="#转义字符" class="headerlink" title="转义字符"></a>转义字符</h2><p>转义字符<code>\</code>可以转义很多字符，比如<code>\n</code>表示换行，<code>\t</code>表示制表符，字符<code>\</code>本身也要转义，所以<code>\\</code>表示的字符就是<code>\</code></p>
<p>Python还允许用<code>r&#39;&#39;</code>表示<code>&#39;&#39;</code>内部的字符串默认不转义</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">print(<span class="string">r&#x27;&#x27;&#x27;hello,\n</span></span><br><span class="line"><span class="string">world&#x27;&#x27;&#x27;</span>)</span><br></pre></td></tr></table></figure>

<p>hello,\n<br>world</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">print(<span class="string">&#x27;&#x27;&#x27;hello,\n</span></span><br><span class="line"><span class="string">world&#x27;&#x27;&#x27;</span>)</span><br></pre></td></tr></table></figure>

<p>hello,</p>
<p>world</p>
<h2 id="布尔"><a href="#布尔" class="headerlink" title="布尔"></a>布尔</h2><p>可以直接使用True和False <strong>(严格区分大小写)</strong></p>
<p>可以使用and, or, not运算</p>
<h2 id="变量"><a href="#变量" class="headerlink" title="变量"></a>变量</h2><p>Python语言的变量定义为动态语言，不用定义变量类型</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment">#整数</span></span><br><span class="line">a = <span class="number">100</span></span><br><span class="line"><span class="comment">#字符串</span></span><br><span class="line">t_007 = <span class="string">&#x27;T007&#x27;</span></span><br><span class="line"><span class="comment">#bool</span></span><br><span class="line">Answer = <span class="literal">True</span></span><br></pre></td></tr></table></figure>

<h2 id="列表：list"><a href="#列表：list" class="headerlink" title="列表：list"></a>列表：list</h2><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment">#创建数组</span></span><br><span class="line">classmates = [<span class="string">&#x27;Michael&#x27;</span>, <span class="string">&#x27;Bob&#x27;</span>, <span class="string">&#x27;Tracy&#x27;</span>]</span><br><span class="line"><span class="comment">#查看数组元素</span></span><br><span class="line">classmates[<span class="number">0</span>]</span><br><span class="line"><span class="comment">#查看数组个数</span></span><br><span class="line"><span class="built_in">len</span>(classmates)</span><br><span class="line"><span class="comment">#添加数组元素</span></span><br><span class="line">classmates.append(<span class="string">&#x27;Adam&#x27;</span>)</span><br><span class="line">classmates.insert(<span class="number">1</span>, <span class="string">&#x27;Jack&#x27;</span>)</span><br><span class="line"><span class="comment">#删除数组元素</span></span><br><span class="line">classmates.pop()</span><br><span class="line"><span class="comment">#可保留要删除的数据</span></span><br><span class="line">pop_bob = classmates.pop(<span class="number">1</span>)</span><br><span class="line"><span class="comment">#直接删除</span></span><br><span class="line"><span class="keyword">del</span> classmates[<span class="number">0</span>]</span><br><span class="line"><span class="comment">#按值删除</span></span><br><span class="line">classmates.remove(<span class="string">&#x27;Bob&#x27;</span>)</span><br><span class="line"><span class="comment">#list中的元素可以不相同</span></span><br><span class="line">L = [<span class="string">&#x27;Apple&#x27;</span>, <span class="number">123</span>, <span class="literal">True</span>]</span><br></pre></td></tr></table></figure>

<h3 id="切片"><a href="#切片" class="headerlink" title="切片"></a>切片</h3><p>1.列表切片在作为参数传递给函数时，表明传递的是一个副本，并不是本身</p>
<p>在这种情况下，如若函数对其更改，将不会改变其原有的值</p>
<p>2.切片的另一主要的用途为，顾名思义，对列表进行分割</p>
<h2 id="元组：tuple"><a href="#元组：tuple" class="headerlink" title="元组：tuple"></a>元组：tuple</h2><p>tuple一经初始化就不能修改</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">classmates = (<span class="string">&#x27;Michael&#x27;</span>, <span class="string">&#x27;Bob&#x27;</span>, <span class="string">&#x27;Tracy&#x27;</span>)</span><br><span class="line"><span class="comment">#只有1个元素的tuple定义时必须加一个逗号,来消除歧义</span></span><br><span class="line">t = (<span class="number">1</span>,)</span><br><span class="line"><span class="comment">#定义的不是tuple，是1这个数！</span></span><br><span class="line">t = (<span class="number">1</span>)</span><br></pre></td></tr></table></figure>

<h2 id="条件判断"><a href="#条件判断" class="headerlink" title="条件判断"></a>条件判断</h2><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">age = <span class="number">3</span></span><br><span class="line"><span class="keyword">if</span> age &gt;= <span class="number">18</span>:</span><br><span class="line">    print(<span class="string">&#x27;adult&#x27;</span>)</span><br><span class="line"><span class="keyword">elif</span> age &gt;= <span class="number">6</span>:</span><br><span class="line">    print(<span class="string">&#x27;teenager&#x27;</span>)</span><br><span class="line"><span class="keyword">else</span>:</span><br><span class="line">    print(<span class="string">&#x27;kid&#x27;</span>)</span><br></pre></td></tr></table></figure>

<p>注意不要少写了冒号<code>:</code>，缩进通常为4格</p>
<p>if语句执行有个特点，它是从上往下判断，如果在某个判断上是<code>True</code>，把该判断对应的语句执行后，就忽略掉剩下的<code>elif</code>和`else</p>
<p>类似C语言中的switch/case语句</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">s = <span class="built_in">input</span>(<span class="string">&#x27;birth: &#x27;</span>)</span><br><span class="line"><span class="comment">#把str转换成整数</span></span><br><span class="line">birth = <span class="built_in">int</span>(s)</span><br><span class="line"><span class="keyword">if</span> birth &lt; <span class="number">2000</span>:</span><br><span class="line">    print(<span class="string">&#x27;00前&#x27;</span>)</span><br><span class="line"><span class="keyword">else</span>:</span><br><span class="line">    print(<span class="string">&#x27;00后&#x27;</span>)</span><br><span class="line">    </span><br></pre></td></tr></table></figure>

<h2 id="循环"><a href="#循环" class="headerlink" title="循环"></a>循环</h2><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment">#计算1-100的整数之和 for...in...循环</span></span><br><span class="line"><span class="built_in">sum</span> = <span class="number">0</span></span><br><span class="line"><span class="keyword">for</span> x <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">101</span>):</span><br><span class="line">    <span class="built_in">sum</span> = <span class="built_in">sum</span> + x</span><br><span class="line">print(<span class="built_in">sum</span>)</span><br></pre></td></tr></table></figure>

<p>for x in …循环就是把每个元素代入变量<code>x</code>，然后执行缩进块的语句</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment">#计算100以内所有奇数之和，用while循环实现</span></span><br><span class="line"><span class="built_in">sum</span> = <span class="number">0</span></span><br><span class="line">n = <span class="number">99</span></span><br><span class="line"><span class="keyword">while</span> n &gt; <span class="number">0</span>:</span><br><span class="line">    <span class="built_in">sum</span> = <span class="built_in">sum</span> + n</span><br><span class="line">    n = n - <span class="number">2</span></span><br><span class="line">print(<span class="built_in">sum</span>)</span><br></pre></td></tr></table></figure>

<h2 id="dict-和-set"><a href="#dict-和-set" class="headerlink" title="dict 和 set"></a>dict 和 set</h2><h3 id="字典：dict"><a href="#字典：dict" class="headerlink" title="字典：dict"></a>字典：dict</h3><p>即map，使用键-值（key-value）存储，具有极快的查找速度</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">names = [<span class="string">&#x27;Michael&#x27;</span>, <span class="string">&#x27;Bob&#x27;</span>, <span class="string">&#x27;Tracy&#x27;</span>]</span><br><span class="line">scores = [<span class="number">95</span>, <span class="number">75</span>, <span class="number">85</span>]</span><br><span class="line"><span class="comment">#通过两个list创建dict</span></span><br><span class="line">d = &#123;<span class="string">&#x27;Michael&#x27;</span>: <span class="number">95</span>, <span class="string">&#x27;Bob&#x27;</span>: <span class="number">75</span>, <span class="string">&#x27;Tracy&#x27;</span>: <span class="number">85</span>&#125;</span><br><span class="line"><span class="comment">#查看</span></span><br><span class="line">d[<span class="string">&#x27;Michael&#x27;</span>]</span><br><span class="line"><span class="comment">#直接放入或修改</span></span><br><span class="line">d[<span class="string">&#x27;Adam&#x27;</span>] = <span class="number">67</span></span><br><span class="line">d[<span class="string">&#x27;Michael&#x27;</span>] = <span class="number">100</span></span><br><span class="line"><span class="comment">#删除</span></span><br><span class="line">d.pop(<span class="string">&#x27;Bob&#x27;</span>)</span><br></pre></td></tr></table></figure>

<p>判断key的存在，有两种办法，一是通过<code>in</code>判断key是否存在：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment">#返回值为bool类型</span></span><br><span class="line"><span class="string">&#x27;Thomas&#x27;</span> <span class="keyword">in</span> d</span><br></pre></td></tr></table></figure>

<p>二是通过dict提供的<code>get()</code>方法，如果key不存在，可以返回<code>None</code>，或者自己指定的value：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">d.get(&#39;Thomas&#39;)</span><br><span class="line">d.get(&#39;Thomas&#39;,-1)</span><br></pre></td></tr></table></figure>

<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment">#遍历字典</span></span><br><span class="line"><span class="keyword">for</span> key, value <span class="keyword">in</span> d.items():</span><br><span class="line">    print(key+<span class="string">&#x27;:&#x27;</span>+value)</span><br></pre></td></tr></table></figure>



<h3 id="set"><a href="#set" class="headerlink" title="set"></a>set</h3><p>不允许有重复的值</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span>s = <span class="built_in">set</span>([<span class="number">1</span>, <span class="number">1</span>, <span class="number">2</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">3</span>])</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>s</span><br><span class="line">&#123;<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>&#125;</span><br></pre></td></tr></table></figure>

<p>传入的参数[1, 1, 2, 2, 3, 3]是一个list</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment">#添加</span></span><br><span class="line">s.add(<span class="number">4</span>)</span><br><span class="line"><span class="comment">#删除</span></span><br><span class="line">s.remove(<span class="number">4</span>)</span><br></pre></td></tr></table></figure>

<p>set可以看成数学意义上的无序和无重复元素的集合，因此，两个set可以做数学意义上的交集、并集等操作：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span>s1 = <span class="built_in">set</span>([<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>])</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>s2 = <span class="built_in">set</span>([<span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>])</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>s1 &amp; s2</span><br><span class="line">&#123;<span class="number">2</span>, <span class="number">3</span>&#125;</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>s1 | s2</span><br><span class="line">&#123;<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>&#125;</span><br></pre></td></tr></table></figure>

<h2 id="何谓不可变"><a href="#何谓不可变" class="headerlink" title="何谓不可变"></a>何谓不可变</h2><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span>a = <span class="string">&#x27;abc&#x27;</span></span><br><span class="line"><span class="comment">#replace并没有修改a的值，只是返回了一个str</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>b = a.replace(<span class="string">&#x27;a&#x27;</span>, <span class="string">&#x27;A&#x27;</span>)</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>b</span><br><span class="line"><span class="string">&#x27;Abc&#x27;</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>a</span><br><span class="line"><span class="string">&#x27;abc&#x27;</span></span><br></pre></td></tr></table></figure>

<h2 id="函数"><a href="#函数" class="headerlink" title="函数"></a>函数</h2><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment">#函数的定义，注意缩进与冒号</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">my_abs</span>(<span class="params">x</span>):</span></span><br><span class="line">    <span class="keyword">if</span> x &gt;= <span class="number">0</span>:</span><br><span class="line">        <span class="keyword">return</span> x</span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        <span class="keyword">return</span> -x</span><br></pre></td></tr></table></figure>

<p>def函数时，需要确定函数名和参数个数；</p>
<p>如果有必要，可以先对参数的数据类型做检查；</p>
<p>函数体内部可以用<code>return</code>随时返回函数结果；</p>
<p>函数执行完毕也没有<code>return</code>语句时，自动<code>return None</code>。</p>
<p>函数可以同时返回多个值，但其实就是一个元组tuple</p>
<h3 id="函数的参数"><a href="#函数的参数" class="headerlink" title="函数的参数"></a>函数的参数</h3><h4 id="位置参数"><a href="#位置参数" class="headerlink" title="位置参数"></a>位置参数</h4><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">power</span>(<span class="params">x, n</span>):</span></span><br><span class="line">    s = <span class="number">1</span></span><br><span class="line">    <span class="keyword">while</span> n &gt; <span class="number">0</span>:</span><br><span class="line">        n = n - <span class="number">1</span></span><br><span class="line">        s = s * x</span><br><span class="line">    <span class="keyword">return</span> s</span><br></pre></td></tr></table></figure>

<p>x,n就被称为位置参数</p>
<h4 id="默认参数"><a href="#默认参数" class="headerlink" title="默认参数"></a>默认参数</h4><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">power</span>(<span class="params">x, n=<span class="number">2</span></span>):</span></span><br><span class="line">    s = <span class="number">1</span></span><br><span class="line">    <span class="keyword">while</span> n &gt; <span class="number">0</span>:</span><br><span class="line">        n = n - <span class="number">1</span></span><br><span class="line">        s = s * x</span><br><span class="line">    <span class="keyword">return</span> s</span><br></pre></td></tr></table></figure>

<p>n为默认参数</p>
<h4 id="可变参数"><a href="#可变参数" class="headerlink" title="可变参数"></a>可变参数</h4><p>可变参数就是传入的参数个数是可变的，可以是1个、2个到任意个，还可以是0个</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">calc</span>(<span class="params">numbers</span>):</span></span><br><span class="line">    <span class="built_in">sum</span> = <span class="number">0</span></span><br><span class="line">    <span class="keyword">for</span> n <span class="keyword">in</span> numbers:</span><br><span class="line">        <span class="built_in">sum</span> = <span class="built_in">sum</span> + n * n</span><br><span class="line">    <span class="keyword">return</span> <span class="built_in">sum</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#list</span></span><br><span class="line">calc([<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>])</span><br><span class="line"><span class="comment">#tuple</span></span><br><span class="line">calc((<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>))</span><br><span class="line">calc(<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>)</span><br></pre></td></tr></table></figure>

<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">calc</span>(<span class="params">*numbers</span>):</span></span><br><span class="line">    <span class="built_in">sum</span> = <span class="number">0</span></span><br><span class="line">    <span class="keyword">for</span> n <span class="keyword">in</span> numbers:</span><br><span class="line">        <span class="built_in">sum</span> = <span class="built_in">sum</span> + n * n</span><br><span class="line">    <span class="keyword">return</span> <span class="built_in">sum</span></span><br></pre></td></tr></table></figure>

<p>定义可变参数和定义一个list或tuple参数相比，仅仅在参数前面加了一个<code>*</code>号。在函数内部，参数<code>numbers</code>接收到的是一个tuple，因此，函数代码完全不变。但是，调用该函数时，可以传入任意个参数，包括0个参数：</p>
<h4 id="命名关键字参数"><a href="#命名关键字参数" class="headerlink" title="命名关键字参数"></a>命名关键字参数</h4><p>对于关键字参数，函数的调用者可以传入任意不受限制的关键字参数。</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line"></span><br></pre></td></tr></table></figure>



<h4 id="关键字参数"><a href="#关键字参数" class="headerlink" title="关键字参数"></a>关键字参数</h4><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">person</span>(<span class="params">name, age, **kw</span>):</span></span><br><span class="line">    print(<span class="string">&#x27;name:&#x27;</span>, name, <span class="string">&#x27;age:&#x27;</span>, age, <span class="string">&#x27;other:&#x27;</span>, kw)</span><br><span class="line">    </span><br><span class="line">    </span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>person(<span class="string">&#x27;Bob&#x27;</span>, <span class="number">35</span>, city=<span class="string">&#x27;Beijing&#x27;</span>)</span><br><span class="line">name: Bob age: <span class="number">35</span> other: &#123;<span class="string">&#x27;city&#x27;</span>: <span class="string">&#x27;Beijing&#x27;</span>&#125;</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>person(<span class="string">&#x27;Adam&#x27;</span>, <span class="number">45</span>, gender=<span class="string">&#x27;M&#x27;</span>, job=<span class="string">&#x27;Engineer&#x27;</span>)</span><br><span class="line">name: Adam age: <span class="number">45</span> other: &#123;<span class="string">&#x27;gender&#x27;</span>: <span class="string">&#x27;M&#x27;</span>, <span class="string">&#x27;job&#x27;</span>: <span class="string">&#x27;Engineer&#x27;</span>&#125;</span><br></pre></td></tr></table></figure>

<p>也可以将dict字典传入</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment">#1:</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>extra = &#123;<span class="string">&#x27;city&#x27;</span>: <span class="string">&#x27;Beijing&#x27;</span>, <span class="string">&#x27;job&#x27;</span>: <span class="string">&#x27;Engineer&#x27;</span>&#125;</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>person(<span class="string">&#x27;Jack&#x27;</span>, <span class="number">24</span>, city=extra[<span class="string">&#x27;city&#x27;</span>], job=extra[<span class="string">&#x27;job&#x27;</span>])</span><br><span class="line">name: Jack age: <span class="number">24</span> other: &#123;<span class="string">&#x27;city&#x27;</span>: <span class="string">&#x27;Beijing&#x27;</span>, <span class="string">&#x27;job&#x27;</span>: <span class="string">&#x27;Engineer&#x27;</span>&#125;</span><br><span class="line"><span class="comment">#2:</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>person(<span class="string">&#x27;Jack&#x27;</span>, <span class="number">24</span>, **extra)</span><br><span class="line">name: Jack age: <span class="number">24</span> other: &#123;<span class="string">&#x27;city&#x27;</span>: <span class="string">&#x27;Beijing&#x27;</span>, <span class="string">&#x27;job&#x27;</span>: <span class="string">&#x27;Engineer&#x27;</span>&#125;</span><br></pre></td></tr></table></figure>

<h2 id="类"><a href="#类" class="headerlink" title="类"></a>类</h2><h3 id="封装"><a href="#封装" class="headerlink" title="封装"></a>封装</h3><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Dog</span>():</span></span><br><span class="line">    <span class="string">&quot;&quot;&quot;小狗类&quot;&quot;&quot;</span></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span>(<span class="params">self, name, age</span>):</span></span><br><span class="line">        self.name = name</span><br><span class="line">        self.age = age</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">sit</span>(<span class="params">self</span>):</span></span><br><span class="line">        print(self.name.title() + <span class="string">&quot; is now sitting&quot;</span>)</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">roll_over</span>(<span class="params">self</span>):</span></span><br><span class="line">        print(self.name.title() + <span class="string">&quot; rolled over!&quot;</span>)</span><br><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure>

<p>创建类时，使用构造函数时要使用两个_</p>
<h3 id="继承"><a href="#继承" class="headerlink" title="继承"></a>继承</h3><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">ElectricCar</span>(<span class="params">Car</span>):</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span>(<span class="params">self, make, model, year</span>):</span></span><br><span class="line">        <span class="built_in">super</span>().__init__(self, make, model, year)</span><br></pre></td></tr></table></figure>

<p>super()是一个特殊的函数，帮助python将子类和父类关联起来。父类因为被称为超类，super因此而得名</p>
<h2 id="文件读取"><a href="#文件读取" class="headerlink" title="文件读取"></a>文件读取</h2><h3 id="方法一：遍历逐行读取"><a href="#方法一：遍历逐行读取" class="headerlink" title="方法一：遍历逐行读取"></a>方法一：遍历逐行读取</h3><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">filename  = <span class="string">&#x27;pi_digits.txt&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">with</span> <span class="built_in">open</span>(filename) <span class="keyword">as</span> file_project:</span><br><span class="line">    <span class="keyword">for</span> line <span class="keyword">in</span> file_project:</span><br><span class="line">        print(line)</span><br></pre></td></tr></table></figure>

<h3 id="方法二：读取整个文件"><a href="#方法二：读取整个文件" class="headerlink" title="方法二：读取整个文件"></a>方法二：读取整个文件</h3><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">with open(&#39;pi_digits.txt&#39;) as file_project:</span><br><span class="line">    contents &#x3D; file_project.read()</span><br><span class="line">    print(contents)</span><br></pre></td></tr></table></figure>

<h3 id="方法三：写到一个列表中"><a href="#方法三：写到一个列表中" class="headerlink" title="方法三：写到一个列表中"></a>方法三：写到一个列表中</h3><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">filename  = <span class="string">&#x27;pi_digits.txt&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">with</span> <span class="built_in">open</span>(filename) <span class="keyword">as</span> file_project:</span><br><span class="line">    lines = file_project.readlines()</span><br><span class="line">    </span><br><span class="line"><span class="keyword">for</span> line <span class="keyword">in</span> lines:</span><br><span class="line">    print(line)</span><br></pre></td></tr></table></figure>

<h2 id="文件写入"><a href="#文件写入" class="headerlink" title="文件写入"></a>文件写入</h2><h3 id="写入空文件"><a href="#写入空文件" class="headerlink" title="写入空文件"></a>写入空文件</h3><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">filename = <span class="string">&#x27;programming.txt&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">with</span> <span class="built_in">open</span>(filename, <span class="string">&#x27;w&#x27;</span>) <span class="keyword">as</span> file_project:</span><br><span class="line">    file_project.write(<span class="string">&#x27;i love programming&#x27;</span>)</span><br></pre></td></tr></table></figure>

<p>读取模式’r’, 写入模式’w’, 附加模式’a’</p>
<h2 id="异常"><a href="#异常" class="headerlink" title="异常"></a>异常</h2><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">try</span>:</span><br><span class="line">    print(<span class="number">5</span>/<span class="number">0</span>)</span><br><span class="line"><span class="keyword">except</span> ZeroDivisionError:</span><br><span class="line">    print(<span class="string">&quot;You can&#x27;t divide by zero!&quot;</span>)</span><br></pre></td></tr></table></figure>

<h3 id="try-except-else"><a href="#try-except-else" class="headerlink" title="try-except-else"></a>try-except-else</h3><p>只有会出现异常的代码块才需要放在try当中，如果程序出现了意料之中的异常提醒，那么会执行except中的代码；如果运行正常，会接着执行else中的代码</p>
<p>异常类型包括：</p>
<p>ZeroDivisionError</p>
<p>FileNotFoundErrot</p>
<h2 id="存储数据-json"><a href="#存储数据-json" class="headerlink" title="存储数据 json"></a>存储数据 json</h2><h3 id="写入"><a href="#写入" class="headerlink" title="写入"></a>写入</h3><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> json</span><br><span class="line">numbers = [<span class="number">2</span>, <span class="number">3</span>, <span class="number">5</span>, <span class="number">7</span>, <span class="number">11</span>, <span class="number">13</span>]</span><br><span class="line"></span><br><span class="line">filename = <span class="string">&#x27;numbers.json&#x27;</span></span><br><span class="line"><span class="keyword">with</span> <span class="built_in">open</span>(filename, <span class="string">&#x27;w&#x27;</span>) <span class="keyword">as</span> f_obj:</span><br><span class="line">    json.dump(numbers, f_obj)</span><br></pre></td></tr></table></figure>

<h3 id="读出"><a href="#读出" class="headerlink" title="读出"></a>读出</h3><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> json</span><br><span class="line"></span><br><span class="line">filename = <span class="string">&#x27;numbers.json&#x27;</span></span><br><span class="line"><span class="keyword">with</span> <span class="built_in">open</span>(filename) <span class="keyword">as</span> f_obj:</span><br><span class="line">    numbers = json.load(f_obj)</span><br><span class="line"></span><br><span class="line">print(numbers)</span><br></pre></td></tr></table></figure>

<h2 id="重构"><a href="#重构" class="headerlink" title="重构"></a>重构</h2><p>将代码划分为一系列完成具体工作的函数</p>
<h2 id="测试"><a href="#测试" class="headerlink" title="测试"></a>测试</h2><h3 id="单元测试函数"><a href="#单元测试函数" class="headerlink" title="单元测试函数"></a>单元测试函数</h3><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment">#导入模块</span></span><br><span class="line"><span class="keyword">import</span> unittest</span><br><span class="line"><span class="keyword">from</span> name_function <span class="keyword">import</span> get_formatted_name</span><br><span class="line"></span><br><span class="line"><span class="comment">#命名随意，但必须继承unittest.TestCase</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">NamesTestCase</span>(<span class="params">unittest.TestCase</span>):</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">test_first_last_name</span>(<span class="params">self</span>):</span></span><br><span class="line">        formatted_name = get_formatted_name(<span class="string">&#x27;janis&#x27;</span>, <span class="string">&#x27;joplin&#x27;</span>)</span><br><span class="line">        <span class="comment">#断言方法</span></span><br><span class="line">        self.assertEqual(formatted_name, <span class="string">&#x27;Janis Joplin&#x27;</span>)</span><br><span class="line">        </span><br><span class="line"><span class="comment">#运行这个文件中的测试</span></span><br><span class="line">unittest.main()</span><br></pre></td></tr></table></figure>

<p>![](D:\Huawei Share\Screenshot\capture_20201025231510992.bmp)</p>
<h3 id="测试类，方法setUp"><a href="#测试类，方法setUp" class="headerlink" title="测试类，方法setUp()"></a>测试类，方法setUp()</h3><p>setUp()方法创建一系列实例，就可以避免在每个测试方法中再创建</p>
<p><strong>survey.py</strong></p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">AnonymousSurvey</span>():</span></span><br><span class="line">    <span class="string">&quot;&quot;&quot;创建一个匿名调查类&quot;&quot;&quot;</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span>(<span class="params">self, question</span>):</span></span><br><span class="line">        <span class="string">&quot;&quot;&quot;初始化一个问题&quot;&quot;&quot;</span></span><br><span class="line">        self.question = question</span><br><span class="line">        self.responses = []</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">show_question</span>(<span class="params">self</span>):</span></span><br><span class="line">        <span class="string">&quot;&quot;&quot;显示调查问卷&quot;&quot;&quot;</span></span><br><span class="line">        print(self.question)</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">store_response</span>(<span class="params">self, new_response</span>):</span></span><br><span class="line">        <span class="string">&quot;&quot;&quot;存储新的回答&quot;&quot;&quot;</span></span><br><span class="line">        self.responses.append(new_response)</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">show_results</span>(<span class="params">self</span>):</span></span><br><span class="line">        <span class="string">&quot;&quot;&quot;显示收集到的所有回答&quot;&quot;&quot;</span></span><br><span class="line">        print(<span class="string">&quot;Survey results:&quot;</span>)</span><br><span class="line">        <span class="keyword">for</span> response <span class="keyword">in</span> self.responses:</span><br><span class="line">            print(<span class="string">&#x27;-&#x27;</span> + response)</span><br></pre></td></tr></table></figure>

<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> unittest</span><br><span class="line"><span class="keyword">from</span> survey <span class="keyword">import</span> AnonymousSurvey</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">TestAnonymousSurvey</span>(<span class="params">unittest.TestCase</span>):</span></span><br><span class="line">    <span class="string">&quot;&quot;&quot;针对AnonymousSurvey类的测试&quot;&quot;&quot;</span></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">setUp</span>(<span class="params">self</span>) -&gt; <span class="keyword">None</span>:</span></span><br><span class="line">        <span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">        创建一个调查对象和一组答案，供后续测试使用</span></span><br><span class="line"><span class="string">        &quot;&quot;&quot;</span></span><br><span class="line">        question = <span class="string">&quot;What language did you first learn to speak?&quot;</span></span><br><span class="line">        self.my_survey = AnonymousSurvey(question)</span><br><span class="line">        self.responses = [<span class="string">&#x27;English&#x27;</span>, <span class="string">&#x27;Spanish&#x27;</span>, <span class="string">&#x27;Mandarin&#x27;</span>]</span><br><span class="line">        <span class="function"><span class="keyword">def</span> <span class="title">test_store_single_response</span>(<span class="params">self</span>):</span></span><br><span class="line">            self.my_survey.store_reponse(self.response[<span class="number">0</span>])</span><br><span class="line">            self.assertIn(self.response[<span class="number">0</span>], self.my_survey.responses)</span><br><span class="line"></span><br><span class="line">        <span class="function"><span class="keyword">def</span> <span class="title">test_store_three_response</span>(<span class="params">self</span>):</span></span><br><span class="line">            <span class="keyword">for</span> response <span class="keyword">in</span> self.responses:</span><br><span class="line">                self.my_survey.store_reponse(response)</span><br><span class="line">            <span class="keyword">for</span> response <span class="keyword">in</span> self.responses:</span><br><span class="line">                self.assertIn(response, self.my_survey.responses)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">unittest.main()</span><br></pre></td></tr></table></figure>



<h1 id="参考文献"><a href="#参考文献" class="headerlink" title="参考文献"></a>参考文献</h1><p>1.《Python编程：从入门到实践》美Eric Matthes著</p>
<p>2.<a href="https://www.liaoxuefeng.com/">https://www.liaoxuefeng.com/</a></p>
]]></content>
      <categories>
        <category>python</category>
      </categories>
      <tags>
        <tag>python</tag>
      </tags>
  </entry>
  <entry>
    <title>割圆法Pi</title>
    <url>/2021/09/19/%E5%89%B2%E5%9C%86%E6%B3%95%E6%B1%82Pi/</url>
    <content><![CDATA[<h1 id="题目"><a href="#题目" class="headerlink" title="题目"></a>题目</h1><p>采用割圆术计算圆周率，即对一个圆先割出一个正方形，再割出4个等腰三角形，再割出8个等腰三角形，后面依此类推，把这些割出的图形面积相加即为圆的面积，然后除以圆的半径的平方，最终得到圆周率。 </p>
<a id="more"></a>

<h1 id="分析"><a href="#分析" class="headerlink" title="分析"></a>分析</h1><h2 id="方法1"><a href="#方法1" class="headerlink" title="方法1"></a>方法1</h2><p>首先这道题所描述的割圆法，与我们以往认知的割圆法有所不同，本题是以面积趋近圆，最后用数学公式<code>S=pi*r^2</code>求出pi</p>
<p>按照题目所述先割正方形，再割三角形的方法，用代码实现极为复杂。通过分析题目我们得知，可以将每次分割的三角形与起初的正方形结合，看作一个正多边形求解。通过连接圆心，将正多边形分解为三角形，利用数学公式<code>S=1/2*a*b*sina</code>求出一个三角形的面积。</p>
<p><img src="/2021/09/19/%E5%89%B2%E5%9C%86%E6%B3%95%E6%B1%82Pi/p1.bmp" alt="image1"></p>
<p>观察规律得知三角形的个数为4，8，16呈2的指数次幂递增，易得多边形面积，可得pi</p>
<h2 id="方法2"><a href="#方法2" class="headerlink" title="方法2"></a>方法2</h2><p><img src="/2021/09/19/%E5%89%B2%E5%9C%86%E6%B3%95%E6%B1%82Pi/p2.bmp" alt="image2"></p>
<p>另一种方法利用勾股定理，代替了角度。首先利用半径得出了正方形的边长，进而根据边长与半径的关系计算出三角形的高，得出单个三角形的面积，如上图。然后利用勾股定理算出三角形的斜边长c，作为下一个三角形的底边长。因此类推，面积易得。</p>
<h1 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h1><h2 id="方法1-1"><a href="#方法1-1" class="headerlink" title="方法1"></a>方法1</h2><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.codeslogan.Foundation;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> <span class="keyword">static</span> java.lang.Math.*;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment"> * <span class="doctag">@PackageName</span>: com.codeslogan.Foundation</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@ClassName</span>: Test_Pi</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Description</span>:</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Author</span>: codeslogan</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Date</span>: 2021-09-18 19:06</span></span><br><span class="line"><span class="comment">   */</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Test_Pi</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">double</span> s = <span class="number">0.0</span>; <span class="comment">//面积</span></span><br><span class="line">        <span class="keyword">double</span> r = <span class="number">10.0</span>; <span class="comment">//半径</span></span><br><span class="line">        <span class="keyword">double</span> myPi = <span class="number">0.0</span>; <span class="comment">//PI</span></span><br><span class="line"></span><br><span class="line">​        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">2</span>; i &lt;= <span class="number">100</span> ; i++) &#123;</span><br><span class="line">​            <span class="keyword">double</span> n = pow(<span class="number">2</span>,i); <span class="comment">//圆的分割块数</span></span><br><span class="line">​            s = n * <span class="number">1</span>/<span class="number">2</span> * pow(r,<span class="number">2</span>) * sin(toRadians(<span class="number">360</span>/n)); <span class="comment">//S=1/2*a*b*sina</span></span><br><span class="line">​            myPi = s / pow(r,<span class="number">2</span>); <span class="comment">// s=pi*r^2</span></span><br><span class="line">​            System.out.println(myPi);</span><br><span class="line">​        &#125;</span><br><span class="line">​    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="方法2-1"><a href="#方法2-1" class="headerlink" title="方法2"></a>方法2</h2><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.codeslogan.Foundation;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> <span class="keyword">static</span> java.lang.Math.pow;</span><br><span class="line"><span class="keyword">import</span> <span class="keyword">static</span> java.lang.Math.sqrt;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">CalculatePI</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">int</span> n = <span class="number">100</span>;</span><br><span class="line">        <span class="keyword">double</span> s;</span><br><span class="line">        <span class="keyword">double</span> totOfS = <span class="number">0.0</span>;</span><br><span class="line">        <span class="keyword">double</span> r = <span class="number">1.0</span>;</span><br><span class="line">        <span class="keyword">double</span> a = getSquareSide(r);</span><br><span class="line">        totOfS+=a*a;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">2</span>; i &lt; n; i++) &#123;</span><br><span class="line">            <span class="keyword">double</span> h = getTriangleH(a, r); <span class="comment">//获取三角形的高</span></span><br><span class="line">            s=a*h/<span class="number">2</span>;</span><br><span class="line">            totOfS += s*pow(<span class="number">2</span>,i);</span><br><span class="line">            a = getTriangleC(h, a); <span class="comment">//获取斜边长</span></span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">double</span> pi = totOfS/pow(r,<span class="number">2</span>);</span><br><span class="line">        System.out.println(<span class="string">&quot;Pi is &quot;</span> + pi);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">double</span> <span class="title">getSquareSide</span><span class="params">(<span class="keyword">double</span> r)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> sqrt(<span class="number">2</span>) * r;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">double</span> <span class="title">getTriangleH</span><span class="params">(<span class="keyword">double</span> a, <span class="keyword">double</span> r)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">double</span> h = r - sqrt(pow(r,<span class="number">2</span>) - pow(a/<span class="number">2</span>,<span class="number">2</span>));</span><br><span class="line">        <span class="keyword">return</span> h;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">double</span> <span class="title">getTriangleC</span><span class="params">(<span class="keyword">double</span> h, <span class="keyword">double</span> a)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">double</span> y = sqrt(pow(h,<span class="number">2</span>)+pow(a/<span class="number">2</span>,<span class="number">2</span>));</span><br><span class="line">        <span class="keyword">return</span> y;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>]]></content>
      <categories>
        <category>Java</category>
      </categories>
      <tags>
        <tag>Java</tag>
      </tags>
  </entry>
  <entry>
    <title>用conda安装pytorch</title>
    <url>/2020/11/01/%E7%94%A8conda%E5%AE%89%E8%A3%85pytorch/</url>
    <content><![CDATA[<h1 id="Miniconda"><a href="#Miniconda" class="headerlink" title="Miniconda"></a>Miniconda</h1><h2 id="Download-amp-install"><a href="#Download-amp-install" class="headerlink" title="Download &amp; install"></a>Download &amp; install</h2><p>官网<a href="https://docs.conda.io/en/latest/miniconda.html">https://docs.conda.io/en/latest/miniconda.html</a></p>
<a id="more"></a>

<h2 id="环境配置"><a href="#环境配置" class="headerlink" title="环境配置"></a>环境配置</h2><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">C:\Users\huawei\miniconda3\Scripts</span><br></pre></td></tr></table></figure>

<p>将以上路径加入到环境变量的path中</p>
<h2 id="添加清华镜向源"><a href="#添加清华镜向源" class="headerlink" title="添加清华镜向源"></a>添加清华镜向源</h2><p>用途：加快下载速度，否则非常慢</p>
<p>在开始菜单里找到并打开<u>Anaconda Prompt(miniconda3)</u>,命令行窗口</p>
<p>复制粘贴以下内容</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">conda config --add channels https:&#x2F;&#x2F;mirrors.tuna.tsinghua.edu.cn&#x2F;anaconda&#x2F;pkgs&#x2F;free&#x2F;</span><br><span class="line">conda config --add channels https:&#x2F;&#x2F;mirrors.tuna.tsinghua.edu.cn&#x2F;anaconda&#x2F;pkgs&#x2F;main&#x2F;</span><br><span class="line">conda config --add channels https:&#x2F;&#x2F;mirrors.tuna.tsinghua.edu.cn&#x2F;anaconda&#x2F;cloud&#x2F;conda-forge&#x2F;</span><br><span class="line">conda config --add channels https:&#x2F;&#x2F;mirrors.tuna.tsinghua.edu.cn&#x2F;anaconda&#x2F;cloud&#x2F;bioconda&#x2F;</span><br><span class="line">conda config --set show_channel_urls yes </span><br><span class="line">conda config --get channels</span><br><span class="line">conda config --add channels https:&#x2F;&#x2F;mirrors.tuna.tsinghua.edu.cn&#x2F;anaconda&#x2F;cloud&#x2F;pytorch&#x2F;</span><br><span class="line">conda config --add channels https:&#x2F;&#x2F;mirrors.tuna.tsinghua.edu.cn&#x2F;anaconda&#x2F;cloud&#x2F;msys2&#x2F;</span><br><span class="line">conda config --add channels https:&#x2F;&#x2F;mirrors.tuna.tsinghua.edu.cn&#x2F;anaconda&#x2F;cloud&#x2F;menpo&#x2F;</span><br></pre></td></tr></table></figure>

<h2 id="创建pytorch环境"><a href="#创建pytorch环境" class="headerlink" title="创建pytorch环境"></a>创建pytorch环境</h2><p>这里是根据自己的python版本创建</p>
<p>命令行输出可查看</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">python -v</span><br></pre></td></tr></table></figure>

<p>例如我的是3.8.3</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">conda create -n pytorch python&#x3D;3.8.3</span><br></pre></td></tr></table></figure>

<p>以上命令就根据python的版本创建出了pytorch的环境</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">conda activate pytorch</span><br></pre></td></tr></table></figure>

<p>激活环境</p>
<h1 id="Pytorch"><a href="#Pytorch" class="headerlink" title="Pytorch"></a>Pytorch</h1><p>以下操作接着刚刚的命令行窗口内</p>
<h2 id="查看自己的GPU版本"><a href="#查看自己的GPU版本" class="headerlink" title="查看自己的GPU版本"></a>查看自己的GPU版本</h2><p>右键开始菜单栏-任务管理器-性能-GPU</p>
<p>根据自己的显卡选择CUDA的版本，如果不是英伟达显卡，刚选择None</p>
<p>官网<a href="https://pytorch.org/get-started/locally/">https://pytorch.org/get-started/locally/</a></p>
<p>安装命令可以在官网里获取</p>
<h2 id="Download-amp-install-1"><a href="#Download-amp-install-1" class="headerlink" title="Download&amp;install"></a>Download&amp;install</h2><p>建议删除 -c pytorch，否则会默认从官网下载，速度极慢</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">conda install pytorch torchvision torchaudio cpuonly -c pytorch</span><br></pre></td></tr></table></figure>

<h2 id="测试"><a href="#测试" class="headerlink" title="测试"></a>测试</h2><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">python #进行Python</span><br><span class="line">import torch #这步后没有报错说明安装成功</span><br></pre></td></tr></table></figure>

<p>或者</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">pip list</span><br></pre></td></tr></table></figure>

<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">(pytorch) C:\Users\huawei&gt;pip list</span><br><span class="line">Package      Version</span><br><span class="line">------------ -------------------</span><br><span class="line">certifi      2020.6.20</span><br><span class="line">cffi         1.14.3</span><br><span class="line">mkl-service  2.3.0</span><br><span class="line">numpy        1.19.2</span><br><span class="line">olefile      0.46</span><br><span class="line">Pillow       8.0.1</span><br><span class="line">pip          20.2.4</span><br><span class="line">pycparser    2.20</span><br><span class="line">setuptools   50.3.0.post20201006</span><br><span class="line">six          1.15.0</span><br><span class="line">torch        1.6.0</span><br><span class="line">torchaudio   0.6.0</span><br><span class="line">torchvision  0.2.2</span><br><span class="line">wheel        0.35.1</span><br><span class="line">wincertstore 0.2</span><br></pre></td></tr></table></figure>

<h1 id="插件"><a href="#插件" class="headerlink" title="插件"></a>插件</h1><p>直接分次复制到命令行中即可</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">conda install pandas</span><br><span class="line">conda install jupyter notebook</span><br><span class="line">conda install matplotlib</span><br><span class="line">pip install sklearn</span><br></pre></td></tr></table></figure>

]]></content>
      <categories>
        <category>ML_DL</category>
      </categories>
      <tags>
        <tag>ML</tag>
        <tag>pytorch</tag>
        <tag>conda</tag>
      </tags>
  </entry>
  <entry>
    <title>页面置换算法</title>
    <url>/2021/05/17/%E9%A1%B5%E9%9D%A2%E8%BD%AC%E6%8D%A2%E7%AE%97%E6%B3%95/</url>
    <content><![CDATA[<p>5种页面置换算法的简单实现</p>
<h1 id="页面置换算法"><a href="#页面置换算法" class="headerlink" title="页面置换算法"></a>页面置换算法</h1><h2 id="OPT"><a href="#OPT" class="headerlink" title="OPT"></a>OPT</h2><p><strong>最佳置换算法</strong></p>
<ul>
<li>缺点：最佳置换算法是一种理想化算法，具有较好的性能，但是实际上无法实现（无法预知一个进程中的若干页面哪一个最长时间不被访问）；</li>
<li>优点：最佳置换算法可以保证获得最低的缺页率，性能最好 </li>
</ul>
<a id="more"></a>

<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">opt</span><span class="params">()</span> <span class="comment">//最佳转换算法，往后查找</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">	<span class="built_in">printf</span>(<span class="string">&quot;--------------------------------\n&quot;</span>);</span><br><span class="line">	<span class="built_in">printf</span>(<span class="string">&quot;现在执行的是最佳置换算法opt：\n&quot;</span>);</span><br><span class="line">	<span class="built_in">memset</span>(arr, <span class="number">-1</span>, <span class="keyword">sizeof</span>(arr));</span><br><span class="line">	<span class="keyword">int</span> no = <span class="number">0</span>, tot = <span class="number">0</span>, z = <span class="number">0</span>, three = <span class="number">0</span>;</span><br><span class="line">	<span class="keyword">int</span> flag[<span class="number">8</span>];</span><br><span class="line">	<span class="built_in">memset</span>(flag, <span class="number">0</span>, <span class="keyword">sizeof</span>(flag)); <span class="comment">//初始化一个flag数组，来确定最晚出现需要替换的点</span></span><br><span class="line">	<span class="keyword">for</span> (i = <span class="number">0</span>; i &lt; M; i++)</span><br><span class="line">	&#123;</span><br><span class="line">		<span class="keyword">if</span> (no &lt; N) <span class="comment">//填充空数组 </span></span><br><span class="line">		&#123;</span><br><span class="line">			arr[no++] = pageNum[i];</span><br><span class="line">			tot++;</span><br><span class="line">			showdata(); </span><br><span class="line">		&#125;</span><br><span class="line">		<span class="keyword">else</span> <span class="comment">//当数组填充满后</span></span><br><span class="line">		&#123;</span><br><span class="line">			<span class="keyword">for</span> (j = <span class="number">0</span>; j &lt; N; j++)</span><br><span class="line">			&#123;</span><br><span class="line">				<span class="keyword">if</span> (arr[j] == pageNum[i])</span><br><span class="line">					z = <span class="number">1</span>; <span class="comment">//如果队列里已经存在此进程，则无需再进行页面调度</span></span><br><span class="line">			&#125;</span><br><span class="line">			<span class="keyword">if</span> (z == <span class="number">0</span>)</span><br><span class="line">			&#123;</span><br><span class="line">				<span class="keyword">for</span> (<span class="keyword">int</span> k = i + <span class="number">1</span>; k &lt; M; k++) <span class="comment">//从下一位向后查找 </span></span><br><span class="line">				&#123;</span><br><span class="line">					<span class="keyword">for</span> (j = <span class="number">0</span>; j &lt; N; j++)</span><br><span class="line">					&#123;</span><br><span class="line">						<span class="keyword">if</span> (arr[j] == pageNum[k] &amp;&amp; three &lt; (N<span class="number">-1</span>)) <span class="comment">//此位先出现则标记此位</span></span><br><span class="line">						&#123;</span><br><span class="line">							<span class="keyword">if</span> (flag[arr[j]] == <span class="number">1</span>)</span><br><span class="line">								<span class="keyword">continue</span>;</span><br><span class="line">							flag[arr[j]] = <span class="number">1</span>;							</span><br><span class="line">							three++;</span><br><span class="line">						&#125;</span><br><span class="line">					&#125;</span><br><span class="line">				&#125;</span><br><span class="line">				<span class="keyword">for</span> (<span class="keyword">int</span> l = <span class="number">0</span>; l &lt; N; l++) <span class="comment">//遍历确定最长时间未被访问的页面</span></span><br><span class="line">				&#123;</span><br><span class="line">					<span class="keyword">if</span> (flag[arr[l]] == <span class="number">1</span>)</span><br><span class="line">						<span class="keyword">continue</span>;</span><br><span class="line">					<span class="keyword">else</span>         </span><br><span class="line">					&#123;</span><br><span class="line">						arr[l] = pageNum[i];</span><br><span class="line">						tot++;</span><br><span class="line">						showdata();</span><br><span class="line">					&#125;</span><br><span class="line">				&#125;</span><br><span class="line">			&#125;</span><br><span class="line">			z = <span class="number">0</span>;</span><br><span class="line">			three = <span class="number">0</span>;</span><br><span class="line">			<span class="built_in">memset</span>(flag, <span class="number">0</span>, <span class="keyword">sizeof</span>(flag));</span><br><span class="line">		&#125;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="built_in">printf</span>(<span class="string">&quot;页面置换的次数为：%d\n&quot;</span>, tot);</span><br><span class="line">	<span class="keyword">double</span> rate = (<span class="keyword">double</span>)tot / M * <span class="number">100</span>;</span><br><span class="line">	<span class="built_in">printf</span>(<span class="string">&quot;OPT缺页率为：%.2lf%%\n&quot;</span>, rate);</span><br><span class="line">	<span class="built_in">printf</span>(<span class="string">&quot;--------------------------------\n&quot;</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>



<h2 id="FIFO"><a href="#FIFO" class="headerlink" title="FIFO"></a>FIFO</h2><p><strong>先进先出算法</strong></p>
<ul>
<li>优点：先进先出算法实现简单，是最直观的一个算法</li>
<li>缺点：先进先出的性能最差，因为与通常页面的使用规则不符合，所以实际应用少</li>
</ul>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="comment">//FIFO先进先出算法</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">fifo</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">	<span class="built_in">printf</span>(<span class="string">&quot;--------------------------------\n&quot;</span>);</span><br><span class="line">	<span class="built_in">printf</span>(<span class="string">&quot;现在执行的是FIFO先进先出算法：\n&quot;</span>);</span><br><span class="line">	<span class="built_in">memset</span>(arr, <span class="number">-1</span>, <span class="keyword">sizeof</span>(arr));</span><br><span class="line">	<span class="keyword">int</span> no = <span class="number">0</span>, z = <span class="number">0</span>, change = <span class="number">0</span>;</span><br><span class="line">	<span class="keyword">for</span> (i = <span class="number">0</span>; i &lt; M; i++)</span><br><span class="line">	&#123;</span><br><span class="line">		<span class="keyword">for</span> (j = <span class="number">0</span>; j &lt; N; j++)</span><br><span class="line">		&#123;</span><br><span class="line">			<span class="keyword">if</span> (arr[j] == pageNum[i])</span><br><span class="line">				z = <span class="number">1</span>; <span class="comment">//如果队列里已经存在此进程，则无需再进行页面调度</span></span><br><span class="line">		&#125;</span><br><span class="line">		<span class="keyword">if</span> (z == <span class="number">0</span>)</span><br><span class="line">		&#123;</span><br><span class="line">			change++;</span><br><span class="line">			arr[no++] = pageNum[i];</span><br><span class="line">			showdata();</span><br><span class="line">		&#125;</span><br><span class="line">		z = <span class="number">0</span>; <span class="comment">//默认需要调度</span></span><br><span class="line">		<span class="keyword">if</span> (no == N) <span class="comment">//队列已满，则归0从头开始，等效于队头出队</span></span><br><span class="line">			no = <span class="number">0</span>;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="built_in">printf</span>(<span class="string">&quot;页面置换的次数为：%d\n&quot;</span>, change);</span><br><span class="line">	<span class="keyword">double</span> rate = (<span class="keyword">double</span>)change / M * <span class="number">100</span>;</span><br><span class="line">	<span class="built_in">printf</span>(<span class="string">&quot;FIFO缺页率为：%.2lf%%\n&quot;</span>, rate);</span><br><span class="line">	<span class="built_in">printf</span>(<span class="string">&quot;--------------------------------\n&quot;</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>



<h2 id="LFU"><a href="#LFU" class="headerlink" title="LFU"></a>LFU</h2><p><strong>最少使用置换算法</strong></p>
<ul>
<li>缺点：并不能真正反映出页面的真实情况</li>
<li>优点：该算法既充分利用了主存中页面调度情况的历史信息，又正确反映了程序的局部性</li>
</ul>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">lfu</span><span class="params">()</span> <span class="comment">//最不经常使用算法，使用次数最少算法</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">	<span class="built_in">printf</span>(<span class="string">&quot;--------------------------------\n&quot;</span>);</span><br><span class="line">	<span class="built_in">printf</span>(<span class="string">&quot;现在执行的是最不经常使用算法lfu：\n&quot;</span>);</span><br><span class="line">	<span class="keyword">int</span> count[<span class="number">8</span>], tot = <span class="number">0</span>, no = <span class="number">0</span>, z = <span class="number">0</span>, least = <span class="number">100</span>, mark = <span class="number">-1</span>;</span><br><span class="line">	<span class="built_in">memset</span>(arr, <span class="number">-1</span>, <span class="keyword">sizeof</span>(arr));</span><br><span class="line">	<span class="built_in">memset</span>(count, <span class="number">0</span>, <span class="keyword">sizeof</span>(count)); <span class="comment">//用count数组记录访问次数，当访问次数相同时</span></span><br><span class="line">	<span class="keyword">for</span> (i = <span class="number">0</span>; i &lt; M; i++)          <span class="comment">//默认取索引较小的一位</span></span><br><span class="line">	&#123;</span><br><span class="line">		<span class="keyword">if</span> (no &lt; N) <span class="comment">//填充空数组 </span></span><br><span class="line">		&#123;</span><br><span class="line">			arr[no++] = pageNum[i];</span><br><span class="line">			tot++;</span><br><span class="line">			count[pageNum[i]]++;</span><br><span class="line">			showdata();</span><br><span class="line">		&#125;</span><br><span class="line">		<span class="keyword">else</span></span><br><span class="line">		&#123;</span><br><span class="line">			<span class="keyword">for</span> (j = <span class="number">0</span>; j &lt; N; j++)</span><br><span class="line">			&#123;</span><br><span class="line">				<span class="keyword">if</span> (arr[j] == pageNum[i])</span><br><span class="line">				&#123;</span><br><span class="line">					z = <span class="number">1</span>; <span class="comment">//如果队列里已经存在此进程，则无需再进行页面调度</span></span><br><span class="line">					count[pageNum[i]]++;</span><br><span class="line">				&#125;</span><br><span class="line">			&#125;</span><br><span class="line">			<span class="keyword">if</span> (z == <span class="number">0</span>)</span><br><span class="line">			&#123;</span><br><span class="line">				<span class="keyword">for</span> (<span class="keyword">int</span> k = <span class="number">0</span>; k &lt; N; k++) <span class="comment">//通过循环比较出目前访问次数最小的页面进程</span></span><br><span class="line">				&#123;</span><br><span class="line">					<span class="keyword">if</span> (count[arr[k]] &lt; least)</span><br><span class="line">					&#123;</span><br><span class="line">						least = count[arr[k]];</span><br><span class="line">						mark = k;</span><br><span class="line">					&#125;</span><br><span class="line">				&#125;</span><br><span class="line">				arr[mark] = pageNum[i];</span><br><span class="line">				showdata();</span><br><span class="line">				tot++;</span><br><span class="line">				count[pageNum[i]]++;</span><br><span class="line">			&#125;</span><br><span class="line">			z = <span class="number">0</span>;</span><br><span class="line">			least = <span class="number">100</span>;</span><br><span class="line">			mark = <span class="number">-1</span>;</span><br><span class="line">		&#125;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="built_in">printf</span>(<span class="string">&quot;页面置换的次数为：%d\n&quot;</span>, tot);</span><br><span class="line">	<span class="keyword">double</span> rate = (<span class="keyword">double</span>)tot / M * <span class="number">100</span>;</span><br><span class="line">	<span class="built_in">printf</span>(<span class="string">&quot;LFU缺页率为：%.2lf%%\n&quot;</span>, rate);</span><br><span class="line">	<span class="built_in">printf</span>(<span class="string">&quot;--------------------------------\n&quot;</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>



<h2 id="LRU"><a href="#LRU" class="headerlink" title="LRU"></a>LRU</h2><p><strong>最近最久未使用置换算法</strong></p>
<ul>
<li>优点：由于考虑程序访问的时间局部性，一般能有较好的性能；实际应用多</li>
<li>缺点：实现需要较多的硬件支持，会增加硬件成本</li>
</ul>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">lru</span><span class="params">()</span> <span class="comment">//最近最久未访问算法，从当前位往前查找</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">	<span class="built_in">printf</span>(<span class="string">&quot;--------------------------------\n&quot;</span>);</span><br><span class="line">	<span class="built_in">printf</span>(<span class="string">&quot;现在执行的是最近最久未访问算法lru：\n&quot;</span>);</span><br><span class="line">	<span class="built_in">memset</span>(arr, <span class="number">-1</span>, <span class="keyword">sizeof</span>(arr));</span><br><span class="line">	<span class="keyword">int</span> no = <span class="number">0</span>, tot = <span class="number">0</span>, z = <span class="number">0</span>, three = <span class="number">0</span>;</span><br><span class="line">	<span class="keyword">int</span> flag[<span class="number">8</span>];</span><br><span class="line">	<span class="built_in">memset</span>(flag, <span class="number">0</span>, <span class="keyword">sizeof</span>(flag)); <span class="comment">//初始化一个flag数组，来确定最晚出现需要替换的点</span></span><br><span class="line">	<span class="keyword">for</span> (i = <span class="number">0</span>; i &lt; M; i++)</span><br><span class="line">	&#123;</span><br><span class="line">		<span class="keyword">if</span> (no &lt; N) <span class="comment">//填充空数组 </span></span><br><span class="line">		&#123;</span><br><span class="line">			arr[no++] = pageNum[i];</span><br><span class="line">			tot++;</span><br><span class="line">			showdata();</span><br><span class="line">		&#125;</span><br><span class="line">		<span class="keyword">else</span> <span class="comment">//当数组填充满后</span></span><br><span class="line">		&#123;</span><br><span class="line">			<span class="keyword">for</span> (j = <span class="number">0</span>; j &lt; N; j++)</span><br><span class="line">			&#123;</span><br><span class="line">				<span class="keyword">if</span> (arr[j] == pageNum[i])</span><br><span class="line">					z = <span class="number">1</span>; <span class="comment">//如果队列里已经存在此进程，则无需再进行页面调度</span></span><br><span class="line">			&#125;</span><br><span class="line">			<span class="keyword">if</span> (z == <span class="number">0</span>)</span><br><span class="line">			&#123;</span><br><span class="line">				<span class="keyword">for</span> (<span class="keyword">int</span> k = i - <span class="number">1</span>; k &gt;= <span class="number">0</span>; k--) <span class="comment">//从上一位向前查找 </span></span><br><span class="line">				&#123;</span><br><span class="line">					<span class="keyword">for</span> (j = <span class="number">0</span>; j &lt; N; j++)</span><br><span class="line">					&#123;</span><br><span class="line">						<span class="keyword">if</span> (arr[j] == pageNum[k] &amp;&amp; three &lt; (N - <span class="number">1</span>)) <span class="comment">//此位先出现则标记此位</span></span><br><span class="line">						&#123;</span><br><span class="line">							<span class="keyword">if</span> (flag[arr[j]] == <span class="number">1</span>)</span><br><span class="line">								<span class="keyword">continue</span>;</span><br><span class="line">							flag[arr[j]] = <span class="number">1</span>;</span><br><span class="line">							three++;</span><br><span class="line">						&#125;</span><br><span class="line">					&#125;</span><br><span class="line">				&#125;</span><br><span class="line">				<span class="keyword">for</span> (<span class="keyword">int</span> l = <span class="number">0</span>; l &lt; N; l++) <span class="comment">//遍历确定最长时间未被访问的页面</span></span><br><span class="line">				&#123;</span><br><span class="line">					<span class="keyword">if</span> (flag[arr[l]] == <span class="number">1</span>)</span><br><span class="line">						<span class="keyword">continue</span>;</span><br><span class="line">					<span class="keyword">else</span></span><br><span class="line">					&#123;</span><br><span class="line">						arr[l] = pageNum[i];</span><br><span class="line">						tot++;</span><br><span class="line">						showdata();</span><br><span class="line">					&#125;</span><br><span class="line">				&#125;</span><br><span class="line">			&#125;</span><br><span class="line">			z = <span class="number">0</span>;</span><br><span class="line">			three = <span class="number">0</span>;</span><br><span class="line">			<span class="built_in">memset</span>(flag, <span class="number">0</span>, <span class="keyword">sizeof</span>(flag));</span><br><span class="line">		&#125;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="built_in">printf</span>(<span class="string">&quot;页面置换的次数为：%d\n&quot;</span>, tot);</span><br><span class="line">	<span class="keyword">double</span> rate = (<span class="keyword">double</span>)tot / M * <span class="number">100</span>;</span><br><span class="line">	<span class="built_in">printf</span>(<span class="string">&quot;LRU缺页率为：%.2lf%%\n&quot;</span>, rate);</span><br><span class="line">	<span class="built_in">printf</span>(<span class="string">&quot;--------------------------------\n&quot;</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>



<h2 id="NRU"><a href="#NRU" class="headerlink" title="NRU"></a>NRU</h2><p>最近未用/时钟算法</p>
<ul>
<li>优点：性能和开销比较均衡</li>
<li>缺点：未考虑页面是否被修改过</li>
</ul>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">nru</span><span class="params">()</span> <span class="comment">//clock置换算法/最近未用算法/NRU算法</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">	<span class="built_in">printf</span>(<span class="string">&quot;--------------------------------\n&quot;</span>);</span><br><span class="line">	<span class="built_in">printf</span>(<span class="string">&quot;现在执行的是clock置换算法nru：\n&quot;</span>);</span><br><span class="line">	<span class="keyword">int</span> ask[<span class="number">10</span>], no = <span class="number">0</span>, tot = <span class="number">0</span>, z = <span class="number">0</span>, mark = <span class="number">0</span>;</span><br><span class="line">	<span class="built_in">memset</span>(arr, <span class="number">-1</span>, <span class="keyword">sizeof</span>(arr));</span><br><span class="line">	<span class="built_in">memset</span>(ask, <span class="number">0</span>, <span class="keyword">sizeof</span>(ask)); <span class="comment">//ask数组标记是否访问，1代表最近访问，0代表未访问</span></span><br><span class="line">	<span class="keyword">for</span> (i = <span class="number">0</span>; i &lt; M; i++)</span><br><span class="line">	&#123;</span><br><span class="line">		<span class="keyword">if</span> (no &lt; N) <span class="comment">//填充空数组 </span></span><br><span class="line">		&#123;</span><br><span class="line">			ask[no] = <span class="number">1</span>; <span class="comment">//初始化为最近访问</span></span><br><span class="line">			arr[no++] = pageNum[i];</span><br><span class="line">			tot++;</span><br><span class="line">			showdata();</span><br><span class="line">		&#125;</span><br><span class="line">		<span class="keyword">else</span></span><br><span class="line">		&#123;</span><br><span class="line">			<span class="keyword">for</span> (j = <span class="number">0</span>; j &lt; N; j++)</span><br><span class="line">			&#123;</span><br><span class="line">				<span class="keyword">if</span> (arr[j] == pageNum[i])</span><br><span class="line">				&#123;</span><br><span class="line">					z = <span class="number">1</span>; <span class="comment">//如果队列里已经存在此进程，则无需再进行页面调度</span></span><br><span class="line">					ask[j] = <span class="number">1</span>; <span class="comment">//同时更新最近访问</span></span><br><span class="line">				&#125;</span><br><span class="line">			&#125;</span><br><span class="line">			<span class="keyword">if</span> (z == <span class="number">0</span>)</span><br><span class="line">			&#123;</span><br><span class="line">				<span class="keyword">int</span> k = <span class="number">0</span>;</span><br><span class="line">				<span class="keyword">while</span> (<span class="number">1</span>) <span class="comment">//通过循环找出访问位为0</span></span><br><span class="line">				&#123;</span><br><span class="line">					<span class="keyword">for</span> (k = <span class="number">0</span>; k &lt; N; k++)</span><br><span class="line">					&#123;</span><br><span class="line">						<span class="keyword">if</span> (ask[k] == <span class="number">0</span>)</span><br><span class="line">							<span class="keyword">goto</span> flag;</span><br><span class="line">						<span class="keyword">else</span> <span class="keyword">if</span> (ask[k] == <span class="number">1</span>)</span><br><span class="line">							ask[k] = <span class="number">0</span>;</span><br><span class="line">					&#125;</span><br><span class="line">				&#125;</span><br><span class="line">				flag:</span><br><span class="line">				arr[k] = pageNum[i];</span><br><span class="line">				ask[k] = <span class="number">1</span>;</span><br><span class="line">				showdata();</span><br><span class="line">				tot++;</span><br><span class="line">			&#125;</span><br><span class="line">		&#125;</span><br><span class="line">		z = <span class="number">0</span>;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="built_in">printf</span>(<span class="string">&quot;页面置换的次数为：%d\n&quot;</span>, tot);</span><br><span class="line">	<span class="keyword">double</span> rate = (<span class="keyword">double</span>)tot / M * <span class="number">100</span>;</span><br><span class="line">	<span class="built_in">printf</span>(<span class="string">&quot;NRU缺页率为：%.2lf%%\n&quot;</span>, rate);</span><br><span class="line">	<span class="built_in">printf</span>(<span class="string">&quot;--------------------------------\n&quot;</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>



<h2 id="代码实现-C语言"><a href="#代码实现-C语言" class="headerlink" title="代码实现(C语言)"></a>代码实现(C语言)</h2><figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdlib.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> N 3</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> M 20</span></span><br><span class="line"><span class="keyword">int</span> i, j;</span><br><span class="line"><span class="keyword">int</span> arr[N];</span><br><span class="line"><span class="keyword">int</span> pageNum[M] = &#123; <span class="number">7</span>,<span class="number">0</span>,<span class="number">1</span>,<span class="number">2</span>,<span class="number">0</span>,<span class="number">3</span>,<span class="number">0</span>,<span class="number">4</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">0</span>,<span class="number">3</span>,<span class="number">2</span>,<span class="number">1</span>,<span class="number">2</span>,<span class="number">0</span>,<span class="number">1</span>,<span class="number">7</span>,<span class="number">0</span>,<span class="number">1</span> &#125;;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">showdata</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">	<span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; N; i++)</span><br><span class="line">	&#123;</span><br><span class="line">		<span class="built_in">printf</span>(<span class="string">&quot;%d &quot;</span>, arr[i]);</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="built_in">printf</span>(<span class="string">&quot;\n&quot;</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//FIFO先进先出算法</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">fifo</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">	<span class="built_in">printf</span>(<span class="string">&quot;--------------------------------\n&quot;</span>);</span><br><span class="line">	<span class="built_in">printf</span>(<span class="string">&quot;现在执行的是FIFO先进先出算法：\n&quot;</span>);</span><br><span class="line">	<span class="built_in">memset</span>(arr, <span class="number">-1</span>, <span class="keyword">sizeof</span>(arr));</span><br><span class="line">	<span class="keyword">int</span> no = <span class="number">0</span>, z = <span class="number">0</span>, change = <span class="number">0</span>;</span><br><span class="line">	<span class="keyword">for</span> (i = <span class="number">0</span>; i &lt; M; i++)</span><br><span class="line">	&#123;</span><br><span class="line">		<span class="keyword">for</span> (j = <span class="number">0</span>; j &lt; N; j++)</span><br><span class="line">		&#123;</span><br><span class="line">			<span class="keyword">if</span> (arr[j] == pageNum[i])</span><br><span class="line">				z = <span class="number">1</span>; <span class="comment">//如果队列里已经存在此进程，则无需再进行页面调度</span></span><br><span class="line">		&#125;</span><br><span class="line">		<span class="keyword">if</span> (z == <span class="number">0</span>)</span><br><span class="line">		&#123;</span><br><span class="line">			change++;</span><br><span class="line">			arr[no++] = pageNum[i];</span><br><span class="line">			showdata();</span><br><span class="line">		&#125;</span><br><span class="line">		z = <span class="number">0</span>; <span class="comment">//默认需要调度</span></span><br><span class="line">		<span class="keyword">if</span> (no == N) <span class="comment">//队列已满，则归0从头开始，等效于队头出队</span></span><br><span class="line">			no = <span class="number">0</span>;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="built_in">printf</span>(<span class="string">&quot;页面置换的次数为：%d\n&quot;</span>, change);</span><br><span class="line">	<span class="keyword">double</span> rate = (<span class="keyword">double</span>)change / M * <span class="number">100</span>;</span><br><span class="line">	<span class="built_in">printf</span>(<span class="string">&quot;FIFO缺页率为：%.2lf%%\n&quot;</span>, rate);</span><br><span class="line">	<span class="built_in">printf</span>(<span class="string">&quot;--------------------------------\n&quot;</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">opt</span><span class="params">()</span> <span class="comment">//最佳转换算法，往后查找</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">	<span class="built_in">printf</span>(<span class="string">&quot;--------------------------------\n&quot;</span>);</span><br><span class="line">	<span class="built_in">printf</span>(<span class="string">&quot;现在执行的是最佳置换算法opt：\n&quot;</span>);</span><br><span class="line">	<span class="built_in">memset</span>(arr, <span class="number">-1</span>, <span class="keyword">sizeof</span>(arr));</span><br><span class="line">	<span class="keyword">int</span> no = <span class="number">0</span>, tot = <span class="number">0</span>, z = <span class="number">0</span>, three = <span class="number">0</span>;</span><br><span class="line">	<span class="keyword">int</span> flag[<span class="number">8</span>];</span><br><span class="line">	<span class="built_in">memset</span>(flag, <span class="number">0</span>, <span class="keyword">sizeof</span>(flag)); <span class="comment">//初始化一个flag数组，来确定最晚出现需要替换的点</span></span><br><span class="line">	<span class="keyword">for</span> (i = <span class="number">0</span>; i &lt; M; i++)</span><br><span class="line">	&#123;</span><br><span class="line">		<span class="keyword">if</span> (no &lt; N) <span class="comment">//填充空数组 </span></span><br><span class="line">		&#123;</span><br><span class="line">			arr[no++] = pageNum[i];</span><br><span class="line">			tot++;</span><br><span class="line">			showdata(); </span><br><span class="line">		&#125;</span><br><span class="line">		<span class="keyword">else</span> <span class="comment">//当数组填充满后</span></span><br><span class="line">		&#123;</span><br><span class="line">			<span class="keyword">for</span> (j = <span class="number">0</span>; j &lt; N; j++)</span><br><span class="line">			&#123;</span><br><span class="line">				<span class="keyword">if</span> (arr[j] == pageNum[i])</span><br><span class="line">					z = <span class="number">1</span>; <span class="comment">//如果队列里已经存在此进程，则无需再进行页面调度</span></span><br><span class="line">			&#125;</span><br><span class="line">			<span class="keyword">if</span> (z == <span class="number">0</span>)</span><br><span class="line">			&#123;</span><br><span class="line">				<span class="keyword">for</span> (<span class="keyword">int</span> k = i + <span class="number">1</span>; k &lt; M; k++) <span class="comment">//从下一位向后查找 </span></span><br><span class="line">				&#123;</span><br><span class="line">					<span class="keyword">for</span> (j = <span class="number">0</span>; j &lt; N; j++)</span><br><span class="line">					&#123;</span><br><span class="line">						<span class="keyword">if</span> (arr[j] == pageNum[k] &amp;&amp; three &lt; (N<span class="number">-1</span>)) <span class="comment">//此位先出现则标记此位</span></span><br><span class="line">						&#123;</span><br><span class="line">							<span class="keyword">if</span> (flag[arr[j]] == <span class="number">1</span>)</span><br><span class="line">								<span class="keyword">continue</span>;</span><br><span class="line">							flag[arr[j]] = <span class="number">1</span>;							</span><br><span class="line">							three++;</span><br><span class="line">						&#125;</span><br><span class="line">					&#125;</span><br><span class="line">				&#125;</span><br><span class="line">				<span class="keyword">for</span> (<span class="keyword">int</span> l = <span class="number">0</span>; l &lt; N; l++) <span class="comment">//遍历确定最长时间未被访问的页面</span></span><br><span class="line">				&#123;</span><br><span class="line">					<span class="keyword">if</span> (flag[arr[l]] == <span class="number">1</span>)</span><br><span class="line">						<span class="keyword">continue</span>;</span><br><span class="line">					<span class="keyword">else</span>         </span><br><span class="line">					&#123;</span><br><span class="line">						arr[l] = pageNum[i];</span><br><span class="line">						tot++;</span><br><span class="line">						showdata();</span><br><span class="line">					&#125;</span><br><span class="line">				&#125;</span><br><span class="line">			&#125;</span><br><span class="line">			z = <span class="number">0</span>;</span><br><span class="line">			three = <span class="number">0</span>;</span><br><span class="line">			<span class="built_in">memset</span>(flag, <span class="number">0</span>, <span class="keyword">sizeof</span>(flag));</span><br><span class="line">		&#125;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="built_in">printf</span>(<span class="string">&quot;页面置换的次数为：%d\n&quot;</span>, tot);</span><br><span class="line">	<span class="keyword">double</span> rate = (<span class="keyword">double</span>)tot / M * <span class="number">100</span>;</span><br><span class="line">	<span class="built_in">printf</span>(<span class="string">&quot;OPT缺页率为：%.2lf%%\n&quot;</span>, rate);</span><br><span class="line">	<span class="built_in">printf</span>(<span class="string">&quot;--------------------------------\n&quot;</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">lru</span><span class="params">()</span> <span class="comment">//最近最久未访问算法，从当前位往前查找</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">	<span class="built_in">printf</span>(<span class="string">&quot;--------------------------------\n&quot;</span>);</span><br><span class="line">	<span class="built_in">printf</span>(<span class="string">&quot;现在执行的是最近最久未访问算法lru：\n&quot;</span>);</span><br><span class="line">	<span class="built_in">memset</span>(arr, <span class="number">-1</span>, <span class="keyword">sizeof</span>(arr));</span><br><span class="line">	<span class="keyword">int</span> no = <span class="number">0</span>, tot = <span class="number">0</span>, z = <span class="number">0</span>, three = <span class="number">0</span>;</span><br><span class="line">	<span class="keyword">int</span> flag[<span class="number">8</span>];</span><br><span class="line">	<span class="built_in">memset</span>(flag, <span class="number">0</span>, <span class="keyword">sizeof</span>(flag)); <span class="comment">//初始化一个flag数组，来确定最晚出现需要替换的点</span></span><br><span class="line">	<span class="keyword">for</span> (i = <span class="number">0</span>; i &lt; M; i++)</span><br><span class="line">	&#123;</span><br><span class="line">		<span class="keyword">if</span> (no &lt; N) <span class="comment">//填充空数组 </span></span><br><span class="line">		&#123;</span><br><span class="line">			arr[no++] = pageNum[i];</span><br><span class="line">			tot++;</span><br><span class="line">			showdata();</span><br><span class="line">		&#125;</span><br><span class="line">		<span class="keyword">else</span> <span class="comment">//当数组填充满后</span></span><br><span class="line">		&#123;</span><br><span class="line">			<span class="keyword">for</span> (j = <span class="number">0</span>; j &lt; N; j++)</span><br><span class="line">			&#123;</span><br><span class="line">				<span class="keyword">if</span> (arr[j] == pageNum[i])</span><br><span class="line">					z = <span class="number">1</span>; <span class="comment">//如果队列里已经存在此进程，则无需再进行页面调度</span></span><br><span class="line">			&#125;</span><br><span class="line">			<span class="keyword">if</span> (z == <span class="number">0</span>)</span><br><span class="line">			&#123;</span><br><span class="line">				<span class="keyword">for</span> (<span class="keyword">int</span> k = i - <span class="number">1</span>; k &gt;= <span class="number">0</span>; k--) <span class="comment">//从上一位向前查找 </span></span><br><span class="line">				&#123;</span><br><span class="line">					<span class="keyword">for</span> (j = <span class="number">0</span>; j &lt; N; j++)</span><br><span class="line">					&#123;</span><br><span class="line">						<span class="keyword">if</span> (arr[j] == pageNum[k] &amp;&amp; three &lt; (N - <span class="number">1</span>)) <span class="comment">//此位先出现则标记此位</span></span><br><span class="line">						&#123;</span><br><span class="line">							<span class="keyword">if</span> (flag[arr[j]] == <span class="number">1</span>)</span><br><span class="line">								<span class="keyword">continue</span>;</span><br><span class="line">							flag[arr[j]] = <span class="number">1</span>;</span><br><span class="line">							three++;</span><br><span class="line">						&#125;</span><br><span class="line">					&#125;</span><br><span class="line">				&#125;</span><br><span class="line">				<span class="keyword">for</span> (<span class="keyword">int</span> l = <span class="number">0</span>; l &lt; N; l++) <span class="comment">//遍历确定最长时间未被访问的页面</span></span><br><span class="line">				&#123;</span><br><span class="line">					<span class="keyword">if</span> (flag[arr[l]] == <span class="number">1</span>)</span><br><span class="line">						<span class="keyword">continue</span>;</span><br><span class="line">					<span class="keyword">else</span></span><br><span class="line">					&#123;</span><br><span class="line">						arr[l] = pageNum[i];</span><br><span class="line">						tot++;</span><br><span class="line">						showdata();</span><br><span class="line">					&#125;</span><br><span class="line">				&#125;</span><br><span class="line">			&#125;</span><br><span class="line">			z = <span class="number">0</span>;</span><br><span class="line">			three = <span class="number">0</span>;</span><br><span class="line">			<span class="built_in">memset</span>(flag, <span class="number">0</span>, <span class="keyword">sizeof</span>(flag));</span><br><span class="line">		&#125;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="built_in">printf</span>(<span class="string">&quot;页面置换的次数为：%d\n&quot;</span>, tot);</span><br><span class="line">	<span class="keyword">double</span> rate = (<span class="keyword">double</span>)tot / M * <span class="number">100</span>;</span><br><span class="line">	<span class="built_in">printf</span>(<span class="string">&quot;LRU缺页率为：%.2lf%%\n&quot;</span>, rate);</span><br><span class="line">	<span class="built_in">printf</span>(<span class="string">&quot;--------------------------------\n&quot;</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">lfu</span><span class="params">()</span> <span class="comment">//最不经常使用算法，使用次数最少算法</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">	<span class="built_in">printf</span>(<span class="string">&quot;--------------------------------\n&quot;</span>);</span><br><span class="line">	<span class="built_in">printf</span>(<span class="string">&quot;现在执行的是最不经常使用算法lfu：\n&quot;</span>);</span><br><span class="line">	<span class="keyword">int</span> count[<span class="number">8</span>], tot = <span class="number">0</span>, no = <span class="number">0</span>, z = <span class="number">0</span>, least = <span class="number">100</span>, mark = <span class="number">-1</span>;</span><br><span class="line">	<span class="built_in">memset</span>(arr, <span class="number">-1</span>, <span class="keyword">sizeof</span>(arr));</span><br><span class="line">	<span class="built_in">memset</span>(count, <span class="number">0</span>, <span class="keyword">sizeof</span>(count)); <span class="comment">//用count数组记录访问次数，当访问次数相同时</span></span><br><span class="line">	<span class="keyword">for</span> (i = <span class="number">0</span>; i &lt; M; i++)          <span class="comment">//默认取索引较小的一位</span></span><br><span class="line">	&#123;</span><br><span class="line">		<span class="keyword">if</span> (no &lt; N) <span class="comment">//填充空数组 </span></span><br><span class="line">		&#123;</span><br><span class="line">			arr[no++] = pageNum[i];</span><br><span class="line">			tot++;</span><br><span class="line">			count[pageNum[i]]++;</span><br><span class="line">			showdata();</span><br><span class="line">		&#125;</span><br><span class="line">		<span class="keyword">else</span></span><br><span class="line">		&#123;</span><br><span class="line">			<span class="keyword">for</span> (j = <span class="number">0</span>; j &lt; N; j++)</span><br><span class="line">			&#123;</span><br><span class="line">				<span class="keyword">if</span> (arr[j] == pageNum[i])</span><br><span class="line">				&#123;</span><br><span class="line">					z = <span class="number">1</span>; <span class="comment">//如果队列里已经存在此进程，则无需再进行页面调度</span></span><br><span class="line">					count[pageNum[i]]++;</span><br><span class="line">				&#125;</span><br><span class="line">			&#125;</span><br><span class="line">			<span class="keyword">if</span> (z == <span class="number">0</span>)</span><br><span class="line">			&#123;</span><br><span class="line">				<span class="keyword">for</span> (<span class="keyword">int</span> k = <span class="number">0</span>; k &lt; N; k++) <span class="comment">//通过循环比较出目前访问次数最小的页面进程</span></span><br><span class="line">				&#123;</span><br><span class="line">					<span class="keyword">if</span> (count[arr[k]] &lt; least)</span><br><span class="line">					&#123;</span><br><span class="line">						least = count[arr[k]];</span><br><span class="line">						mark = k;</span><br><span class="line">					&#125;</span><br><span class="line">				&#125;</span><br><span class="line">				arr[mark] = pageNum[i];</span><br><span class="line">				showdata();</span><br><span class="line">				tot++;</span><br><span class="line">				count[pageNum[i]]++;</span><br><span class="line">			&#125;</span><br><span class="line">			z = <span class="number">0</span>;</span><br><span class="line">			least = <span class="number">100</span>;</span><br><span class="line">			mark = <span class="number">-1</span>;</span><br><span class="line">		&#125;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="built_in">printf</span>(<span class="string">&quot;页面置换的次数为：%d\n&quot;</span>, tot);</span><br><span class="line">	<span class="keyword">double</span> rate = (<span class="keyword">double</span>)tot / M * <span class="number">100</span>;</span><br><span class="line">	<span class="built_in">printf</span>(<span class="string">&quot;LFU缺页率为：%.2lf%%\n&quot;</span>, rate);</span><br><span class="line">	<span class="built_in">printf</span>(<span class="string">&quot;--------------------------------\n&quot;</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">nru</span><span class="params">()</span> <span class="comment">//clock置换算法/最近未用算法/NRU算法</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">	<span class="built_in">printf</span>(<span class="string">&quot;--------------------------------\n&quot;</span>);</span><br><span class="line">	<span class="built_in">printf</span>(<span class="string">&quot;现在执行的是clock置换算法nru：\n&quot;</span>);</span><br><span class="line">	<span class="keyword">int</span> ask[<span class="number">10</span>], no = <span class="number">0</span>, tot = <span class="number">0</span>, z = <span class="number">0</span>, mark = <span class="number">0</span>;</span><br><span class="line">	<span class="built_in">memset</span>(arr, <span class="number">-1</span>, <span class="keyword">sizeof</span>(arr));</span><br><span class="line">	<span class="built_in">memset</span>(ask, <span class="number">0</span>, <span class="keyword">sizeof</span>(ask)); <span class="comment">//ask数组标记是否访问，1代表最近访问，0代表未访问</span></span><br><span class="line">	<span class="keyword">for</span> (i = <span class="number">0</span>; i &lt; M; i++)</span><br><span class="line">	&#123;</span><br><span class="line">		<span class="keyword">if</span> (no &lt; N) <span class="comment">//填充空数组 </span></span><br><span class="line">		&#123;</span><br><span class="line">			ask[no] = <span class="number">1</span>; <span class="comment">//初始化为最近访问</span></span><br><span class="line">			arr[no++] = pageNum[i];</span><br><span class="line">			tot++;</span><br><span class="line">			showdata();</span><br><span class="line">		&#125;</span><br><span class="line">		<span class="keyword">else</span></span><br><span class="line">		&#123;</span><br><span class="line">			<span class="keyword">for</span> (j = <span class="number">0</span>; j &lt; N; j++)</span><br><span class="line">			&#123;</span><br><span class="line">				<span class="keyword">if</span> (arr[j] == pageNum[i])</span><br><span class="line">				&#123;</span><br><span class="line">					z = <span class="number">1</span>; <span class="comment">//如果队列里已经存在此进程，则无需再进行页面调度</span></span><br><span class="line">					ask[j] = <span class="number">1</span>; <span class="comment">//同时更新最近访问</span></span><br><span class="line">				&#125;</span><br><span class="line">			&#125;</span><br><span class="line">			<span class="keyword">if</span> (z == <span class="number">0</span>)</span><br><span class="line">			&#123;</span><br><span class="line">				<span class="keyword">int</span> k = <span class="number">0</span>;</span><br><span class="line">				<span class="keyword">while</span> (<span class="number">1</span>) <span class="comment">//通过循环找出访问位为0</span></span><br><span class="line">				&#123;</span><br><span class="line">					<span class="keyword">for</span> (k = <span class="number">0</span>; k &lt; N; k++)</span><br><span class="line">					&#123;</span><br><span class="line">						<span class="keyword">if</span> (ask[k] == <span class="number">0</span>)</span><br><span class="line">							<span class="keyword">goto</span> flag;</span><br><span class="line">						<span class="keyword">else</span> <span class="keyword">if</span> (ask[k] == <span class="number">1</span>)</span><br><span class="line">							ask[k] = <span class="number">0</span>;</span><br><span class="line">					&#125;</span><br><span class="line">				&#125;</span><br><span class="line">				flag:</span><br><span class="line">				arr[k] = pageNum[i];</span><br><span class="line">				ask[k] = <span class="number">1</span>;</span><br><span class="line">				showdata();</span><br><span class="line">				tot++;</span><br><span class="line">			&#125;</span><br><span class="line">		&#125;</span><br><span class="line">		z = <span class="number">0</span>;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="built_in">printf</span>(<span class="string">&quot;页面置换的次数为：%d\n&quot;</span>, tot);</span><br><span class="line">	<span class="keyword">double</span> rate = (<span class="keyword">double</span>)tot / M * <span class="number">100</span>;</span><br><span class="line">	<span class="built_in">printf</span>(<span class="string">&quot;NRU缺页率为：%.2lf%%\n&quot;</span>, rate);</span><br><span class="line">	<span class="built_in">printf</span>(<span class="string">&quot;--------------------------------\n&quot;</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">	fifo(); <span class="comment">//先进先出算法</span></span><br><span class="line">	opt(); <span class="comment">//最佳转换算法</span></span><br><span class="line">	lru(); <span class="comment">//最近最久未使用</span></span><br><span class="line">	lfu(); <span class="comment">//最不经常使用算法</span></span><br><span class="line">	nru(); <span class="comment">//clock置换算法</span></span><br><span class="line"></span><br><span class="line">	<span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure>]]></content>
      <categories>
        <category>os</category>
        <category>算法</category>
      </categories>
      <tags>
        <tag>os</tag>
        <tag>算法</tag>
      </tags>
  </entry>
  <entry>
    <title>天梯笔记</title>
    <url>/2021/03/04/%E5%A4%A9%E6%A2%AF%E7%AC%94%E8%AE%B0/</url>
    <content><![CDATA[<p>本节文章对刷天梯赛的过程作一些记录，主要是一些题目自己的理解。</p>
<p>涉及到一些数据，熟悉其基本原理，并加以例题帮助理解。</p>
<p>Nothing is unreachable ! to me</p>
<a id="more"></a>

<h1 id="并查集"><a href="#并查集" class="headerlink" title="并查集"></a>并查集</h1><h2 id="初始化结点"><a href="#初始化结点" class="headerlink" title="初始化结点"></a>初始化结点</h2><figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">init</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= n; i++)</span><br><span class="line">        father[i] = i;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="查找一个结点的根结点"><a href="#查找一个结点的根结点" class="headerlink" title="查找一个结点的根结点"></a>查找一个结点的根结点</h2><figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">get</span><span class="params">(<span class="keyword">int</span> x)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(father[x] == x) <span class="comment">//递归基，直至找到根结点</span></span><br><span class="line">        <span class="keyword">return</span> x;</span><br><span class="line">    <span class="keyword">return</span> father[x] = get(father[x]); <span class="comment">//使结点直接指向根结点</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="合并"><a href="#合并" class="headerlink" title="合并"></a>合并</h2><figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">merge</span><span class="params">(<span class="keyword">int</span> x, <span class="keyword">int</span> y)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    x = get(x); <span class="comment">//找到x结点的根结点</span></span><br><span class="line">    y = get(y); </span><br><span class="line">    <span class="keyword">if</span>(x != y) <span class="comment">//若二者不等</span></span><br><span class="line">        father[y] = x; <span class="comment">//让y指向x</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="例题-luogu"><a href="#例题-luogu" class="headerlink" title="例题(luogu)"></a>例题(luogu)</h2><h3 id="题目背景"><a href="#题目背景" class="headerlink" title="题目背景"></a>题目背景</h3><p>若某个家族人员过于庞大，要判断两个是否是亲戚，确实还很不容易，现在给出某个亲戚关系图，求任意给出的两个人是否具有亲戚关系。</p>
<h3 id="题目描述"><a href="#题目描述" class="headerlink" title="题目描述"></a>题目描述</h3><p>规定：x和y是亲戚，y和z是亲戚，那么x和z也是亲戚。如果x,y是亲戚，那么x的亲戚都是y的亲戚，y的亲戚也都是x的亲戚。</p>
<h3 id="输入格式"><a href="#输入格式" class="headerlink" title="输入格式"></a>输入格式</h3><p>第一行：三个整数n,m,p，（n&lt;=5000,m&lt;=5000,p&lt;=5000），分别表示有n个人，m个亲戚关系，询问p对亲戚关系。</p>
<p>以下m行：每行两个数Mi，Mj，1&lt;=Mi，Mj&lt;=N，表示Mi和Mj具有亲戚关系。</p>
<p>接下来p行：每行两个数Pi，Pj，询问Pi和Pj是否具有亲戚关系。</p>
<h3 id="输出格式"><a href="#输出格式" class="headerlink" title="输出格式"></a>输出格式</h3><p>P行，每行一个’Yes’或’No’。表示第i个询问的答案为“具有”或“不具有”亲戚关系。</p>
<h3 id="输入输出样例"><a href="#输入输出样例" class="headerlink" title="输入输出样例"></a>输入输出样例</h3><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">6 5 3</span><br><span class="line">1 2</span><br><span class="line">1 5</span><br><span class="line">3 4</span><br><span class="line">5 2</span><br><span class="line">1 3</span><br><span class="line">1 4</span><br><span class="line">2 3</span><br><span class="line">5 6</span><br></pre></td></tr></table></figure>

<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">Yes</span><br><span class="line">Yes</span><br><span class="line">No</span><br></pre></td></tr></table></figure>

<h3 id="solution"><a href="#solution" class="headerlink" title="solution"></a>solution</h3><figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="keyword">int</span> n, m, p, a, b, c, d, father[<span class="number">5005</span>];</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">get</span><span class="params">(<span class="keyword">int</span> x)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(father[x] == x)</span><br><span class="line">        <span class="keyword">return</span> x;</span><br><span class="line">    <span class="keyword">return</span> father[x] = get(father[x]);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">merge</span><span class="params">(<span class="keyword">int</span> x, <span class="keyword">int</span> y)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    x = get(x);</span><br><span class="line">    y = get(y);</span><br><span class="line">    <span class="keyword">if</span>(x != y)</span><br><span class="line">        father[y] = x;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="built_in">cin</span> &gt;&gt; n &gt;&gt; m &gt;&gt; p;</span><br><span class="line">    <span class="comment">//初始化</span></span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= n; i++)</span><br><span class="line">        father[i] = i;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; m; i++)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="built_in">cin</span> &gt;&gt; a &gt;&gt; b;</span><br><span class="line">        merge(a, b);        </span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">while</span>(p--)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="built_in">cin</span> &gt;&gt; c &gt;&gt; d;</span><br><span class="line">        c = get(c);</span><br><span class="line">        d = get(d);</span><br><span class="line">        <span class="keyword">if</span>(c == d)</span><br><span class="line">            <span class="built_in">cout</span> &lt;&lt; <span class="string">&quot;Yes&quot;</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">        <span class="keyword">else</span></span><br><span class="line">            <span class="built_in">cout</span> &lt;&lt; <span class="string">&quot;No&quot;</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>



<h1 id="L1-002-打印沙漏-20-分"><a href="#L1-002-打印沙漏-20-分" class="headerlink" title="L1-002 打印沙漏 (20 分)"></a>L1-002 打印沙漏 (20 分)</h1><p>本题要求你写个程序把给定的符号打印成沙漏的形状。例如给定17个“*”，要求按下列格式打印</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">*****</span><br><span class="line"> ***</span><br><span class="line">  *</span><br><span class="line"> ***</span><br><span class="line">*****</span><br></pre></td></tr></table></figure>

<p>所谓“沙漏形状”，是指每行输出奇数个符号；各行符号中心对齐；相邻两行符号数差2；符号数先从大到小顺序递减到1，再从小到大顺序递增；首尾符号数相等。</p>
<p>给定任意N个符号，不一定能正好组成一个沙漏。要求打印出的沙漏能用掉尽可能多的符号。</p>
<h2 id="输入格式-1"><a href="#输入格式-1" class="headerlink" title="输入格式:"></a>输入格式:</h2><p>输入在一行给出1个正整数N（≤1000）和一个符号，中间以空格分隔。</p>
<h2 id="输出格式-1"><a href="#输出格式-1" class="headerlink" title="输出格式:"></a>输出格式:</h2><p>首先打印出由给定符号组成的最大的沙漏形状，最后在一行中输出剩下没用掉的符号数。</p>
<h2 id="输入样例"><a href="#输入样例" class="headerlink" title="输入样例:"></a>输入样例:</h2><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">19 *</span><br></pre></td></tr></table></figure>

<h2 id="输出样例"><a href="#输出样例" class="headerlink" title="输出样例:"></a>输出样例:</h2><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">*****</span><br><span class="line"> ***</span><br><span class="line">  *</span><br><span class="line"> ***</span><br><span class="line">*****</span><br><span class="line">2</span><br></pre></td></tr></table></figure>

<h2 id="分析"><a href="#分析" class="headerlink" title="分析"></a>分析</h2><p>本道题为找规律题，前半段的行数与总数之间存在2*N^2-1的关系，发现这个关系后，就转化为普通的打印形状题</p>
<h2 id="solution-1"><a href="#solution-1" class="headerlink" title="solution"></a>solution</h2><figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstdio&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> N, row, remain;</span><br><span class="line">    <span class="keyword">char</span> ch;</span><br><span class="line">    <span class="built_in">scanf</span>(<span class="string">&quot;%d %c&quot;</span>, &amp;N, &amp;ch);</span><br><span class="line">    <span class="keyword">while</span>(<span class="literal">true</span>)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">if</span>(<span class="number">2</span>*row*row<span class="number">-1</span> &gt; N)</span><br><span class="line">            <span class="keyword">break</span>;</span><br><span class="line">        <span class="keyword">else</span></span><br><span class="line">            row++;</span><br><span class="line">    &#125;</span><br><span class="line">    row--;</span><br><span class="line">    remain = N - (<span class="number">2</span>*row*row<span class="number">-1</span>);</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i = row; i &gt; <span class="number">0</span>; i--)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> k = <span class="number">0</span>; k &lt; row - i; k++)</span><br><span class="line">            <span class="built_in">printf</span>(<span class="string">&quot; &quot;</span>);</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> j = <span class="number">2</span>*i - <span class="number">1</span>; j &gt; <span class="number">0</span>; j--)</span><br><span class="line">            <span class="built_in">printf</span>(<span class="string">&quot;%c&quot;</span>, ch);</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;\n&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">2</span>; i &lt; row+<span class="number">1</span>; i++)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> k = <span class="number">0</span>; k &lt; row - i; k++)</span><br><span class="line">            <span class="built_in">printf</span>(<span class="string">&quot; &quot;</span>);</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> j = <span class="number">2</span>*i - <span class="number">1</span>; j &gt; <span class="number">0</span>; j--)</span><br><span class="line">            <span class="built_in">printf</span>(<span class="string">&quot;%c&quot;</span>, ch);</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;\n&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;%d\n&quot;</span>, remain);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>



<h1 id="L1-011-A-B-20-分"><a href="#L1-011-A-B-20-分" class="headerlink" title="L1-011 A-B (20 分)"></a>L1-011 A-B (20 分)</h1><p>本题要求你计算<em>A</em>−<em>B</em>。不过麻烦的是，<em>A</em>和<em>B</em>都是字符串 —— 即从字符串<em>A</em>中把字符串<em>B</em>所包含的字符全删掉，剩下的字符组成的就是字符串<em>A</em>−<em>B</em>。</p>
<h2 id="输入格式："><a href="#输入格式：" class="headerlink" title="输入格式："></a>输入格式：</h2><p>输入在2行中先后给出字符串<em>A</em>和<em>B</em>。两字符串的长度都不超过104，并且保证每个字符串都是由可见的ASCII码和空白字符组成，最后以换行符结束。</p>
<h2 id="输出格式："><a href="#输出格式：" class="headerlink" title="输出格式："></a>输出格式：</h2><p>在一行中打印出<em>A</em>−<em>B</em>的结果字符串。</p>
<!--more-->

<h2 id="输入样例："><a href="#输入样例：" class="headerlink" title="输入样例："></a>输入样例：</h2><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">I love GPLT!  It&#39;s a fun game!</span><br><span class="line">aeiou</span><br></pre></td></tr></table></figure>

<h2 id="输出样例："><a href="#输出样例：" class="headerlink" title="输出样例："></a>输出样例：</h2><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">I lv GPLT!  It&#39;s  fn gm!</span><br></pre></td></tr></table></figure>

<h2 id="解法："><a href="#解法：" class="headerlink" title="解法："></a>解法：</h2><figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;string&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="built_in">string</span> A, B;</span><br><span class="line">    getline(<span class="built_in">cin</span>, A);<span class="comment">//面向行输入</span></span><br><span class="line">    getline(<span class="built_in">cin</span>, B);</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; B.size(); i++)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> j = <span class="number">0</span>; j &lt; A.size(); j++)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">if</span>(A[j] == B[i])</span><br><span class="line">            &#123;</span><br><span class="line">                A.replace(j, <span class="number">1</span>, <span class="string">&quot;&quot;</span>);</span><br><span class="line">                j--;<span class="comment">//删掉此位后，要再次判断本位的值，避免因重复出现而漏删</span></span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">cout</span> &lt;&lt; A &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>



<h1 id="L1-027-出租-20-分"><a href="#L1-027-出租-20-分" class="headerlink" title="L1-027 出租 (20 分)"></a><strong>L1-027 出租 (20 分)</strong></h1><h2 id="输入格式：-1"><a href="#输入格式：-1" class="headerlink" title="输入格式："></a>输入格式：</h2><p>输入在一行中给出一个由11位数字组成的手机号码。</p>
<h2 id="输出格式：-1"><a href="#输出格式：-1" class="headerlink" title="输出格式："></a>输出格式：</h2><p>为输入的号码生成代码的前两行，其中<code>arr</code>中的数字必须按递减顺序给出。</p>
<h2 id="输入样例：-1"><a href="#输入样例：-1" class="headerlink" title="输入样例："></a>输入样例：</h2><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">18013820100</span><br></pre></td></tr></table></figure>

<h2 id="输出样例：-1"><a href="#输出样例：-1" class="headerlink" title="输出样例："></a>输出样例：</h2><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">int[] arr &#x3D; new int[]&#123;8,3,2,1,0&#125;;</span><br><span class="line">int[] index &#x3D; new int[]&#123;3,0,4,3,1,0,2,4,3,4,4&#125;;</span><br></pre></td></tr></table></figure>

<h2 id="解法：-1"><a href="#解法：-1" class="headerlink" title="解法："></a>解法：</h2><figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;set&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;algorithm&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">MyCompare</span></span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function"><span class="keyword">bool</span> <span class="title">operator</span><span class="params">()</span><span class="params">(<span class="keyword">int</span> a, <span class="keyword">int</span> b)</span></span>&#123;</span><br><span class="line">         <span class="keyword">return</span> a &gt; b;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="built_in">string</span> phonenum;</span><br><span class="line">    <span class="built_in">cin</span> &gt;&gt; phonenum;</span><br><span class="line">    <span class="built_in">set</span>&lt;<span class="keyword">int</span>,MyCompare&gt;s;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; <span class="number">11</span>; i++)</span><br><span class="line">        s.insert(phonenum[i] - <span class="string">&#x27;0&#x27;</span>);</span><br><span class="line">        </span><br><span class="line">    <span class="built_in">cout</span> &lt;&lt; <span class="string">&quot;int[] arr = new int[]&#123;&quot;</span>;</span><br><span class="line">    <span class="keyword">for</span>(<span class="built_in">set</span>&lt;<span class="keyword">int</span>, MyCompare&gt;::iterator it = s.begin(); it != s.end(); it++)</span><br><span class="line">    &#123;</span><br><span class="line">    	<span class="built_in">cout</span> &lt;&lt; *it;</span><br><span class="line">    	<span class="keyword">if</span>(++it != s.end())</span><br><span class="line">    	    <span class="built_in">cout</span> &lt;&lt; <span class="string">&quot;,&quot;</span>;</span><br><span class="line">    	it--;</span><br><span class="line">	&#125;</span><br><span class="line">    <span class="built_in">cout</span> &lt;&lt; <span class="string">&quot;&#125;;&quot;</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">    </span><br><span class="line">    <span class="built_in">cout</span> &lt;&lt; <span class="string">&quot;int[] index = new int[]&#123;&quot;</span>;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; <span class="number">11</span>; i++)</span><br><span class="line">    &#123;</span><br><span class="line">    	<span class="keyword">int</span> j = <span class="number">0</span>;</span><br><span class="line">    	<span class="keyword">for</span>(<span class="built_in">set</span>&lt;<span class="keyword">int</span>, MyCompare&gt;::iterator it = s.begin(); it != s.end(); it++)</span><br><span class="line">    	&#123;</span><br><span class="line">    		<span class="keyword">if</span>((phonenum[i] - <span class="string">&#x27;0&#x27;</span>) == *it)</span><br><span class="line">    		&#123;</span><br><span class="line">    			<span class="built_in">cout</span> &lt;&lt; j;</span><br><span class="line">    			<span class="keyword">if</span>(i+<span class="number">1</span> != <span class="number">11</span>)</span><br><span class="line">    			    <span class="built_in">cout</span> &lt;&lt; <span class="string">&quot;,&quot;</span>;</span><br><span class="line">    			<span class="keyword">break</span>;</span><br><span class="line">			&#125;</span><br><span class="line">			j++;</span><br><span class="line">		&#125;</span><br><span class="line">    	</span><br><span class="line">	&#125;</span><br><span class="line">    </span><br><span class="line">    <span class="built_in">cout</span> &lt;&lt; <span class="string">&quot;&#125;;&quot;</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h1 id="L1-032-Left-pad-20-分"><a href="#L1-032-Left-pad-20-分" class="headerlink" title="L1-032 Left-pad (20 分)"></a>L1-032 Left-pad (20 分)</h1><p>根据新浪微博上的消息，有一位开发者不满NPM（Node Package Manager）的做法，收回了自己的开源代码，其中包括一个叫left-pad的模块，就是这个模块把javascript里面的React/Babel干瘫痪了。这是个什么样的模块？就是在字符串前填充一些东西到一定的长度。例如用<code>*</code>去填充字符串<code>GPLT</code>，使之长度为10，调用left-pad的结果就应该是<code>******GPLT</code>。Node社区曾经对left-pad紧急发布了一个替代，被严重吐槽。下面就请你来实现一下这个模块。</p>
<h2 id="输入格式：-2"><a href="#输入格式：-2" class="headerlink" title="输入格式："></a>输入格式：</h2><p>输入在第一行给出一个正整数<code>N</code>（≤104）和一个字符，分别是填充结果字符串的长度和用于填充的字符，中间以1个空格分开。第二行给出原始的非空字符串，以回车结束。</p>
<h2 id="输出格式：-2"><a href="#输出格式：-2" class="headerlink" title="输出格式："></a>输出格式：</h2><p>在一行中输出结果字符串。</p>
<h2 id="输入样例1："><a href="#输入样例1：" class="headerlink" title="输入样例1："></a>输入样例1：</h2><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">15 _</span><br><span class="line">I love GPLT</span><br></pre></td></tr></table></figure>

<h2 id="输出样例1："><a href="#输出样例1：" class="headerlink" title="输出样例1："></a>输出样例1：</h2><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">____I love GPLT</span><br></pre></td></tr></table></figure>

<h2 id="输入样例2："><a href="#输入样例2：" class="headerlink" title="输入样例2："></a>输入样例2：</h2><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">4 *</span><br><span class="line">this is a sample for cut</span><br></pre></td></tr></table></figure>

<h2 id="输出样例2："><a href="#输出样例2：" class="headerlink" title="输出样例2："></a>输出样例2：</h2><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">cut</span><br></pre></td></tr></table></figure>

<h2 id="解法：-2"><a href="#解法：-2" class="headerlink" title="解法："></a>解法：</h2><figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;string&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> N;</span><br><span class="line">    <span class="built_in">string</span> str, ch;</span><br><span class="line">    <span class="built_in">cin</span> &gt;&gt; N &gt;&gt; ch;<span class="comment">//字符以string类型读入便于之后的拼接</span></span><br><span class="line">    <span class="built_in">cin</span>.get(); <span class="comment">//读取行末的换行符</span></span><br><span class="line">    getline(<span class="built_in">cin</span>, str);</span><br><span class="line">    <span class="keyword">int</span> len = str.size();</span><br><span class="line">    <span class="keyword">if</span>(len &gt;= N) <span class="comment">//若字符串长度大于规定长度</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="built_in">string</span> substr = str.substr(len-N, N); <span class="comment">//则进行缩减，保留末尾的N个字符串</span></span><br><span class="line">        <span class="built_in">cout</span> &lt;&lt; substr &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">else</span>&#123; <span class="comment">//若字符串长度小于规定长度</span></span><br><span class="line">        <span class="keyword">int</span> i = len;</span><br><span class="line">        <span class="keyword">while</span>(i &lt; N)</span><br><span class="line">        &#123;</span><br><span class="line">            str = ch + str;<span class="comment">//采用拼接的方式扩充字符串</span></span><br><span class="line">            i++;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="built_in">cout</span> &lt;&lt; str &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>



<h1 id="L1-039-古风排版-20-分"><a href="#L1-039-古风排版-20-分" class="headerlink" title="L1-039 古风排版 (20 分)"></a>L1-039 古风排版 (20 分)</h1><p>中国的古人写文字，是从右向左竖向排版的。本题就请你编写程序，把一段文字按古风排版。</p>
<h2 id="输入格式：-3"><a href="#输入格式：-3" class="headerlink" title="输入格式："></a>输入格式：</h2><p>输入在第一行给出一个正整数<em>N</em>（&lt;100），是每一列的字符数。第二行给出一个长度不超过1000的非空字符串，以回车结束。</p>
<h2 id="输出格式：-3"><a href="#输出格式：-3" class="headerlink" title="输出格式："></a>输出格式：</h2><p>按古风格式排版给定的字符串，每列<em>N</em>个字符（除了最后一列可能不足<em>N</em>个）。</p>
<h2 id="输入样例：-2"><a href="#输入样例：-2" class="headerlink" title="输入样例："></a>输入样例：</h2><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">4</span><br><span class="line">This is a test case</span><br></pre></td></tr></table></figure>

<h2 id="输出样例：-2"><a href="#输出样例：-2" class="headerlink" title="输出样例："></a>输出样例：</h2><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">asa T</span><br><span class="line">st ih</span><br><span class="line">e tsi</span><br><span class="line"> ce s</span><br></pre></td></tr></table></figure>

<h2 id="解法：-3"><a href="#解法：-3" class="headerlink" title="解法："></a>解法：</h2><figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;string&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> N;</span><br><span class="line">    <span class="built_in">cin</span> &gt;&gt; N;</span><br><span class="line">    <span class="built_in">cin</span>.get();</span><br><span class="line">    <span class="built_in">string</span> str;</span><br><span class="line">    getline(<span class="built_in">cin</span>, str);</span><br><span class="line">    <span class="keyword">while</span>(str.size() % N != <span class="number">0</span>)</span><br><span class="line">        str += <span class="string">&quot; &quot;</span>;   <span class="comment">//使str内的字符数是N的倍数</span></span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; N; i++)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">int</span> j = str.size() / N<span class="number">-1</span>;</span><br><span class="line">        <span class="keyword">while</span>(j &gt;= <span class="number">0</span>)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="built_in">cout</span> &lt;&lt; str[i+j*N]; <span class="comment">//根据每行的数字特征得出i+j*N</span></span><br><span class="line">            j--;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="built_in">cout</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h1 id="L1-056-猜数字-20-分"><a href="#L1-056-猜数字-20-分" class="headerlink" title="L1-056 猜数字 (20 分)"></a>L1-056 猜数字 (20 分)</h1><p>一群人坐在一起，每人猜一个 100 以内的数，谁的数字最接近大家平均数的一半就赢。本题就要求你找出其中的赢家。</p>
<h2 id="输入格式：-4"><a href="#输入格式：-4" class="headerlink" title="输入格式："></a>输入格式：</h2><p>输入在第一行给出一个正整数N（≤104）。随后 N 行，每行给出一个玩家的名字（由不超过8个英文字母组成的字符串）和其猜的正整数（≤ 100）。</p>
<h2 id="输出格式：-4"><a href="#输出格式：-4" class="headerlink" title="输出格式："></a>输出格式：</h2><p>在一行中顺序输出：大家平均数的一半（只输出整数部分）、赢家的名字，其间以空格分隔。题目保证赢家是唯一的。</p>
<h2 id="输入样例：-3"><a href="#输入样例：-3" class="headerlink" title="输入样例："></a>输入样例：</h2><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">7</span><br><span class="line">Bob 35</span><br><span class="line">Amy 28</span><br><span class="line">James 98</span><br><span class="line">Alice 11</span><br><span class="line">Jack 45</span><br><span class="line">Smith 33</span><br><span class="line">Chris 62</span><br></pre></td></tr></table></figure>

<h2 id="输出样例：-3"><a href="#输出样例：-3" class="headerlink" title="输出样例："></a>输出样例：</h2><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">22 Amy</span><br></pre></td></tr></table></figure>

<h2 id="解法：-4"><a href="#解法：-4" class="headerlink" title="解法："></a>解法：</h2><figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;vector&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;string&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cmath&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> N;</span><br><span class="line">    <span class="built_in">cin</span> &gt;&gt; N;</span><br><span class="line">    <span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt; vi; <span class="comment">//存储int类型的向量，用于存储猜的数</span></span><br><span class="line">    <span class="built_in">vector</span>&lt;<span class="built_in">string</span>&gt; vs; <span class="comment">//存储string类型的向量，用于存储名字</span></span><br><span class="line">    <span class="comment">//将N个名字及数字读入并存储</span></span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; N; i++)</span><br><span class="line">    &#123;</span><br><span class="line">    	<span class="built_in">string</span> name;</span><br><span class="line">        <span class="built_in">cin</span> &gt;&gt; name;</span><br><span class="line">        vs.push_back(name);</span><br><span class="line">        <span class="keyword">int</span> num;</span><br><span class="line">        <span class="built_in">cin</span> &gt;&gt; num;</span><br><span class="line">        vi.push_back(num);</span><br><span class="line">	&#125;</span><br><span class="line">    <span class="comment">//计算平均值 </span></span><br><span class="line">    <span class="keyword">int</span> aver = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; vi.size(); i++)</span><br><span class="line">        aver += vi[i];</span><br><span class="line">    aver /= N;</span><br><span class="line">    aver /= <span class="number">2</span>;</span><br><span class="line">    <span class="keyword">int</span> j = <span class="number">0</span>; <span class="comment">//假设下标为0时最接近平均数</span></span><br><span class="line">    <span class="keyword">int</span> min = <span class="built_in">abs</span>(vi[<span class="number">0</span>] - aver);</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">1</span>; i &lt; vi.size(); i++) <span class="comment">//遍历，找到差值最小的数</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">int</span> temp = <span class="built_in">abs</span>(vi[i] - aver);</span><br><span class="line">        <span class="keyword">if</span>(temp &lt;= min)  </span><br><span class="line">        &#123;</span><br><span class="line">            j = i;  <span class="comment">//更新最小值的下标</span></span><br><span class="line">            min = temp; <span class="comment">//更新最小值</span></span><br><span class="line">		&#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">cout</span> &lt;&lt; aver &lt;&lt; <span class="string">&quot; &quot;</span> &lt;&lt; vs[j] &lt;&lt; <span class="built_in">endl</span>; <span class="comment">//输出结果 </span></span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>



<h1 id="L1-059-敲笨钟-20-分"><a href="#L1-059-敲笨钟-20-分" class="headerlink" title="L1-059 敲笨钟 (20 分)"></a>L1-059 敲笨钟 (20 分)</h1><p>微博上有个自称“大笨钟V”的家伙，每天敲钟催促码农们爱惜身体早点睡觉。为了增加敲钟的趣味性，还会糟改几句古诗词。其糟改的方法为：去网上搜寻压“ong”韵的古诗词，把句尾的三个字换成“敲笨钟”。例如唐代诗人李贺有名句曰：“寻章摘句老雕虫，晓月当帘挂玉弓”，其中“虫”（chong）和“弓”（gong）都压了“ong”韵。于是这句诗就被糟改为“寻章摘句老雕虫，晓月当帘敲笨钟”。</p>
<p>现在给你一大堆古诗词句，要求你写个程序自动将压“ong”韵的句子糟改成“敲笨钟”。</p>
<h2 id="输入格式：-5"><a href="#输入格式：-5" class="headerlink" title="输入格式："></a>输入格式：</h2><p>输入首先在第一行给出一个不超过 20 的正整数 N。随后 N 行，每行用汉语拼音给出一句古诗词，分上下两半句，用逗号 <code>,</code> 分隔，句号 <code>.</code> 结尾。相邻两字的拼音之间用一个空格分隔。题目保证每个字的拼音不超过 6 个字符，每行字符的总长度不超过 100，并且下半句诗至少有 3 个字。</p>
<h2 id="输出格式：-5"><a href="#输出格式：-5" class="headerlink" title="输出格式："></a>输出格式：</h2><p>对每一行诗句，判断其是否压“ong”韵。即上下两句末尾的字都是“ong”结尾。如果是压此韵的，就按题面方法糟改之后输出，输出格式同输入；否则输出 <code>Skipped</code>，即跳过此句。</p>
<h2 id="输入样例：-4"><a href="#输入样例：-4" class="headerlink" title="输入样例："></a>输入样例：</h2><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">5</span><br><span class="line">xun zhang zhai ju lao diao chong, xiao yue dang lian gua yu gong.</span><br><span class="line">tian sheng wo cai bi you yong, qian jin san jin huan fu lai.</span><br><span class="line">xue zhui rou zhi leng wei rong, an xiao chen jing shu wei long.</span><br><span class="line">zuo ye xing chen zuo ye feng, hua lou xi pan gui tang dong.</span><br><span class="line">ren xian gui hua luo, ye jing chun shan kong.</span><br></pre></td></tr></table></figure>

<h2 id="输出样例：-4"><a href="#输出样例：-4" class="headerlink" title="输出样例："></a>输出样例：</h2><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">xun zhang zhai ju lao diao chong, xiao yue dang lian qiao ben zhong.</span><br><span class="line">Skipped</span><br><span class="line">xue zhui rou zhi leng wei rong, an xiao chen jing qiao ben zhong.</span><br><span class="line">Skipped</span><br><span class="line">Skipped</span><br></pre></td></tr></table></figure>

<h2 id="解法一："><a href="#解法一：" class="headerlink" title="解法一："></a>解法一：</h2><figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;string&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> N, len, pos;</span><br><span class="line">    <span class="built_in">cin</span> &gt;&gt; N;</span><br><span class="line">    <span class="built_in">cin</span>.get();<span class="comment">//读取行末的空格，避免后续的输入错误</span></span><br><span class="line">    <span class="keyword">while</span>(N--&gt;<span class="number">0</span>)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="built_in">string</span> str;</span><br><span class="line">        getline(<span class="built_in">cin</span>, str);·</span><br><span class="line">        len = str.size();</span><br><span class="line">        pos = str.find(<span class="string">&quot;,&quot;</span>);<span class="comment">//保留逗号的位置，以便查找到前半句的ong</span></span><br><span class="line">        <span class="keyword">if</span>(pos &gt;= <span class="number">3</span> &amp;&amp; str.substr(pos<span class="number">-3</span>, <span class="number">3</span>) == <span class="string">&quot;ong&quot;</span> &amp;&amp; str.substr(len<span class="number">-4</span>, <span class="number">3</span>) == <span class="string">&quot;ong&quot;</span>)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="built_in">string</span> substr = str;</span><br><span class="line">            <span class="keyword">int</span> pos2;<span class="comment">//确定倒数第三个空格的位置</span></span><br><span class="line">            <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; <span class="number">3</span>; i++)</span><br><span class="line">            &#123;</span><br><span class="line">    	        pos2 = substr.rfind(<span class="string">&quot; &quot;</span>);</span><br><span class="line">    	        substr = str.substr(<span class="number">0</span>, pos2);</span><br><span class="line">	        &#125;  <span class="comment">//分开输出</span></span><br><span class="line">            <span class="built_in">cout</span> &lt;&lt; str.substr(<span class="number">0</span>, pos2+<span class="number">1</span>) &lt;&lt; <span class="string">&quot;qiao ben zhong.&quot;</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">else</span></span><br><span class="line">            <span class="built_in">cout</span> &lt;&lt; <span class="string">&quot;Skipped&quot;</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="解法二："><a href="#解法二：" class="headerlink" title="解法二："></a>解法二：</h2><figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;string&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> N;</span><br><span class="line">    <span class="built_in">cin</span> &gt;&gt; N;</span><br><span class="line">    <span class="built_in">cin</span>.get();<span class="comment">//读取行末的空格，避免后续的输入错误</span></span><br><span class="line">    <span class="keyword">while</span>(N--&gt;<span class="number">0</span>)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="built_in">string</span> str;</span><br><span class="line">        getline(<span class="built_in">cin</span>, str);</span><br><span class="line">        <span class="keyword">if</span>(str.find(<span class="string">&quot;ong,&quot;</span>) != str.npos &amp;&amp; str.rfind(<span class="string">&quot;ong.&quot;</span>) != str.npos)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="built_in">string</span> substr = str;</span><br><span class="line">            <span class="keyword">int</span> pos;<span class="comment">//确定倒数第三个空格的位置</span></span><br><span class="line">            <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; <span class="number">3</span>; i++)</span><br><span class="line">            &#123;</span><br><span class="line">    	        pos = substr.rfind(<span class="string">&quot; &quot;</span>);</span><br><span class="line">    	        substr = str.substr(<span class="number">0</span>, pos);</span><br><span class="line">	        &#125;</span><br><span class="line">            <span class="built_in">cout</span> &lt;&lt; str.substr(<span class="number">0</span>, pos+<span class="number">1</span>) &lt;&lt; <span class="string">&quot;qiao ben zhong.&quot;</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">else</span></span><br><span class="line">            <span class="built_in">cout</span> &lt;&lt; <span class="string">&quot;Skipped&quot;</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h1 id="L1-064-估值一亿的AI核心代码-20-分"><a href="#L1-064-估值一亿的AI核心代码-20-分" class="headerlink" title="L1-064 估值一亿的AI核心代码 (20 分)"></a><strong>L1-064 估值一亿的AI核心代码 (20 分)</strong></h1><p>以上图片来自新浪微博。</p>
<p>本题要求你实现一个稍微更值钱一点的 AI 英文问答程序，规则是：</p>
<ul>
<li>无论用户说什么，首先把对方说的话在一行中原样打印出来；</li>
<li>消除原文中多余空格：把相邻单词间的多个空格换成 1 个空格，把行首尾的空格全部删掉，把标点符号前面的空格删掉；</li>
<li>把原文中所有大写英文字母变成小写，除了 <code>I</code>；</li>
<li>把原文中所有独立的 <code>can you</code>、<code>could you</code> 对应地换成 <code>I can</code>、<code>I could</code>—— 这里“独立”是指被空格或标点符号分隔开的单词；</li>
<li>把原文中所有独立的 <code>I</code> 和 <code>me</code> 换成 <code>you</code>；</li>
<li>把原文中所有的问号 <code>?</code> 换成惊叹号 <code>!</code>；</li>
<li>在一行中输出替换后的句子作为 AI 的回答。</li>
</ul>
<h2 id="输入格式：-6"><a href="#输入格式：-6" class="headerlink" title="输入格式："></a>输入格式：</h2><p>输入首先在第一行给出不超过 10 的正整数 N，随后 N 行，每行给出一句不超过 1000 个字符的、以回车结尾的用户的对话，对话为非空字符串，仅包括字母、数字、空格、可见的半角标点符号。</p>
<h2 id="输出格式：-6"><a href="#输出格式：-6" class="headerlink" title="输出格式："></a>输出格式：</h2><p>按题面要求输出，每个 AI 的回答前要加上 <code>AI:</code> 和一个空格。</p>
<h2 id="输入样例：-5"><a href="#输入样例：-5" class="headerlink" title="输入样例："></a>输入样例：</h2><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">6</span><br><span class="line">Hello ?</span><br><span class="line"> Good to chat   with you</span><br><span class="line">can   you speak Chinese?</span><br><span class="line">Really?</span><br><span class="line">Could you show me 5</span><br><span class="line">What Is this prime? I,don &#39;t know</span><br></pre></td></tr></table></figure>

<h2 id="输出样例：-5"><a href="#输出样例：-5" class="headerlink" title="输出样例："></a>输出样例：</h2><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">Hello ?</span><br><span class="line">AI: hello!</span><br><span class="line"> Good to chat   with you</span><br><span class="line">AI: good to chat with you</span><br><span class="line">can   you speak Chinese?</span><br><span class="line">AI: I can speak chinese!</span><br><span class="line">Really?</span><br><span class="line">AI: really!</span><br><span class="line">Could you show me 5</span><br><span class="line">AI: I could show you 5</span><br><span class="line">What Is this prime? I,don &#39;t know</span><br><span class="line">AI: what Is this prime! you,don&#39;t know</span><br></pre></td></tr></table></figure>

<h2 id="解法（STL）："><a href="#解法（STL）：" class="headerlink" title="解法（STL）："></a>解法（STL）：</h2><figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;string&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> N;</span><br><span class="line">    <span class="built_in">string</span> str;</span><br><span class="line">    <span class="built_in">cin</span> &gt;&gt; N;</span><br><span class="line">    <span class="built_in">cin</span>.get();</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">while</span>(N-- &gt; <span class="number">0</span>)</span><br><span class="line">    &#123;</span><br><span class="line">        getline(<span class="built_in">cin</span>, str);</span><br><span class="line">        <span class="built_in">cout</span> &lt;&lt; str &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">        str = <span class="string">&#x27; &#x27;</span> + str + <span class="string">&#x27; &#x27;</span>;</span><br><span class="line">        </span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">1</span>; i &lt; str.size(); i++)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">if</span>(str[i<span class="number">-1</span>] == <span class="string">&#x27; &#x27;</span> &amp;&amp; !<span class="built_in">isalnum</span>(str[i])) <span class="comment">//前一个字符是空格，后一个是空格或者标点的情况</span></span><br><span class="line">            &#123;                                        <span class="comment">//两种情况均符合删除要求</span></span><br><span class="line">                str.erase(i<span class="number">-1</span>, <span class="number">1</span>);</span><br><span class="line">                i--; <span class="comment">//再次检查原位</span></span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">if</span>(str[i] != <span class="string">&#x27;I&#x27;</span> &amp;&amp; <span class="built_in">isupper</span>(str[i])) <span class="comment">//除I以外全部转换为小写</span></span><br><span class="line">                str[i] = <span class="built_in">tolower</span>(str[i]);</span><br><span class="line">            <span class="keyword">if</span>(str[i] == <span class="string">&#x27;?&#x27;</span>)  str.replace(i, <span class="number">1</span>, <span class="string">&quot;!&quot;</span>); </span><br><span class="line">        &#125;</span><br><span class="line">        </span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; str.size(); i++)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">if</span>(str.substr(i, <span class="number">7</span>) == <span class="string">&quot;can you&quot;</span> &amp;&amp; !<span class="built_in">isalnum</span>(str[i<span class="number">-1</span>]) &amp;&amp; !<span class="built_in">isalnum</span>(str[i+<span class="number">7</span>]))</span><br><span class="line">                str.replace(i, <span class="number">7</span>, <span class="string">&quot;# can&quot;</span>);</span><br><span class="line">            <span class="keyword">if</span>(str.substr(i, <span class="number">9</span>) == <span class="string">&quot;could you&quot;</span> &amp;&amp; !<span class="built_in">isalnum</span>(str[i<span class="number">-1</span>]) &amp;&amp; !<span class="built_in">isalnum</span>(str[i+<span class="number">9</span>]))</span><br><span class="line">                str.replace(i, <span class="number">9</span>, <span class="string">&quot;# could&quot;</span>);</span><br><span class="line">            <span class="keyword">if</span>(str.substr(i, <span class="number">1</span>) == <span class="string">&quot;I&quot;</span> &amp;&amp; !<span class="built_in">isalnum</span>(str[i<span class="number">-1</span>]) &amp;&amp; !<span class="built_in">isalnum</span>(str[i+<span class="number">1</span>]))</span><br><span class="line">                str.replace(i, <span class="number">1</span>, <span class="string">&quot;you&quot;</span>);</span><br><span class="line">            <span class="keyword">if</span>(str.substr(i, <span class="number">2</span>) == <span class="string">&quot;me&quot;</span> &amp;&amp; !<span class="built_in">isalnum</span>(str[i<span class="number">-1</span>]) &amp;&amp; !<span class="built_in">isalnum</span>(str[i+<span class="number">2</span>]))</span><br><span class="line">                str.replace(i, <span class="number">2</span>, <span class="string">&quot;you&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; str.size(); i++)</span><br><span class="line">            <span class="keyword">if</span>(str[i] == <span class="string">&#x27;#&#x27;</span>) str[i] = <span class="string">&#x27;I&#x27;</span>;</span><br><span class="line">        <span class="keyword">while</span>(str[<span class="number">0</span>] == <span class="string">&#x27; &#x27;</span>) str.erase(<span class="number">0</span>,<span class="number">1</span>);<span class="comment">//删除头尾多余的空格</span></span><br><span class="line">        <span class="keyword">while</span>(str[str.size() - <span class="number">1</span>] == <span class="string">&#x27; &#x27;</span>) str.erase(str.size()<span class="number">-1</span>,<span class="number">1</span>);</span><br><span class="line">        <span class="built_in">cout</span> &lt;&lt; <span class="string">&quot;AI: &quot;</span> &lt;&lt; str &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>



<h1 id="L1-071-前世档案-20-分"><a href="#L1-071-前世档案-20-分" class="headerlink" title="L1-071 前世档案 (20 分)"></a><strong>L1-071 前世档案 (20 分)</strong></h1><h2 id="输入格式：-7"><a href="#输入格式：-7" class="headerlink" title="输入格式："></a>输入格式：</h2><p>输入第一行给出两个正整数：<em>N</em>（≤30）为玩家做一次测试要回答的问题数量；<em>M</em>（≤100）为玩家人数。</p>
<p>随后 <em>M</em> 行，每行顺次给出玩家的 <em>N</em> 个回答。这里用 <code>y</code> 代表“是”，用 <code>n</code> 代表“否”。</p>
<h2 id="输出格式：-7"><a href="#输出格式：-7" class="headerlink" title="输出格式："></a>输出格式：</h2><p>对每个玩家，在一行中输出其对应的结论的编号。</p>
<h2 id="输入样例：-6"><a href="#输入样例：-6" class="headerlink" title="输入样例："></a>输入样例：</h2><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">3 4</span><br><span class="line">yny</span><br><span class="line">nyy</span><br><span class="line">nyn</span><br><span class="line">yyn</span><br></pre></td></tr></table></figure>

<h2 id="输出样例：-6"><a href="#输出样例：-6" class="headerlink" title="输出样例："></a>输出样例：</h2><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">3</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">2</span><br></pre></td></tr></table></figure>

<h2 id="解法：-5"><a href="#解法：-5" class="headerlink" title="解法："></a>解法：</h2><figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cmath&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> N, M;</span><br><span class="line">    <span class="built_in">scanf</span>(<span class="string">&quot;%d %d&quot;</span>, &amp;N, &amp;M);</span><br><span class="line">    <span class="built_in">cin</span>.get(); <span class="comment">//将换行符读取掉，避免影响后续输入</span></span><br><span class="line">    <span class="keyword">while</span>(M-- &gt; <span class="number">0</span>)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">int</span> score = <span class="number">1</span>;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; N; i++)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">char</span> ch = <span class="built_in">cin</span>.get();</span><br><span class="line">            <span class="keyword">if</span>(ch == <span class="string">&#x27;n&#x27;</span>)</span><br><span class="line">                score = score + <span class="built_in">pow</span>(<span class="number">2</span>, N-i<span class="number">-1</span>); <span class="comment">//将yn看成二进制数</span></span><br><span class="line">        &#125;</span><br><span class="line">        <span class="built_in">cout</span> &lt;&lt; score &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">        <span class="built_in">cin</span>.get(); <span class="comment">//将换行符读取掉，避免影响后续输入</span></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h1 id="L2-010-排座位-25-分"><a href="#L2-010-排座位-25-分" class="headerlink" title="L2-010 排座位 (25 分)"></a>L2-010 排座位 (25 分)</h1><p>布置宴席最微妙的事情，就是给前来参宴的各位宾客安排座位。无论如何，总不能把两个死对头排到同一张宴会桌旁！这个艰巨任务现在就交给你，对任何一对客人，请编写程序告诉主人他们是否能被安排同席。</p>
<h2 id="输入格式：-8"><a href="#输入格式：-8" class="headerlink" title="输入格式："></a>输入格式：</h2><p>输入第一行给出3个正整数：<code>N</code>（≤100），即前来参宴的宾客总人数，则这些人从1到<code>N</code>编号；<code>M</code>为已知两两宾客之间的关系数；<code>K</code>为查询的条数。随后<code>M</code>行，每行给出一对宾客之间的关系，格式为：<code>宾客1 宾客2 关系</code>，其中<code>关系</code>为1表示是朋友，-1表示是死对头。注意两个人不可能既是朋友又是敌人。最后<code>K</code>行，每行给出一对需要查询的宾客编号。</p>
<p>这里假设朋友的朋友也是朋友。但敌人的敌人并不一定就是朋友，朋友的敌人也不一定是敌人。只有单纯直接的敌对关系才是绝对不能同席的。</p>
<h2 id="输出格式：-8"><a href="#输出格式：-8" class="headerlink" title="输出格式："></a>输出格式：</h2><p>对每个查询输出一行结果：如果两位宾客之间是朋友，且没有敌对关系，则输出<code>No problem</code>；如果他们之间并不是朋友，但也不敌对，则输出<code>OK</code>；如果他们之间有敌对，然而也有共同的朋友，则输出<code>OK but...</code>；如果他们之间只有敌对关系，则输出<code>No way</code>。</p>
<h2 id="输入样例：-7"><a href="#输入样例：-7" class="headerlink" title="输入样例："></a>输入样例：</h2><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">7 8 4</span><br><span class="line">5 6 1</span><br><span class="line">2 7 -1</span><br><span class="line">1 3 1</span><br><span class="line">3 4 1</span><br><span class="line">6 7 -1</span><br><span class="line">1 2 1</span><br><span class="line">1 4 1</span><br><span class="line">2 3 -1</span><br><span class="line">3 4</span><br><span class="line">5 7</span><br><span class="line">2 3</span><br><span class="line">7 2</span><br></pre></td></tr></table></figure>

<h2 id="输出样例：-7"><a href="#输出样例：-7" class="headerlink" title="输出样例："></a>输出样例：</h2><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">No problem</span><br><span class="line">OK</span><br><span class="line">OK but...</span><br><span class="line">No way</span><br></pre></td></tr></table></figure>

<h2 id="解法：-6"><a href="#解法：-6" class="headerlink" title="解法："></a>解法：</h2><figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstdio&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">int</span> N, M, K, b1, b2, r;</span><br><span class="line"><span class="keyword">int</span> father[<span class="number">105</span>], enemy[<span class="number">105</span>][<span class="number">105</span>];</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">get</span><span class="params">(<span class="keyword">int</span> x)</span><span class="comment">//查询</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(father[x] == x)</span><br><span class="line">        <span class="keyword">return</span> x;</span><br><span class="line">    <span class="keyword">return</span> father[x] = get(father[x]);</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">merge</span><span class="params">(<span class="keyword">int</span> x, <span class="keyword">int</span> y)</span><span class="comment">//合并</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    x = get(x);</span><br><span class="line">    y = get(y);</span><br><span class="line">    <span class="keyword">if</span>(x != y)</span><br><span class="line">    &#123;</span><br><span class="line">        father[y] = x;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="built_in">scanf</span>(<span class="string">&quot;%d %d %d&quot;</span>, &amp;N, &amp;M, &amp;K);</span><br><span class="line">    <span class="comment">//初始化</span></span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= N; i++)</span><br><span class="line">        father[i] = i;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; M; i++)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="built_in">scanf</span>(<span class="string">&quot;%d %d %d&quot;</span>, &amp;b1, &amp;b2, &amp;r);</span><br><span class="line">        <span class="keyword">if</span>(r == <span class="number">1</span>)</span><br><span class="line">            merge(b1, b2);</span><br><span class="line">        <span class="keyword">else</span> <span class="keyword">if</span> (r == <span class="number">-1</span>)</span><br><span class="line">            enemy[b1][b2] = enemy[b2][b1] = <span class="number">1</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">while</span>(K--)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="built_in">scanf</span>(<span class="string">&quot;%d %d&quot;</span>, &amp;b1, &amp;b2);</span><br><span class="line">        <span class="keyword">if</span>(get(b1) == get(b2) &amp;&amp; enemy[b1][b2] != <span class="number">1</span>)</span><br><span class="line">            <span class="built_in">printf</span>(<span class="string">&quot;No problem\n&quot;</span>);</span><br><span class="line">        <span class="keyword">else</span> <span class="keyword">if</span>(get(b1) != get(b2) &amp;&amp; enemy[b1][b2] != <span class="number">1</span>)</span><br><span class="line">            <span class="built_in">printf</span>(<span class="string">&quot;OK\n&quot;</span>);</span><br><span class="line">        <span class="keyword">else</span> <span class="keyword">if</span>(get(b1) == get(b2) &amp;&amp; enemy[b1][b2] == <span class="number">1</span>)</span><br><span class="line">            <span class="built_in">printf</span>(<span class="string">&quot;OK but...\n&quot;</span>);</span><br><span class="line">        <span class="keyword">else</span></span><br><span class="line">            <span class="built_in">printf</span>(<span class="string">&quot;No way\n&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>



<h1 id="L2-019-悄悄关注-25-分"><a href="#L2-019-悄悄关注-25-分" class="headerlink" title="L2-019 悄悄关注 (25 分)"></a>L2-019 悄悄关注 (25 分)</h1><p>新浪微博上有个“悄悄关注”，一个用户悄悄关注的人，不出现在这个用户的关注列表上，但系统会推送其悄悄关注的人发表的微博给该用户。现在我们来做一回网络侦探，根据某人的关注列表和其对其他用户的点赞情况，扒出有可能被其悄悄关注的人。</p>
<h2 id="输入格式：-9"><a href="#输入格式：-9" class="headerlink" title="输入格式："></a>输入格式：</h2><p>输入首先在第一行给出某用户的关注列表，格式如下：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">人数N 用户1 用户2 …… 用户N</span><br></pre></td></tr></table></figure>

<p>其中<code>N</code>是不超过5000的正整数，每个<code>用户i</code>（<code>i</code>=1, …, <code>N</code>）是被其关注的用户的ID，是长度为4位的由数字和英文字母组成的字符串，各项间以空格分隔。</p>
<p>之后给出该用户点赞的信息：首先给出一个不超过10000的正整数<code>M</code>，随后<code>M</code>行，每行给出一个被其点赞的用户ID和对该用户的点赞次数（不超过1000），以空格分隔。注意：用户ID是一个用户的唯一身份标识。题目保证在关注列表中没有重复用户，在点赞信息中也没有重复用户。</p>
<h2 id="输出格式：-9"><a href="#输出格式：-9" class="headerlink" title="输出格式："></a>输出格式：</h2><p>我们认为被该用户点赞次数大于其点赞平均数、且不在其关注列表上的人，很可能是其悄悄关注的人。根据这个假设，请你按用户ID字母序的升序输出可能是其悄悄关注的人，每行1个ID。如果其实并没有这样的人，则输出“Bing Mei You”。</p>
<h2 id="输入样例1：-1"><a href="#输入样例1：-1" class="headerlink" title="输入样例1："></a>输入样例1：</h2><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">10 GAO3 Magi Zha1 Sen1 Quan FaMK LSum Eins FatM LLao</span><br><span class="line">8</span><br><span class="line">Magi 50</span><br><span class="line">Pota 30</span><br><span class="line">LLao 3</span><br><span class="line">Ammy 48</span><br><span class="line">Dave 15</span><br><span class="line">GAO3 31</span><br><span class="line">Zoro 1</span><br><span class="line">Cath 60</span><br></pre></td></tr></table></figure>

<h2 id="输出样例1：-1"><a href="#输出样例1：-1" class="headerlink" title="输出样例1："></a>输出样例1：</h2><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">Ammy</span><br><span class="line">Cath</span><br><span class="line">Pota</span><br></pre></td></tr></table></figure>

<h2 id="输入样例2：-1"><a href="#输入样例2：-1" class="headerlink" title="输入样例2："></a>输入样例2：</h2><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">11 GAO3 Magi Zha1 Sen1 Quan FaMK LSum Eins FatM LLao Pota</span><br><span class="line">7</span><br><span class="line">Magi 50</span><br><span class="line">Pota 30</span><br><span class="line">LLao 48</span><br><span class="line">Ammy 3</span><br><span class="line">Dave 15</span><br><span class="line">GAO3 31</span><br><span class="line">Zoro 29</span><br></pre></td></tr></table></figure>

<h2 id="输出样例2：-1"><a href="#输出样例2：-1" class="headerlink" title="输出样例2："></a>输出样例2：</h2><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">Bing Mei You</span><br></pre></td></tr></table></figure>

<h2 id="解法：-7"><a href="#解法：-7" class="headerlink" title="解法："></a>解法：</h2><figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">USER</span></span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line">    <span class="built_in">string</span> name;</span><br><span class="line">    <span class="keyword">int</span> good;</span><br><span class="line">&#125;user[<span class="number">10005</span>];</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="built_in">set</span>&lt;<span class="built_in">string</span>&gt;s; <span class="comment">//用set存储关注用户，便于后续查找</span></span><br><span class="line">    <span class="built_in">set</span>&lt;<span class="built_in">string</span>&gt; s2; <span class="comment">//用于存储悄悄关注的用户</span></span><br><span class="line">    <span class="built_in">string</span> str;</span><br><span class="line">    <span class="keyword">bool</span> flag = <span class="literal">true</span>;</span><br><span class="line">    <span class="keyword">int</span> N, M, num, avg = <span class="number">0</span>;</span><br><span class="line">    <span class="built_in">cin</span> &gt;&gt; N;</span><br><span class="line">    <span class="keyword">while</span>(N--)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="built_in">cin</span> &gt;&gt; str;</span><br><span class="line">        s.insert(str);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">cin</span> &gt;&gt; M;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; M; i++)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="built_in">cin</span> &gt;&gt; str &gt;&gt; num;</span><br><span class="line">        user[i].name = str;</span><br><span class="line">        user[i].good = num;</span><br><span class="line">        avg += num;</span><br><span class="line">    &#125;</span><br><span class="line">    avg /= M;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; M; i++)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">if</span>(user[i].good &gt; avg &amp;&amp; s.find(user[i].name) == s.end())</span><br><span class="line">        &#123;</span><br><span class="line">            s2.insert(user[i].name);</span><br><span class="line">            flag = <span class="literal">false</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span>(flag)</span><br><span class="line">        <span class="built_in">cout</span> &lt;&lt; <span class="string">&quot;Bing Mei You&quot;</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">    <span class="keyword">else</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">auto</span> it = s2.begin(); it != s2.end(); it++)</span><br><span class="line">            <span class="built_in">cout</span> &lt;&lt; *it &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>



<h1 id="L2-033-简单计算器-25-分"><a href="#L2-033-简单计算器-25-分" class="headerlink" title="L2-033 简单计算器 (25 分)"></a><strong>L2-033 简单计算器 (25 分)</strong></h1><p>本题要求你为初学数据结构的小伙伴设计一款简单的利用堆栈执行的计算器。如上图所示，计算器由两个堆栈组成，一个堆栈 <em>S</em>1 存放数字，另一个堆栈 <em>S</em>2 存放运算符。计算器的最下方有一个等号键，每次按下这个键，计算器就执行以下操作：</p>
<ol>
<li>从 <em>S</em>1 中弹出两个数字，顺序为 <em>n</em>1 和 <em>n</em>2；</li>
<li>从 <em>S</em>2 中弹出一个运算符 op；</li>
<li>执行计算 <em>n</em>2 op <em>n</em>1；</li>
<li>将得到的结果压回 <em>S</em>1。</li>
</ol>
<p>直到两个堆栈都为空时，计算结束，最后的结果将显示在屏幕上。</p>
<h2 id="输入格式：-10"><a href="#输入格式：-10" class="headerlink" title="输入格式："></a>输入格式：</h2><p>输入首先在第一行给出正整数 <em>N</em>（1&lt;<em>N</em>≤103），为 <em>S</em>1 中数字的个数。</p>
<p>第二行给出 <em>N</em> 个绝对值不超过 100 的整数；第三行给出 <em>N</em>−1 个运算符 —— 这里仅考虑 <code>+</code>、<code>-</code>、<code>*</code>、<code>/</code> 这四种运算。一行中的数字和符号都以空格分隔。</p>
<h2 id="输出格式：-10"><a href="#输出格式：-10" class="headerlink" title="输出格式："></a>输出格式：</h2><p>将输入的数字和运算符按给定顺序分别压入堆栈 <em>S</em>1 和 <em>S</em>2，将执行计算的最后结果输出。注意所有的计算都只取结果的整数部分。题目保证计算的中间和最后结果的绝对值都不超过 109。</p>
<p>如果执行除法时出现分母为零的非法操作，则在一行中输出：<code>ERROR: X/0</code>，其中 <code>X</code> 是当时的分子。然后结束程序。</p>
<h2 id="输入样例-1："><a href="#输入样例-1：" class="headerlink" title="输入样例 1："></a>输入样例 1：</h2><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">5</span><br><span class="line">40 5 8 3 2</span><br><span class="line">&#x2F; * - +</span><br></pre></td></tr></table></figure>

<h2 id="输出样例-1："><a href="#输出样例-1：" class="headerlink" title="输出样例 1："></a>输出样例 1：</h2><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">2</span><br></pre></td></tr></table></figure>

<h2 id="输入样例-2："><a href="#输入样例-2：" class="headerlink" title="输入样例 2："></a>输入样例 2：</h2><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">5</span><br><span class="line">2 5 8 4 4</span><br><span class="line">* &#x2F; - +</span><br></pre></td></tr></table></figure>

<h2 id="输出样例-2："><a href="#输出样例-2：" class="headerlink" title="输出样例 2："></a>输出样例 2：</h2><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">ERROR: 5&#x2F;0</span><br></pre></td></tr></table></figure>

<h2 id="解法：-8"><a href="#解法：-8" class="headerlink" title="解法："></a>解法：</h2><figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stack&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;vector&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">char</span> ch;</span><br><span class="line">    <span class="keyword">int</span> N, num, a, b, result;</span><br><span class="line">    <span class="built_in">cin</span> &gt;&gt; N;</span><br><span class="line">    <span class="built_in">stack</span>&lt;<span class="keyword">int</span>&gt; si;</span><br><span class="line">    <span class="built_in">stack</span>&lt;<span class="keyword">char</span>&gt; sc;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; N; i++)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="built_in">cin</span> &gt;&gt; num;</span><br><span class="line">        si.push(num);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; N <span class="number">-1</span>; i++)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="built_in">cin</span> &gt;&gt; ch;</span><br><span class="line">        sc.push(ch);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">while</span>(!sc.empty())</span><br><span class="line">    &#123;</span><br><span class="line">        b = si.top();</span><br><span class="line">        si.pop();</span><br><span class="line">        a = si.top();</span><br><span class="line">        si.pop();</span><br><span class="line">        ch = sc.top();</span><br><span class="line">        sc.pop();</span><br><span class="line">        <span class="keyword">switch</span>(ch)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">case</span> <span class="string">&#x27;+&#x27;</span>: result = a + b; <span class="keyword">break</span>;</span><br><span class="line">            <span class="keyword">case</span> <span class="string">&#x27;-&#x27;</span>: result = a - b; <span class="keyword">break</span>;</span><br><span class="line">            <span class="keyword">case</span> <span class="string">&#x27;*&#x27;</span>: result = a * b; <span class="keyword">break</span>;</span><br><span class="line">            <span class="keyword">case</span> <span class="string">&#x27;/&#x27;</span>: </span><br><span class="line">                &#123;</span><br><span class="line">                    <span class="keyword">if</span>(b == <span class="number">0</span>)</span><br><span class="line">                    &#123;</span><br><span class="line">                        <span class="built_in">printf</span>(<span class="string">&quot;ERROR: %d/0\n&quot;</span>, a);</span><br><span class="line">                        <span class="keyword">goto</span> flag;</span><br><span class="line">                    &#125;</span><br><span class="line">                    <span class="keyword">else</span></span><br><span class="line">                        result = a / b;</span><br><span class="line">                    <span class="keyword">break</span>;</span><br><span class="line">                &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        si.push(result);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">cout</span> &lt;&lt; si.top() &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">    flag:</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h1 id="L2-031-深入虎穴-25-分"><a href="#L2-031-深入虎穴-25-分" class="headerlink" title="L2-031 深入虎穴 (25 分)"></a>L2-031 深入虎穴 (25 分)</h1><p>著名的王牌间谍 007 需要执行一次任务，获取敌方的机密情报。已知情报藏在一个地下迷宫里，迷宫只有一个入口，里面有很多条通路，每条路通向一扇门。每一扇门背后或者是一个房间，或者又有很多条路，同样是每条路通向一扇门…… 他的手里有一张表格，是其他间谍帮他收集到的情报，他们记下了每扇门的编号，以及这扇门背后的每一条通路所到达的门的编号。007 发现不存在两条路通向同一扇门。</p>
<p>内线告诉他，情报就藏在迷宫的最深处。但是这个迷宫太大了，他需要你的帮助 —— 请编程帮他找出距离入口最远的那扇门。</p>
<h2 id="输入格式：-11"><a href="#输入格式：-11" class="headerlink" title="输入格式："></a>输入格式：</h2><p>输入首先在一行中给出正整数 <em>N</em>（&lt;105），是门的数量。最后 <em>N</em> 行，第 <em>i</em> 行（1≤<em>i</em>≤<em>N</em>）按以下格式描述编号为 <em>i</em> 的那扇门背后能通向的门：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">K D[1] D[2] ... D[K]</span><br></pre></td></tr></table></figure>

<p>其中 <code>K</code> 是通道的数量，其后是每扇门的编号。</p>
<h2 id="输出格式：-11"><a href="#输出格式：-11" class="headerlink" title="输出格式："></a>输出格式：</h2><p>在一行中输出距离入口最远的那扇门的编号。题目保证这样的结果是唯一的。</p>
<h2 id="输入样例：-8"><a href="#输入样例：-8" class="headerlink" title="输入样例："></a>输入样例：</h2><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">13</span><br><span class="line">3 2 3 4</span><br><span class="line">2 5 6</span><br><span class="line">1 7</span><br><span class="line">1 8</span><br><span class="line">1 9</span><br><span class="line">0</span><br><span class="line">2 11 10</span><br><span class="line">1 13</span><br><span class="line">0</span><br><span class="line">0</span><br><span class="line">1 12</span><br><span class="line">0</span><br><span class="line">0</span><br></pre></td></tr></table></figure>

<h2 id="输出样例：-8"><a href="#输出样例：-8" class="headerlink" title="输出样例："></a>输出样例：</h2><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">12</span><br></pre></td></tr></table></figure>

<h2 id="solution-2"><a href="#solution-2" class="headerlink" title="solution"></a>solution</h2><figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="comment">//本题主要考察BFS</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">DOOR</span>&#123;</span></span><br><span class="line">    <span class="keyword">int</span> pos, dis;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> N, K, j, temp, longestdis = <span class="number">-1</span>;</span><br><span class="line">    <span class="built_in">cin</span> &gt;&gt; N;</span><br><span class="line">    <span class="keyword">int</span> arr[N+<span class="number">1</span>] = &#123;<span class="number">0</span>&#125;;</span><br><span class="line">    <span class="function"><span class="built_in">vector</span>&lt;<span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt;&gt; <span class="title">v</span><span class="params">(N+<span class="number">1</span>)</span></span>;</span><br><span class="line">    <span class="built_in">queue</span>&lt;DOOR&gt; q;</span><br><span class="line">    <span class="built_in">vector</span>&lt;DOOR&gt; ans;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= N; i++)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="built_in">cin</span> &gt;&gt; K;</span><br><span class="line">        <span class="keyword">while</span>(K--)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="built_in">cin</span> &gt;&gt; temp;</span><br><span class="line">            v[i].push_back(temp);</span><br><span class="line">            arr[temp] = <span class="number">1</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= N; i++)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">if</span>(arr[i] != <span class="number">1</span>)</span><br><span class="line">        &#123;</span><br><span class="line">            j = i;</span><br><span class="line">            <span class="keyword">break</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    q.push(&#123;j, <span class="number">0</span>&#125;);</span><br><span class="line">    <span class="keyword">while</span>(!q.empty())</span><br><span class="line">    &#123;</span><br><span class="line">        DOOR d = q.front();</span><br><span class="line">        <span class="keyword">int</span> pos = d.pos, dis = d.dis;</span><br><span class="line">        <span class="keyword">if</span>(dis &gt; longestdis) longestdis = dis;</span><br><span class="line">        ans.push_back(d);</span><br><span class="line">        q.pop();</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; v[pos].size(); i++)</span><br><span class="line">            q.push(&#123;v[pos][i], dis+<span class="number">1</span>&#125;);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; ans.size(); i++)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">if</span>(ans[i].dis == longestdis)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="built_in">cout</span> &lt;&lt; ans[i].pos &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">            <span class="keyword">break</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    </span><br><span class="line">    </span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>



<h1 id="L3-003-社交集群-30-分"><a href="#L3-003-社交集群-30-分" class="headerlink" title="L3-003 社交集群 (30 分)"></a>L3-003 社交集群 (30 分)</h1><p>当你在社交网络平台注册时，一般总是被要求填写你的个人兴趣爱好，以便找到具有相同兴趣爱好的潜在的朋友。一个“社交集群”是指部分兴趣爱好相同的人的集合。你需要找出所有的社交集群。</p>
<h2 id="输入格式：-12"><a href="#输入格式：-12" class="headerlink" title="输入格式："></a>输入格式：</h2><p>输入在第一行给出一个正整数 N（≤1000），为社交网络平台注册的所有用户的人数。于是这些人从 1 到 N 编号。随后 N 行，每行按以下格式给出一个人的兴趣爱好列表：</p>
<p><em>K**i</em>: <em>h**i</em>[1] <em>h**i</em>[2] … <em>h**i</em>[<em>K**i</em>]</p>
<p>其中<em>K**i</em>(&gt;0)是兴趣爱好的个数，<em>h**i</em>[<em>j</em>]是第<em>j</em>个兴趣爱好的编号，为区间 [1, 1000] 内的整数。</p>
<h2 id="输出格式：-12"><a href="#输出格式：-12" class="headerlink" title="输出格式："></a>输出格式：</h2><p>首先在一行中输出不同的社交集群的个数。随后第二行按非增序输出每个集群中的人数。数字间以一个空格分隔，行末不得有多余空格。</p>
<h2 id="输入样例：-9"><a href="#输入样例：-9" class="headerlink" title="输入样例："></a>输入样例：</h2><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">8</span><br><span class="line">3: 2 7 10</span><br><span class="line">1: 4</span><br><span class="line">2: 5 3</span><br><span class="line">1: 4</span><br><span class="line">1: 3</span><br><span class="line">1: 4</span><br><span class="line">4: 6 8 1 5</span><br><span class="line">1: 4</span><br></pre></td></tr></table></figure>

<h2 id="输出样例：-9"><a href="#输出样例：-9" class="headerlink" title="输出样例："></a>输出样例：</h2><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">3</span><br><span class="line">4 3 1</span><br></pre></td></tr></table></figure>

<h2 id="解法：-9"><a href="#解法：-9" class="headerlink" title="解法："></a>解法：</h2><figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">int</span> father[<span class="number">1005</span>];</span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">NODE</span></span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line">    <span class="keyword">int</span> people;</span><br><span class="line">    <span class="keyword">bool</span> flag = <span class="literal">false</span>;</span><br><span class="line">&#125;ans[<span class="number">1005</span>];</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">get</span><span class="params">(<span class="keyword">int</span> x)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(father[x] == x)</span><br><span class="line">        <span class="keyword">return</span> x;</span><br><span class="line">    <span class="keyword">return</span> father[x] = get(father[x]);</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">merge</span><span class="params">(<span class="keyword">int</span> x, <span class="keyword">int</span> y)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    x = get(x);</span><br><span class="line">    y = get(y);</span><br><span class="line">    <span class="keyword">if</span>(x != y)</span><br><span class="line">        father[y] = x;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">cmp</span><span class="params">(NODE a, NODE b)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">return</span> a.people &gt; b.people;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> N, K, h, h2, cnt = <span class="number">0</span>;</span><br><span class="line">    <span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt;vi;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">1</span>; i &lt; <span class="number">1005</span>; i++)</span><br><span class="line">        father[i] = i;</span><br><span class="line">    <span class="built_in">scanf</span>(<span class="string">&quot;%d&quot;</span>, &amp;N);</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; N; i++)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="built_in">scanf</span>(<span class="string">&quot;%d: %d&quot;</span>, &amp;K, &amp;h);</span><br><span class="line">        vi.push_back(h);</span><br><span class="line">        <span class="keyword">if</span>(K == <span class="number">1</span>)</span><br><span class="line">        &#123;</span><br><span class="line">            merge(h, h);</span><br><span class="line">            <span class="keyword">continue</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> j = <span class="number">1</span>; j &lt; K; j++)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="built_in">scanf</span>(<span class="string">&quot;%d&quot;</span>, &amp;h2);</span><br><span class="line">            merge(h, h2);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">auto</span> it = vi.begin(); it != vi.end(); it++)</span><br><span class="line">    &#123;</span><br><span class="line">        ans[get(*it)].flag = <span class="literal">true</span>;</span><br><span class="line">        ans[get(*it)].people++;</span><br><span class="line">    &#125;</span><br><span class="line">    sort(ans, ans+<span class="number">1005</span>, cmp);</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; <span class="number">1005</span>; i++)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">if</span>(ans[i].flag)</span><br><span class="line">            cnt++;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;%d\n&quot;</span>, cnt);</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; <span class="number">1005</span>; i++)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">if</span>(ans[i].flag &amp;&amp; i == <span class="number">0</span>)</span><br><span class="line">            <span class="built_in">printf</span>(<span class="string">&quot;%d&quot;</span>, ans[i].people);</span><br><span class="line">        <span class="keyword">else</span> <span class="keyword">if</span> (ans[i].flag)</span><br><span class="line">            <span class="built_in">printf</span>(<span class="string">&quot; %d&quot;</span>, ans[i].people);</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    </span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

]]></content>
      <categories>
        <category>天梯赛</category>
      </categories>
      <tags>
        <tag>算法</tag>
        <tag>C++</tag>
      </tags>
  </entry>
</search>
