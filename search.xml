<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title>Dev-C++调试配置</title>
    <url>/2020/11/12/dev%E8%B0%83%E8%AF%95%E9%85%8D%E7%BD%AE/</url>
    <content><![CDATA[<p>我最开始接触C语言时用的编译器是Dev-C++，但调试功能一直没法使用，我也因为这个原因没有养成调试程序的习惯。今天上机房上实验课时，老师帮我解决了这个困扰我很久的问题。现将方法记录如下，希望大家在学习程序设计时可以试着去debug，同时也方便自己日后查找。</p>
<ol>
<li>复制<strong>zlib1.dll</strong>文件到C:\Windows\System32目录下</li>
<li>设置Dev-&gt;工具-&gt;编译选项-&gt;代码生成优化-&gt;连接器-&gt;产生调试信息YES</li>
<li>设置Dev-&gt;工具-&gt;环境选项-&gt;选中查看鼠标指向的变量</li>
</ol>
<p><strong>zlib1.dll</strong>文件的链接如下：</p>
<p>链接：<a href="https://pan.baidu.com/s/1dDKlk5h-BUzpZQzqswrMlg">https://pan.baidu.com/s/1dDKlk5h-BUzpZQzqswrMlg</a><br>提取码：iyaf<br>复制这段内容后打开百度网盘手机App，操作更方便哦</p>
]]></content>
      <categories>
        <category>C</category>
      </categories>
      <tags>
        <tag>debug</tag>
        <tag>Dev-C++</tag>
      </tags>
  </entry>
  <entry>
    <title>Python笔记</title>
    <url>/2020/10/28/Python%E7%AC%94%E8%AE%B0/</url>
    <content><![CDATA[<h1 id="Python基础语法"><a href="#Python基础语法" class="headerlink" title="Python基础语法"></a>Python基础语法</h1><h2 id="输出"><a href="#输出" class="headerlink" title="输出"></a>输出</h2><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">print(<span class="string">&#x27;helloworld&#x27;</span>)</span><br><span class="line">print(<span class="string">&#x27;I am&#x27;</span>,<span class="string">&#x27;chenshilin&#x27;</span>)</span><br><span class="line"><span class="comment">#会依次打印每个字符串，遇到逗号“,”会输出一个空格</span></span><br><span class="line">print(<span class="string">&#x27;100+200=&#x27;</span>,<span class="number">100</span>+<span class="number">200</span>)</span><br></pre></td></tr></table></figure>

<a id="more"></a>

<h2 id="输入"><a href="#输入" class="headerlink" title="输入"></a>输入</h2><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">name = <span class="built_in">input</span>()</span><br><span class="line">name = <span class="built_in">input</span>(<span class="string">&#x27;please enter a integer:&#x27;</span>)</span><br><span class="line"><span class="comment">#input()可以让你显示一个字符串来提示用户</span></span><br></pre></td></tr></table></figure>

<h2 id="转义字符"><a href="#转义字符" class="headerlink" title="转义字符"></a>转义字符</h2><p>转义字符<code>\</code>可以转义很多字符，比如<code>\n</code>表示换行，<code>\t</code>表示制表符，字符<code>\</code>本身也要转义，所以<code>\\</code>表示的字符就是<code>\</code></p>
<p>Python还允许用<code>r&#39;&#39;</code>表示<code>&#39;&#39;</code>内部的字符串默认不转义</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">print(<span class="string">r&#x27;&#x27;&#x27;hello,\n</span></span><br><span class="line"><span class="string">world&#x27;&#x27;&#x27;</span>)</span><br></pre></td></tr></table></figure>

<p>hello,\n<br>world</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">print(<span class="string">&#x27;&#x27;&#x27;hello,\n</span></span><br><span class="line"><span class="string">world&#x27;&#x27;&#x27;</span>)</span><br></pre></td></tr></table></figure>

<p>hello,</p>
<p>world</p>
<h2 id="布尔"><a href="#布尔" class="headerlink" title="布尔"></a>布尔</h2><p>可以直接使用True和False <strong>(严格区分大小写)</strong></p>
<p>可以使用and, or, not运算</p>
<h2 id="变量"><a href="#变量" class="headerlink" title="变量"></a>变量</h2><p>Python语言的变量定义为动态语言，不用定义变量类型</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment">#整数</span></span><br><span class="line">a = <span class="number">100</span></span><br><span class="line"><span class="comment">#字符串</span></span><br><span class="line">t_007 = <span class="string">&#x27;T007&#x27;</span></span><br><span class="line"><span class="comment">#bool</span></span><br><span class="line">Answer = <span class="literal">True</span></span><br></pre></td></tr></table></figure>

<h2 id="列表：list"><a href="#列表：list" class="headerlink" title="列表：list"></a>列表：list</h2><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment">#创建数组</span></span><br><span class="line">classmates = [<span class="string">&#x27;Michael&#x27;</span>, <span class="string">&#x27;Bob&#x27;</span>, <span class="string">&#x27;Tracy&#x27;</span>]</span><br><span class="line"><span class="comment">#查看数组元素</span></span><br><span class="line">classmates[<span class="number">0</span>]</span><br><span class="line"><span class="comment">#查看数组个数</span></span><br><span class="line"><span class="built_in">len</span>(classmates)</span><br><span class="line"><span class="comment">#添加数组元素</span></span><br><span class="line">classmates.append(<span class="string">&#x27;Adam&#x27;</span>)</span><br><span class="line">classmates.insert(<span class="number">1</span>, <span class="string">&#x27;Jack&#x27;</span>)</span><br><span class="line"><span class="comment">#删除数组元素</span></span><br><span class="line">classmates.pop()</span><br><span class="line"><span class="comment">#可保留要删除的数据</span></span><br><span class="line">pop_bob = classmates.pop(<span class="number">1</span>)</span><br><span class="line"><span class="comment">#直接删除</span></span><br><span class="line"><span class="keyword">del</span> classmates[<span class="number">0</span>]</span><br><span class="line"><span class="comment">#按值删除</span></span><br><span class="line">classmates.remove(<span class="string">&#x27;Bob&#x27;</span>)</span><br><span class="line"><span class="comment">#list中的元素可以不相同</span></span><br><span class="line">L = [<span class="string">&#x27;Apple&#x27;</span>, <span class="number">123</span>, <span class="literal">True</span>]</span><br></pre></td></tr></table></figure>

<h3 id="切片"><a href="#切片" class="headerlink" title="切片"></a>切片</h3><p>1.列表切片在作为参数传递给函数时，表明传递的是一个副本，并不是本身</p>
<p>在这种情况下，如若函数对其更改，将不会改变其原有的值</p>
<p>2.切片的另一主要的用途为，顾名思义，对列表进行分割</p>
<h2 id="元组：tuple"><a href="#元组：tuple" class="headerlink" title="元组：tuple"></a>元组：tuple</h2><p>tuple一经初始化就不能修改</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">classmates = (<span class="string">&#x27;Michael&#x27;</span>, <span class="string">&#x27;Bob&#x27;</span>, <span class="string">&#x27;Tracy&#x27;</span>)</span><br><span class="line"><span class="comment">#只有1个元素的tuple定义时必须加一个逗号,来消除歧义</span></span><br><span class="line">t = (<span class="number">1</span>,)</span><br><span class="line"><span class="comment">#定义的不是tuple，是1这个数！</span></span><br><span class="line">t = (<span class="number">1</span>)</span><br></pre></td></tr></table></figure>

<h2 id="条件判断"><a href="#条件判断" class="headerlink" title="条件判断"></a>条件判断</h2><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">age = <span class="number">3</span></span><br><span class="line"><span class="keyword">if</span> age &gt;= <span class="number">18</span>:</span><br><span class="line">    print(<span class="string">&#x27;adult&#x27;</span>)</span><br><span class="line"><span class="keyword">elif</span> age &gt;= <span class="number">6</span>:</span><br><span class="line">    print(<span class="string">&#x27;teenager&#x27;</span>)</span><br><span class="line"><span class="keyword">else</span>:</span><br><span class="line">    print(<span class="string">&#x27;kid&#x27;</span>)</span><br></pre></td></tr></table></figure>

<p>注意不要少写了冒号<code>:</code>，缩进通常为4格</p>
<p>if语句执行有个特点，它是从上往下判断，如果在某个判断上是<code>True</code>，把该判断对应的语句执行后，就忽略掉剩下的<code>elif</code>和`else</p>
<p>类似C语言中的switch/case语句</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">s = <span class="built_in">input</span>(<span class="string">&#x27;birth: &#x27;</span>)</span><br><span class="line"><span class="comment">#把str转换成整数</span></span><br><span class="line">birth = <span class="built_in">int</span>(s)</span><br><span class="line"><span class="keyword">if</span> birth &lt; <span class="number">2000</span>:</span><br><span class="line">    print(<span class="string">&#x27;00前&#x27;</span>)</span><br><span class="line"><span class="keyword">else</span>:</span><br><span class="line">    print(<span class="string">&#x27;00后&#x27;</span>)</span><br><span class="line">    </span><br></pre></td></tr></table></figure>

<h2 id="循环"><a href="#循环" class="headerlink" title="循环"></a>循环</h2><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment">#计算1-100的整数之和 for...in...循环</span></span><br><span class="line"><span class="built_in">sum</span> = <span class="number">0</span></span><br><span class="line"><span class="keyword">for</span> x <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">101</span>):</span><br><span class="line">    <span class="built_in">sum</span> = <span class="built_in">sum</span> + x</span><br><span class="line">print(<span class="built_in">sum</span>)</span><br></pre></td></tr></table></figure>

<p>for x in …循环就是把每个元素代入变量<code>x</code>，然后执行缩进块的语句</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment">#计算100以内所有奇数之和，用while循环实现</span></span><br><span class="line"><span class="built_in">sum</span> = <span class="number">0</span></span><br><span class="line">n = <span class="number">99</span></span><br><span class="line"><span class="keyword">while</span> n &gt; <span class="number">0</span>:</span><br><span class="line">    <span class="built_in">sum</span> = <span class="built_in">sum</span> + n</span><br><span class="line">    n = n - <span class="number">2</span></span><br><span class="line">print(<span class="built_in">sum</span>)</span><br></pre></td></tr></table></figure>

<h2 id="dict-和-set"><a href="#dict-和-set" class="headerlink" title="dict 和 set"></a>dict 和 set</h2><h3 id="字典：dict"><a href="#字典：dict" class="headerlink" title="字典：dict"></a>字典：dict</h3><p>即map，使用键-值（key-value）存储，具有极快的查找速度</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">names = [<span class="string">&#x27;Michael&#x27;</span>, <span class="string">&#x27;Bob&#x27;</span>, <span class="string">&#x27;Tracy&#x27;</span>]</span><br><span class="line">scores = [<span class="number">95</span>, <span class="number">75</span>, <span class="number">85</span>]</span><br><span class="line"><span class="comment">#通过两个list创建dict</span></span><br><span class="line">d = &#123;<span class="string">&#x27;Michael&#x27;</span>: <span class="number">95</span>, <span class="string">&#x27;Bob&#x27;</span>: <span class="number">75</span>, <span class="string">&#x27;Tracy&#x27;</span>: <span class="number">85</span>&#125;</span><br><span class="line"><span class="comment">#查看</span></span><br><span class="line">d[<span class="string">&#x27;Michael&#x27;</span>]</span><br><span class="line"><span class="comment">#直接放入或修改</span></span><br><span class="line">d[<span class="string">&#x27;Adam&#x27;</span>] = <span class="number">67</span></span><br><span class="line">d[<span class="string">&#x27;Michael&#x27;</span>] = <span class="number">100</span></span><br><span class="line"><span class="comment">#删除</span></span><br><span class="line">d.pop(<span class="string">&#x27;Bob&#x27;</span>)</span><br></pre></td></tr></table></figure>

<p>判断key的存在，有两种办法，一是通过<code>in</code>判断key是否存在：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment">#返回值为bool类型</span></span><br><span class="line"><span class="string">&#x27;Thomas&#x27;</span> <span class="keyword">in</span> d</span><br></pre></td></tr></table></figure>

<p>二是通过dict提供的<code>get()</code>方法，如果key不存在，可以返回<code>None</code>，或者自己指定的value：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">d.get(&#39;Thomas&#39;)</span><br><span class="line">d.get(&#39;Thomas&#39;,-1)</span><br></pre></td></tr></table></figure>

<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment">#遍历字典</span></span><br><span class="line"><span class="keyword">for</span> key, value <span class="keyword">in</span> d.items():</span><br><span class="line">    print(key+<span class="string">&#x27;:&#x27;</span>+value)</span><br></pre></td></tr></table></figure>



<h3 id="set"><a href="#set" class="headerlink" title="set"></a>set</h3><p>不允许有重复的值</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span>s = <span class="built_in">set</span>([<span class="number">1</span>, <span class="number">1</span>, <span class="number">2</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">3</span>])</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>s</span><br><span class="line">&#123;<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>&#125;</span><br></pre></td></tr></table></figure>

<p>传入的参数[1, 1, 2, 2, 3, 3]是一个list</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment">#添加</span></span><br><span class="line">s.add(<span class="number">4</span>)</span><br><span class="line"><span class="comment">#删除</span></span><br><span class="line">s.remove(<span class="number">4</span>)</span><br></pre></td></tr></table></figure>

<p>set可以看成数学意义上的无序和无重复元素的集合，因此，两个set可以做数学意义上的交集、并集等操作：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span>s1 = <span class="built_in">set</span>([<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>])</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>s2 = <span class="built_in">set</span>([<span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>])</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>s1 &amp; s2</span><br><span class="line">&#123;<span class="number">2</span>, <span class="number">3</span>&#125;</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>s1 | s2</span><br><span class="line">&#123;<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>&#125;</span><br></pre></td></tr></table></figure>

<h2 id="何谓不可变"><a href="#何谓不可变" class="headerlink" title="何谓不可变"></a>何谓不可变</h2><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span>a = <span class="string">&#x27;abc&#x27;</span></span><br><span class="line"><span class="comment">#replace并没有修改a的值，只是返回了一个str</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>b = a.replace(<span class="string">&#x27;a&#x27;</span>, <span class="string">&#x27;A&#x27;</span>)</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>b</span><br><span class="line"><span class="string">&#x27;Abc&#x27;</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>a</span><br><span class="line"><span class="string">&#x27;abc&#x27;</span></span><br></pre></td></tr></table></figure>

<h2 id="函数"><a href="#函数" class="headerlink" title="函数"></a>函数</h2><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment">#函数的定义，注意缩进与冒号</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">my_abs</span>(<span class="params">x</span>):</span></span><br><span class="line">    <span class="keyword">if</span> x &gt;= <span class="number">0</span>:</span><br><span class="line">        <span class="keyword">return</span> x</span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        <span class="keyword">return</span> -x</span><br></pre></td></tr></table></figure>

<p>def函数时，需要确定函数名和参数个数；</p>
<p>如果有必要，可以先对参数的数据类型做检查；</p>
<p>函数体内部可以用<code>return</code>随时返回函数结果；</p>
<p>函数执行完毕也没有<code>return</code>语句时，自动<code>return None</code>。</p>
<p>函数可以同时返回多个值，但其实就是一个元组tuple</p>
<h3 id="函数的参数"><a href="#函数的参数" class="headerlink" title="函数的参数"></a>函数的参数</h3><h4 id="位置参数"><a href="#位置参数" class="headerlink" title="位置参数"></a>位置参数</h4><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">power</span>(<span class="params">x, n</span>):</span></span><br><span class="line">    s = <span class="number">1</span></span><br><span class="line">    <span class="keyword">while</span> n &gt; <span class="number">0</span>:</span><br><span class="line">        n = n - <span class="number">1</span></span><br><span class="line">        s = s * x</span><br><span class="line">    <span class="keyword">return</span> s</span><br></pre></td></tr></table></figure>

<p>x,n就被称为位置参数</p>
<h4 id="默认参数"><a href="#默认参数" class="headerlink" title="默认参数"></a>默认参数</h4><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">power</span>(<span class="params">x, n=<span class="number">2</span></span>):</span></span><br><span class="line">    s = <span class="number">1</span></span><br><span class="line">    <span class="keyword">while</span> n &gt; <span class="number">0</span>:</span><br><span class="line">        n = n - <span class="number">1</span></span><br><span class="line">        s = s * x</span><br><span class="line">    <span class="keyword">return</span> s</span><br></pre></td></tr></table></figure>

<p>n为默认参数</p>
<h4 id="可变参数"><a href="#可变参数" class="headerlink" title="可变参数"></a>可变参数</h4><p>可变参数就是传入的参数个数是可变的，可以是1个、2个到任意个，还可以是0个</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">calc</span>(<span class="params">numbers</span>):</span></span><br><span class="line">    <span class="built_in">sum</span> = <span class="number">0</span></span><br><span class="line">    <span class="keyword">for</span> n <span class="keyword">in</span> numbers:</span><br><span class="line">        <span class="built_in">sum</span> = <span class="built_in">sum</span> + n * n</span><br><span class="line">    <span class="keyword">return</span> <span class="built_in">sum</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#list</span></span><br><span class="line">calc([<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>])</span><br><span class="line"><span class="comment">#tuple</span></span><br><span class="line">calc((<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>))</span><br><span class="line">calc(<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>)</span><br></pre></td></tr></table></figure>

<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">calc</span>(<span class="params">*numbers</span>):</span></span><br><span class="line">    <span class="built_in">sum</span> = <span class="number">0</span></span><br><span class="line">    <span class="keyword">for</span> n <span class="keyword">in</span> numbers:</span><br><span class="line">        <span class="built_in">sum</span> = <span class="built_in">sum</span> + n * n</span><br><span class="line">    <span class="keyword">return</span> <span class="built_in">sum</span></span><br></pre></td></tr></table></figure>

<p>定义可变参数和定义一个list或tuple参数相比，仅仅在参数前面加了一个<code>*</code>号。在函数内部，参数<code>numbers</code>接收到的是一个tuple，因此，函数代码完全不变。但是，调用该函数时，可以传入任意个参数，包括0个参数：</p>
<h4 id="命名关键字参数"><a href="#命名关键字参数" class="headerlink" title="命名关键字参数"></a>命名关键字参数</h4><p>对于关键字参数，函数的调用者可以传入任意不受限制的关键字参数。</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line"></span><br></pre></td></tr></table></figure>



<h4 id="关键字参数"><a href="#关键字参数" class="headerlink" title="关键字参数"></a>关键字参数</h4><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">person</span>(<span class="params">name, age, **kw</span>):</span></span><br><span class="line">    print(<span class="string">&#x27;name:&#x27;</span>, name, <span class="string">&#x27;age:&#x27;</span>, age, <span class="string">&#x27;other:&#x27;</span>, kw)</span><br><span class="line">    </span><br><span class="line">    </span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>person(<span class="string">&#x27;Bob&#x27;</span>, <span class="number">35</span>, city=<span class="string">&#x27;Beijing&#x27;</span>)</span><br><span class="line">name: Bob age: <span class="number">35</span> other: &#123;<span class="string">&#x27;city&#x27;</span>: <span class="string">&#x27;Beijing&#x27;</span>&#125;</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>person(<span class="string">&#x27;Adam&#x27;</span>, <span class="number">45</span>, gender=<span class="string">&#x27;M&#x27;</span>, job=<span class="string">&#x27;Engineer&#x27;</span>)</span><br><span class="line">name: Adam age: <span class="number">45</span> other: &#123;<span class="string">&#x27;gender&#x27;</span>: <span class="string">&#x27;M&#x27;</span>, <span class="string">&#x27;job&#x27;</span>: <span class="string">&#x27;Engineer&#x27;</span>&#125;</span><br></pre></td></tr></table></figure>

<p>也可以将dict字典传入</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment">#1:</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>extra = &#123;<span class="string">&#x27;city&#x27;</span>: <span class="string">&#x27;Beijing&#x27;</span>, <span class="string">&#x27;job&#x27;</span>: <span class="string">&#x27;Engineer&#x27;</span>&#125;</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>person(<span class="string">&#x27;Jack&#x27;</span>, <span class="number">24</span>, city=extra[<span class="string">&#x27;city&#x27;</span>], job=extra[<span class="string">&#x27;job&#x27;</span>])</span><br><span class="line">name: Jack age: <span class="number">24</span> other: &#123;<span class="string">&#x27;city&#x27;</span>: <span class="string">&#x27;Beijing&#x27;</span>, <span class="string">&#x27;job&#x27;</span>: <span class="string">&#x27;Engineer&#x27;</span>&#125;</span><br><span class="line"><span class="comment">#2:</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>person(<span class="string">&#x27;Jack&#x27;</span>, <span class="number">24</span>, **extra)</span><br><span class="line">name: Jack age: <span class="number">24</span> other: &#123;<span class="string">&#x27;city&#x27;</span>: <span class="string">&#x27;Beijing&#x27;</span>, <span class="string">&#x27;job&#x27;</span>: <span class="string">&#x27;Engineer&#x27;</span>&#125;</span><br></pre></td></tr></table></figure>

<h2 id="类"><a href="#类" class="headerlink" title="类"></a>类</h2><h3 id="封装"><a href="#封装" class="headerlink" title="封装"></a>封装</h3><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Dog</span>():</span></span><br><span class="line">    <span class="string">&quot;&quot;&quot;小狗类&quot;&quot;&quot;</span></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span>(<span class="params">self, name, age</span>):</span></span><br><span class="line">        self.name = name</span><br><span class="line">        self.age = age</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">sit</span>(<span class="params">self</span>):</span></span><br><span class="line">        print(self.name.title() + <span class="string">&quot; is now sitting&quot;</span>)</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">roll_over</span>(<span class="params">self</span>):</span></span><br><span class="line">        print(self.name.title() + <span class="string">&quot; rolled over!&quot;</span>)</span><br><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure>

<p>创建类时，使用构造函数时要使用两个_</p>
<h3 id="继承"><a href="#继承" class="headerlink" title="继承"></a>继承</h3><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">ElectricCar</span>(<span class="params">Car</span>):</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span>(<span class="params">self, make, model, year</span>):</span></span><br><span class="line">        <span class="built_in">super</span>().__init__(self, make, model, year)</span><br></pre></td></tr></table></figure>

<p>super()是一个特殊的函数，帮助python将子类和父类关联起来。父类因为被称为超类，super因此而得名</p>
<h2 id="文件读取"><a href="#文件读取" class="headerlink" title="文件读取"></a>文件读取</h2><h3 id="方法一：遍历逐行读取"><a href="#方法一：遍历逐行读取" class="headerlink" title="方法一：遍历逐行读取"></a>方法一：遍历逐行读取</h3><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">filename  = <span class="string">&#x27;pi_digits.txt&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">with</span> <span class="built_in">open</span>(filename) <span class="keyword">as</span> file_project:</span><br><span class="line">    <span class="keyword">for</span> line <span class="keyword">in</span> file_project:</span><br><span class="line">        print(line)</span><br></pre></td></tr></table></figure>

<h3 id="方法二：读取整个文件"><a href="#方法二：读取整个文件" class="headerlink" title="方法二：读取整个文件"></a>方法二：读取整个文件</h3><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">with open(&#39;pi_digits.txt&#39;) as file_project:</span><br><span class="line">    contents &#x3D; file_project.read()</span><br><span class="line">    print(contents)</span><br></pre></td></tr></table></figure>

<h3 id="方法三：写到一个列表中"><a href="#方法三：写到一个列表中" class="headerlink" title="方法三：写到一个列表中"></a>方法三：写到一个列表中</h3><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">filename  = <span class="string">&#x27;pi_digits.txt&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">with</span> <span class="built_in">open</span>(filename) <span class="keyword">as</span> file_project:</span><br><span class="line">    lines = file_project.readlines()</span><br><span class="line">    </span><br><span class="line"><span class="keyword">for</span> line <span class="keyword">in</span> lines:</span><br><span class="line">    print(line)</span><br></pre></td></tr></table></figure>

<h2 id="文件写入"><a href="#文件写入" class="headerlink" title="文件写入"></a>文件写入</h2><h3 id="写入空文件"><a href="#写入空文件" class="headerlink" title="写入空文件"></a>写入空文件</h3><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">filename = <span class="string">&#x27;programming.txt&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">with</span> <span class="built_in">open</span>(filename, <span class="string">&#x27;w&#x27;</span>) <span class="keyword">as</span> file_project:</span><br><span class="line">    file_project.write(<span class="string">&#x27;i love programming&#x27;</span>)</span><br></pre></td></tr></table></figure>

<p>读取模式’r’, 写入模式’w’, 附加模式’a’</p>
<h2 id="异常"><a href="#异常" class="headerlink" title="异常"></a>异常</h2><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">try</span>:</span><br><span class="line">    print(<span class="number">5</span>/<span class="number">0</span>)</span><br><span class="line"><span class="keyword">except</span> ZeroDivisionError:</span><br><span class="line">    print(<span class="string">&quot;You can&#x27;t divide by zero!&quot;</span>)</span><br></pre></td></tr></table></figure>

<h3 id="try-except-else"><a href="#try-except-else" class="headerlink" title="try-except-else"></a>try-except-else</h3><p>只有会出现异常的代码块才需要放在try当中，如果程序出现了意料之中的异常提醒，那么会执行except中的代码；如果运行正常，会接着执行else中的代码</p>
<p>异常类型包括：</p>
<p>ZeroDivisionError</p>
<p>FileNotFoundErrot</p>
<h2 id="存储数据-json"><a href="#存储数据-json" class="headerlink" title="存储数据 json"></a>存储数据 json</h2><h3 id="写入"><a href="#写入" class="headerlink" title="写入"></a>写入</h3><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> json</span><br><span class="line">numbers = [<span class="number">2</span>, <span class="number">3</span>, <span class="number">5</span>, <span class="number">7</span>, <span class="number">11</span>, <span class="number">13</span>]</span><br><span class="line"></span><br><span class="line">filename = <span class="string">&#x27;numbers.json&#x27;</span></span><br><span class="line"><span class="keyword">with</span> <span class="built_in">open</span>(filename, <span class="string">&#x27;w&#x27;</span>) <span class="keyword">as</span> f_obj:</span><br><span class="line">    json.dump(numbers, f_obj)</span><br></pre></td></tr></table></figure>

<h3 id="读出"><a href="#读出" class="headerlink" title="读出"></a>读出</h3><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> json</span><br><span class="line"></span><br><span class="line">filename = <span class="string">&#x27;numbers.json&#x27;</span></span><br><span class="line"><span class="keyword">with</span> <span class="built_in">open</span>(filename) <span class="keyword">as</span> f_obj:</span><br><span class="line">    numbers = json.load(f_obj)</span><br><span class="line"></span><br><span class="line">print(numbers)</span><br></pre></td></tr></table></figure>

<h2 id="重构"><a href="#重构" class="headerlink" title="重构"></a>重构</h2><p>将代码划分为一系列完成具体工作的函数</p>
<h2 id="测试"><a href="#测试" class="headerlink" title="测试"></a>测试</h2><h3 id="单元测试函数"><a href="#单元测试函数" class="headerlink" title="单元测试函数"></a>单元测试函数</h3><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment">#导入模块</span></span><br><span class="line"><span class="keyword">import</span> unittest</span><br><span class="line"><span class="keyword">from</span> name_function <span class="keyword">import</span> get_formatted_name</span><br><span class="line"></span><br><span class="line"><span class="comment">#命名随意，但必须继承unittest.TestCase</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">NamesTestCase</span>(<span class="params">unittest.TestCase</span>):</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">test_first_last_name</span>(<span class="params">self</span>):</span></span><br><span class="line">        formatted_name = get_formatted_name(<span class="string">&#x27;janis&#x27;</span>, <span class="string">&#x27;joplin&#x27;</span>)</span><br><span class="line">        <span class="comment">#断言方法</span></span><br><span class="line">        self.assertEqual(formatted_name, <span class="string">&#x27;Janis Joplin&#x27;</span>)</span><br><span class="line">        </span><br><span class="line"><span class="comment">#运行这个文件中的测试</span></span><br><span class="line">unittest.main()</span><br></pre></td></tr></table></figure>

<p>![](D:\Huawei Share\Screenshot\capture_20201025231510992.bmp)</p>
<h3 id="测试类，方法setUp"><a href="#测试类，方法setUp" class="headerlink" title="测试类，方法setUp()"></a>测试类，方法setUp()</h3><p>setUp()方法创建一系列实例，就可以避免在每个测试方法中再创建</p>
<p><strong>survey.py</strong></p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">AnonymousSurvey</span>():</span></span><br><span class="line">    <span class="string">&quot;&quot;&quot;创建一个匿名调查类&quot;&quot;&quot;</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span>(<span class="params">self, question</span>):</span></span><br><span class="line">        <span class="string">&quot;&quot;&quot;初始化一个问题&quot;&quot;&quot;</span></span><br><span class="line">        self.question = question</span><br><span class="line">        self.responses = []</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">show_question</span>(<span class="params">self</span>):</span></span><br><span class="line">        <span class="string">&quot;&quot;&quot;显示调查问卷&quot;&quot;&quot;</span></span><br><span class="line">        print(self.question)</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">store_response</span>(<span class="params">self, new_response</span>):</span></span><br><span class="line">        <span class="string">&quot;&quot;&quot;存储新的回答&quot;&quot;&quot;</span></span><br><span class="line">        self.responses.append(new_response)</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">show_results</span>(<span class="params">self</span>):</span></span><br><span class="line">        <span class="string">&quot;&quot;&quot;显示收集到的所有回答&quot;&quot;&quot;</span></span><br><span class="line">        print(<span class="string">&quot;Survey results:&quot;</span>)</span><br><span class="line">        <span class="keyword">for</span> response <span class="keyword">in</span> self.responses:</span><br><span class="line">            print(<span class="string">&#x27;-&#x27;</span> + response)</span><br></pre></td></tr></table></figure>

<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> unittest</span><br><span class="line"><span class="keyword">from</span> survey <span class="keyword">import</span> AnonymousSurvey</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">TestAnonymousSurvey</span>(<span class="params">unittest.TestCase</span>):</span></span><br><span class="line">    <span class="string">&quot;&quot;&quot;针对AnonymousSurvey类的测试&quot;&quot;&quot;</span></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">setUp</span>(<span class="params">self</span>) -&gt; <span class="keyword">None</span>:</span></span><br><span class="line">        <span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">        创建一个调查对象和一组答案，供后续测试使用</span></span><br><span class="line"><span class="string">        &quot;&quot;&quot;</span></span><br><span class="line">        question = <span class="string">&quot;What language did you first learn to speak?&quot;</span></span><br><span class="line">        self.my_survey = AnonymousSurvey(question)</span><br><span class="line">        self.responses = [<span class="string">&#x27;English&#x27;</span>, <span class="string">&#x27;Spanish&#x27;</span>, <span class="string">&#x27;Mandarin&#x27;</span>]</span><br><span class="line">        <span class="function"><span class="keyword">def</span> <span class="title">test_store_single_response</span>(<span class="params">self</span>):</span></span><br><span class="line">            self.my_survey.store_reponse(self.response[<span class="number">0</span>])</span><br><span class="line">            self.assertIn(self.response[<span class="number">0</span>], self.my_survey.responses)</span><br><span class="line"></span><br><span class="line">        <span class="function"><span class="keyword">def</span> <span class="title">test_store_three_response</span>(<span class="params">self</span>):</span></span><br><span class="line">            <span class="keyword">for</span> response <span class="keyword">in</span> self.responses:</span><br><span class="line">                self.my_survey.store_reponse(response)</span><br><span class="line">            <span class="keyword">for</span> response <span class="keyword">in</span> self.responses:</span><br><span class="line">                self.assertIn(response, self.my_survey.responses)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">unittest.main()</span><br></pre></td></tr></table></figure>



<h1 id="参考文献"><a href="#参考文献" class="headerlink" title="参考文献"></a>参考文献</h1><p>1.《Python编程：从入门到实践》美Eric Matthes著</p>
<p>2.<a href="https://www.liaoxuefeng.com/">https://www.liaoxuefeng.com/</a></p>
]]></content>
      <categories>
        <category>python</category>
      </categories>
      <tags>
        <tag>python</tag>
      </tags>
  </entry>
  <entry>
    <title>用conda安装pytorch</title>
    <url>/2020/11/01/%E7%94%A8conda%E5%AE%89%E8%A3%85pytorch/</url>
    <content><![CDATA[<h1 id="Miniconda"><a href="#Miniconda" class="headerlink" title="Miniconda"></a>Miniconda</h1><h2 id="Download-amp-install"><a href="#Download-amp-install" class="headerlink" title="Download &amp; install"></a>Download &amp; install</h2><p>官网<a href="https://docs.conda.io/en/latest/miniconda.html">https://docs.conda.io/en/latest/miniconda.html</a></p>
<a id="more"></a>

<h2 id="环境配置"><a href="#环境配置" class="headerlink" title="环境配置"></a>环境配置</h2><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">C:\Users\huawei\miniconda3\Scripts</span><br></pre></td></tr></table></figure>

<p>将以上路径加入到环境变量的path中</p>
<h2 id="添加清华镜向源"><a href="#添加清华镜向源" class="headerlink" title="添加清华镜向源"></a>添加清华镜向源</h2><p>用途：加快下载速度，否则非常慢</p>
<p>在开始菜单里找到并打开<u>Anaconda Prompt(miniconda3)</u>,命令行窗口</p>
<p>复制粘贴以下内容</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">conda config --add channels https:&#x2F;&#x2F;mirrors.tuna.tsinghua.edu.cn&#x2F;anaconda&#x2F;pkgs&#x2F;free&#x2F;</span><br><span class="line">conda config --add channels https:&#x2F;&#x2F;mirrors.tuna.tsinghua.edu.cn&#x2F;anaconda&#x2F;pkgs&#x2F;main&#x2F;</span><br><span class="line">conda config --add channels https:&#x2F;&#x2F;mirrors.tuna.tsinghua.edu.cn&#x2F;anaconda&#x2F;cloud&#x2F;conda-forge&#x2F;</span><br><span class="line">conda config --add channels https:&#x2F;&#x2F;mirrors.tuna.tsinghua.edu.cn&#x2F;anaconda&#x2F;cloud&#x2F;bioconda&#x2F;</span><br><span class="line">conda config --set show_channel_urls yes </span><br><span class="line">conda config --get channels</span><br><span class="line">conda config --add channels https:&#x2F;&#x2F;mirrors.tuna.tsinghua.edu.cn&#x2F;anaconda&#x2F;cloud&#x2F;pytorch&#x2F;</span><br><span class="line">conda config --add channels https:&#x2F;&#x2F;mirrors.tuna.tsinghua.edu.cn&#x2F;anaconda&#x2F;cloud&#x2F;msys2&#x2F;</span><br><span class="line">conda config --add channels https:&#x2F;&#x2F;mirrors.tuna.tsinghua.edu.cn&#x2F;anaconda&#x2F;cloud&#x2F;menpo&#x2F;</span><br></pre></td></tr></table></figure>

<h2 id="创建pytorch环境"><a href="#创建pytorch环境" class="headerlink" title="创建pytorch环境"></a>创建pytorch环境</h2><p>这里是根据自己的python版本创建</p>
<p>命令行输出可查看</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">python -v</span><br></pre></td></tr></table></figure>

<p>例如我的是3.8.3</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">conda create -n pytorch python&#x3D;3.8.3</span><br></pre></td></tr></table></figure>

<p>以上命令就根据python的版本创建出了pytorch的环境</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">conda activate pytorch</span><br></pre></td></tr></table></figure>

<p>激活环境</p>
<h1 id="Pytorch"><a href="#Pytorch" class="headerlink" title="Pytorch"></a>Pytorch</h1><p>以下操作接着刚刚的命令行窗口内</p>
<h2 id="查看自己的GPU版本"><a href="#查看自己的GPU版本" class="headerlink" title="查看自己的GPU版本"></a>查看自己的GPU版本</h2><p>右键开始菜单栏-任务管理器-性能-GPU</p>
<p>根据自己的显卡选择CUDA的版本，如果不是英伟达显卡，刚选择None</p>
<p>官网<a href="https://pytorch.org/get-started/locally/">https://pytorch.org/get-started/locally/</a></p>
<p>安装命令可以在官网里获取</p>
<h2 id="Download-amp-install-1"><a href="#Download-amp-install-1" class="headerlink" title="Download&amp;install"></a>Download&amp;install</h2><p>建议删除 -c pytorch，否则会默认从官网下载，速度极慢</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">conda install pytorch torchvision torchaudio cpuonly -c pytorch</span><br></pre></td></tr></table></figure>

<h2 id="测试"><a href="#测试" class="headerlink" title="测试"></a>测试</h2><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">python #进行Python</span><br><span class="line">import torch #这步后没有报错说明安装成功</span><br></pre></td></tr></table></figure>

<p>或者</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">pip list</span><br></pre></td></tr></table></figure>

<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">(pytorch) C:\Users\huawei&gt;pip list</span><br><span class="line">Package      Version</span><br><span class="line">------------ -------------------</span><br><span class="line">certifi      2020.6.20</span><br><span class="line">cffi         1.14.3</span><br><span class="line">mkl-service  2.3.0</span><br><span class="line">numpy        1.19.2</span><br><span class="line">olefile      0.46</span><br><span class="line">Pillow       8.0.1</span><br><span class="line">pip          20.2.4</span><br><span class="line">pycparser    2.20</span><br><span class="line">setuptools   50.3.0.post20201006</span><br><span class="line">six          1.15.0</span><br><span class="line">torch        1.6.0</span><br><span class="line">torchaudio   0.6.0</span><br><span class="line">torchvision  0.2.2</span><br><span class="line">wheel        0.35.1</span><br><span class="line">wincertstore 0.2</span><br></pre></td></tr></table></figure>

<h1 id="插件"><a href="#插件" class="headerlink" title="插件"></a>插件</h1><p>直接分次复制到命令行中即可</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">conda install pandas</span><br><span class="line">conda install jupyter notebook</span><br><span class="line">conda install matplotlib</span><br><span class="line">pip install sklearn</span><br></pre></td></tr></table></figure>

]]></content>
      <categories>
        <category>ML_DL</category>
      </categories>
      <tags>
        <tag>pytorch</tag>
        <tag>conda</tag>
        <tag>ML</tag>
      </tags>
  </entry>
  <entry>
    <title>友元函数无法访问私有成员</title>
    <url>/2020/11/15/friend/</url>
    <content><![CDATA[<h1 id="Problem"><a href="#Problem" class="headerlink" title="Problem"></a>Problem</h1><p>今天在完成一份C++作业时，遇到了一个问题：</p>
<p>已经将函数作为友元放在了Port类，在分文件编写时仍然提示无法访问类中的私有成员</p>
<a id="more"></a>

<p><img src="/2020/11/15/friend/image1.jpg" alt="image1"></p>
<h1 id="Solve"><a href="#Solve" class="headerlink" title="Solve"></a>Solve</h1><p>在头文件中加入两行代码，这可能也是我的一个习惯问题，iostream只在方法文件中添加</p>
<p><code>port.h</code></p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">ifndef</span> PORT_H</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> PORT_H</span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt; //头文件中务必加入这两行代码</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;<span class="comment">//****</span></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Port</span></span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line"><span class="keyword">private</span>:</span><br><span class="line">	<span class="keyword">char</span>* brand;</span><br><span class="line">	<span class="keyword">char</span> style[<span class="number">20</span>];</span><br><span class="line">	<span class="keyword">int</span> bottles;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">	Port(<span class="keyword">const</span> <span class="keyword">char</span>* br = <span class="string">&quot;none&quot;</span>, <span class="keyword">const</span> <span class="keyword">char</span>* st = <span class="string">&quot;none&quot;</span>, <span class="keyword">int</span> b = <span class="number">0</span>);</span><br><span class="line">	Port(<span class="keyword">const</span> Port&amp; p);</span><br><span class="line">	<span class="keyword">virtual</span> ~Port() &#123; <span class="keyword">delete</span>[]brand; &#125;</span><br><span class="line">	Port&amp; <span class="keyword">operator</span> = (<span class="keyword">const</span> Port&amp; p);</span><br><span class="line">	Port&amp; <span class="keyword">operator</span> += (<span class="keyword">int</span> b);</span><br><span class="line">	Port&amp; <span class="keyword">operator</span>-=(<span class="keyword">int</span> b);</span><br><span class="line">	<span class="function"><span class="keyword">int</span> <span class="title">Bottlecount</span><span class="params">()</span> <span class="keyword">const</span> </span>&#123; <span class="keyword">return</span> bottles; &#125;</span><br><span class="line">	<span class="function"><span class="keyword">virtual</span> <span class="keyword">void</span> <span class="title">show</span><span class="params">()</span> <span class="keyword">const</span></span>;</span><br><span class="line">	<span class="keyword">friend</span> ostream&amp; <span class="keyword">operator</span>&lt;&lt;(ostream&amp; os, <span class="keyword">const</span> Port&amp; p);</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="meta-keyword">endif</span></span></span><br></pre></td></tr></table></figure>

]]></content>
      <categories>
        <category>C++</category>
      </categories>
      <tags>
        <tag>C++</tag>
        <tag>友元</tag>
      </tags>
  </entry>
  <entry>
    <title>团体程序设计天梯赛</title>
    <url>/2021/03/04/%E5%9B%A2%E4%BD%93%E7%A8%8B%E5%BA%8F%E8%AE%BE%E8%AE%A1%E5%A4%A9%E6%A2%AF%E8%B5%9B/</url>
    <content><![CDATA[<h1 id="L1-027-出租-20-分"><a href="#L1-027-出租-20-分" class="headerlink" title="L1-027 出租 (20 分)"></a><strong>L1-027 出租 (20 分)</strong></h1><h2 id="输入格式："><a href="#输入格式：" class="headerlink" title="输入格式："></a>输入格式：</h2><p>输入在一行中给出一个由11位数字组成的手机号码。</p>
<h2 id="输出格式："><a href="#输出格式：" class="headerlink" title="输出格式："></a>输出格式：</h2><p>为输入的号码生成代码的前两行，其中<code>arr</code>中的数字必须按递减顺序给出。</p>
<a id="more"></a>

<h2 id="输入样例："><a href="#输入样例：" class="headerlink" title="输入样例："></a>输入样例：</h2><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">18013820100</span><br></pre></td></tr></table></figure>

<h2 id="输出样例："><a href="#输出样例：" class="headerlink" title="输出样例："></a>输出样例：</h2><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">int[] arr &#x3D; new int[]&#123;8,3,2,1,0&#125;;</span><br><span class="line">int[] index &#x3D; new int[]&#123;3,0,4,3,1,0,2,4,3,4,4&#125;;</span><br></pre></td></tr></table></figure>

<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;set&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;algorithm&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">MyCompare</span></span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function"><span class="keyword">bool</span> <span class="title">operator</span><span class="params">()</span><span class="params">(<span class="keyword">int</span> a, <span class="keyword">int</span> b)</span></span>&#123;</span><br><span class="line">         <span class="keyword">return</span> a &gt; b;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="built_in">string</span> phonenum;</span><br><span class="line">    <span class="built_in">cin</span> &gt;&gt; phonenum;</span><br><span class="line">    <span class="built_in">set</span>&lt;<span class="keyword">int</span>,MyCompare&gt;s;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; <span class="number">11</span>; i++)</span><br><span class="line">        s.insert(phonenum[i] - <span class="string">&#x27;0&#x27;</span>);</span><br><span class="line">        </span><br><span class="line">    <span class="built_in">cout</span> &lt;&lt; <span class="string">&quot;int[] arr = new int[]&#123;&quot;</span>;</span><br><span class="line">    <span class="keyword">for</span>(<span class="built_in">set</span>&lt;<span class="keyword">int</span>, MyCompare&gt;::iterator it = s.begin(); it != s.end(); it++)</span><br><span class="line">    &#123;</span><br><span class="line">    	<span class="built_in">cout</span> &lt;&lt; *it;</span><br><span class="line">    	<span class="keyword">if</span>(++it != s.end())</span><br><span class="line">    	    <span class="built_in">cout</span> &lt;&lt; <span class="string">&quot;,&quot;</span>;</span><br><span class="line">    	it--;</span><br><span class="line">	&#125;</span><br><span class="line">    <span class="built_in">cout</span> &lt;&lt; <span class="string">&quot;&#125;;&quot;</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">    </span><br><span class="line">    <span class="built_in">cout</span> &lt;&lt; <span class="string">&quot;int[] index = new int[]&#123;&quot;</span>;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; <span class="number">11</span>; i++)</span><br><span class="line">    &#123;</span><br><span class="line">    	<span class="keyword">int</span> j = <span class="number">0</span>;</span><br><span class="line">    	<span class="keyword">for</span>(<span class="built_in">set</span>&lt;<span class="keyword">int</span>, MyCompare&gt;::iterator it = s.begin(); it != s.end(); it++)</span><br><span class="line">    	&#123;</span><br><span class="line">    		<span class="keyword">if</span>((phonenum[i] - <span class="string">&#x27;0&#x27;</span>) == *it)</span><br><span class="line">    		&#123;</span><br><span class="line">    			<span class="built_in">cout</span> &lt;&lt; j;</span><br><span class="line">    			<span class="keyword">if</span>(i+<span class="number">1</span> != <span class="number">11</span>)</span><br><span class="line">    			    <span class="built_in">cout</span> &lt;&lt; <span class="string">&quot;,&quot;</span>;</span><br><span class="line">    			<span class="keyword">break</span>;</span><br><span class="line">			&#125;</span><br><span class="line">			j++;</span><br><span class="line">		&#125;</span><br><span class="line">    	</span><br><span class="line">	&#125;</span><br><span class="line">    </span><br><span class="line">    <span class="built_in">cout</span> &lt;&lt; <span class="string">&quot;&#125;;&quot;</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h1 id="L1-039-古风排版-20-分"><a href="#L1-039-古风排版-20-分" class="headerlink" title="L1-039 古风排版 (20 分)"></a>L1-039 古风排版 (20 分)</h1><p>中国的古人写文字，是从右向左竖向排版的。本题就请你编写程序，把一段文字按古风排版。</p>
<h2 id="输入格式：-1"><a href="#输入格式：-1" class="headerlink" title="输入格式："></a>输入格式：</h2><p>输入在第一行给出一个正整数<em>N</em>（&lt;100），是每一列的字符数。第二行给出一个长度不超过1000的非空字符串，以回车结束。</p>
<h2 id="输出格式：-1"><a href="#输出格式：-1" class="headerlink" title="输出格式："></a>输出格式：</h2><p>按古风格式排版给定的字符串，每列<em>N</em>个字符（除了最后一列可能不足<em>N</em>个）。</p>
<h2 id="输入样例：-1"><a href="#输入样例：-1" class="headerlink" title="输入样例："></a>输入样例：</h2><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">4</span><br><span class="line">This is a test case</span><br></pre></td></tr></table></figure>

<h2 id="输出样例：-1"><a href="#输出样例：-1" class="headerlink" title="输出样例："></a>输出样例：</h2><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">asa T</span><br><span class="line">st ih</span><br><span class="line">e tsi</span><br><span class="line"> ce s</span><br></pre></td></tr></table></figure>

<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;string&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> N;</span><br><span class="line">    <span class="built_in">cin</span> &gt;&gt; N;</span><br><span class="line">    <span class="built_in">cin</span>.get();</span><br><span class="line">    <span class="built_in">string</span> str;</span><br><span class="line">    getline(<span class="built_in">cin</span>, str);</span><br><span class="line">    <span class="keyword">while</span>(str.size() % N != <span class="number">0</span>)</span><br><span class="line">        str += <span class="string">&quot; &quot;</span>;   <span class="comment">//使str内的字符数是N的倍数</span></span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; N; i++)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">int</span> j = str.size() / N<span class="number">-1</span>;</span><br><span class="line">        <span class="keyword">while</span>(j &gt;= <span class="number">0</span>)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="built_in">cout</span> &lt;&lt; str[i+j*N]; <span class="comment">//根据每行的数字特征得出i+j*N</span></span><br><span class="line">            j--;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="built_in">cout</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h1 id="L1-059-敲笨钟-20-分"><a href="#L1-059-敲笨钟-20-分" class="headerlink" title="L1-059 敲笨钟 (20 分)"></a>L1-059 敲笨钟 (20 分)</h1><p>微博上有个自称“大笨钟V”的家伙，每天敲钟催促码农们爱惜身体早点睡觉。为了增加敲钟的趣味性，还会糟改几句古诗词。其糟改的方法为：去网上搜寻压“ong”韵的古诗词，把句尾的三个字换成“敲笨钟”。例如唐代诗人李贺有名句曰：“寻章摘句老雕虫，晓月当帘挂玉弓”，其中“虫”（chong）和“弓”（gong）都压了“ong”韵。于是这句诗就被糟改为“寻章摘句老雕虫，晓月当帘敲笨钟”。</p>
<p>现在给你一大堆古诗词句，要求你写个程序自动将压“ong”韵的句子糟改成“敲笨钟”。</p>
<h2 id="输入格式：-2"><a href="#输入格式：-2" class="headerlink" title="输入格式："></a>输入格式：</h2><p>输入首先在第一行给出一个不超过 20 的正整数 N。随后 N 行，每行用汉语拼音给出一句古诗词，分上下两半句，用逗号 <code>,</code> 分隔，句号 <code>.</code> 结尾。相邻两字的拼音之间用一个空格分隔。题目保证每个字的拼音不超过 6 个字符，每行字符的总长度不超过 100，并且下半句诗至少有 3 个字。</p>
<h2 id="输出格式：-2"><a href="#输出格式：-2" class="headerlink" title="输出格式："></a>输出格式：</h2><p>对每一行诗句，判断其是否压“ong”韵。即上下两句末尾的字都是“ong”结尾。如果是压此韵的，就按题面方法糟改之后输出，输出格式同输入；否则输出 <code>Skipped</code>，即跳过此句。</p>
<h2 id="输入样例：-2"><a href="#输入样例：-2" class="headerlink" title="输入样例："></a>输入样例：</h2><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">5</span><br><span class="line">xun zhang zhai ju lao diao chong, xiao yue dang lian gua yu gong.</span><br><span class="line">tian sheng wo cai bi you yong, qian jin san jin huan fu lai.</span><br><span class="line">xue zhui rou zhi leng wei rong, an xiao chen jing shu wei long.</span><br><span class="line">zuo ye xing chen zuo ye feng, hua lou xi pan gui tang dong.</span><br><span class="line">ren xian gui hua luo, ye jing chun shan kong.</span><br></pre></td></tr></table></figure>

<h2 id="输出样例：-2"><a href="#输出样例：-2" class="headerlink" title="输出样例："></a>输出样例：</h2><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">xun zhang zhai ju lao diao chong, xiao yue dang lian qiao ben zhong.</span><br><span class="line">Skipped</span><br><span class="line">xue zhui rou zhi leng wei rong, an xiao chen jing qiao ben zhong.</span><br><span class="line">Skipped</span><br><span class="line">Skipped</span><br></pre></td></tr></table></figure>

<h2 id="解法一："><a href="#解法一：" class="headerlink" title="解法一："></a>解法一：</h2><figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;string&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> N, len, pos;</span><br><span class="line">    <span class="built_in">cin</span> &gt;&gt; N;</span><br><span class="line">    <span class="built_in">cin</span>.get();<span class="comment">//读取行末的空格，避免后续的输入错误</span></span><br><span class="line">    <span class="keyword">while</span>(N--&gt;<span class="number">0</span>)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="built_in">string</span> str;</span><br><span class="line">        getline(<span class="built_in">cin</span>, str);·</span><br><span class="line">        len = str.size();</span><br><span class="line">        pos = str.find(<span class="string">&quot;,&quot;</span>);<span class="comment">//保留逗号的位置，以便查找到前半句的ong</span></span><br><span class="line">        <span class="keyword">if</span>(pos &gt;= <span class="number">3</span> &amp;&amp; str.substr(pos<span class="number">-3</span>, <span class="number">3</span>) == <span class="string">&quot;ong&quot;</span> &amp;&amp; str.substr(len<span class="number">-4</span>, <span class="number">3</span>) == <span class="string">&quot;ong&quot;</span>)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="built_in">string</span> substr = str;</span><br><span class="line">            <span class="keyword">int</span> pos2;<span class="comment">//确定倒数第三个空格的位置</span></span><br><span class="line">            <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; <span class="number">3</span>; i++)</span><br><span class="line">            &#123;</span><br><span class="line">    	        pos2 = substr.rfind(<span class="string">&quot; &quot;</span>);</span><br><span class="line">    	        substr = str.substr(<span class="number">0</span>, pos2);</span><br><span class="line">	        &#125;  <span class="comment">//分开输出</span></span><br><span class="line">            <span class="built_in">cout</span> &lt;&lt; str.substr(<span class="number">0</span>, pos2+<span class="number">1</span>) &lt;&lt; <span class="string">&quot;qiao ben zhong.&quot;</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">else</span></span><br><span class="line">            <span class="built_in">cout</span> &lt;&lt; <span class="string">&quot;Skipped&quot;</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="解法二："><a href="#解法二：" class="headerlink" title="解法二："></a>解法二：</h2><figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;string&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> N;</span><br><span class="line">    <span class="built_in">cin</span> &gt;&gt; N;</span><br><span class="line">    <span class="built_in">cin</span>.get();<span class="comment">//读取行末的空格，避免后续的输入错误</span></span><br><span class="line">    <span class="keyword">while</span>(N--&gt;<span class="number">0</span>)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="built_in">string</span> str;</span><br><span class="line">        getline(<span class="built_in">cin</span>, str);</span><br><span class="line">        <span class="keyword">if</span>(str.find(<span class="string">&quot;ong,&quot;</span>) != str.npos &amp;&amp; str.rfind(<span class="string">&quot;ong.&quot;</span>) != str.npos)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="built_in">string</span> substr = str;</span><br><span class="line">            <span class="keyword">int</span> pos;<span class="comment">//确定倒数第三个空格的位置</span></span><br><span class="line">            <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; <span class="number">3</span>; i++)</span><br><span class="line">            &#123;</span><br><span class="line">    	        pos = substr.rfind(<span class="string">&quot; &quot;</span>);</span><br><span class="line">    	        substr = str.substr(<span class="number">0</span>, pos);</span><br><span class="line">	        &#125;</span><br><span class="line">            <span class="built_in">cout</span> &lt;&lt; str.substr(<span class="number">0</span>, pos+<span class="number">1</span>) &lt;&lt; <span class="string">&quot;qiao ben zhong.&quot;</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">else</span></span><br><span class="line">            <span class="built_in">cout</span> &lt;&lt; <span class="string">&quot;Skipped&quot;</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

]]></content>
      <categories>
        <category>天梯赛</category>
      </categories>
      <tags>
        <tag>C++</tag>
        <tag>算法</tag>
      </tags>
  </entry>
</search>
