<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title>Git配置</title>
    <url>/2021/04/28/Git%E9%85%8D%E7%BD%AE/</url>
    <content><![CDATA[<p>最早接触Git是用来搭建博客，也就是现在看到的这个界面。git bash给我的第一感觉就是可以用linux的命令来对windows进行一些操作，十分便捷。本文将记录git相关知识。</p>
<p>首先，<strong>Git是目前世界上最先进的分布式版本控制系统。</strong></p>
<a id="more"></a>

<h1 id="版本控制工具"><a href="#版本控制工具" class="headerlink" title="版本控制工具"></a>版本控制工具</h1><p>大致分为3种</p>
<h2 id="本地版本控制"><a href="#本地版本控制" class="headerlink" title="本地版本控制"></a>本地版本控制</h2><p><img src="/2021/04/28/Git%E9%85%8D%E7%BD%AE/capture_20210428223831633.bmp" alt="图片1"></p>
<h2 id="集中版本控制-SVN"><a href="#集中版本控制-SVN" class="headerlink" title="集中版本控制  SVN"></a>集中版本控制  SVN</h2><p><img src="/2021/04/28/Git%E9%85%8D%E7%BD%AE/capture_20210428223840342.bmp" alt="图片2"></p>
<h2 id="分布式版本控制-Git"><a href="#分布式版本控制-Git" class="headerlink" title="分布式版本控制 Git"></a>分布式版本控制 Git</h2><p><img src="/2021/04/28/Git%E9%85%8D%E7%BD%AE/capture_20210428223850663.bmp" alt="图片3"></p>
<h1 id="Git环境配置"><a href="#Git环境配置" class="headerlink" title="Git环境配置"></a>Git环境配置</h1><p>软件的下载这里不再赘述，主要记录关键的几步。所有的这些修改可以在如下目录中找到</p>
<p>1）Git\etc\gitconfig  ：Git 安装目录下的 gitconfig   –system 系统级</p>
<p>2）C:\Users\huawei\ .gitconfig   只适用于当前登录用户的配置  –global 全局</p>
<h2 id="设置用户名与邮箱"><a href="#设置用户名与邮箱" class="headerlink" title="设置用户名与邮箱"></a>设置用户名与邮箱</h2><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">git config --global user.name <span class="string">&quot;CodeSlogan&quot;</span>  <span class="comment">#名称</span></span><br><span class="line">git config --global user.email mrchen40@163.com   <span class="comment">#邮箱</span></span><br></pre></td></tr></table></figure>

<h2 id="SSH公钥"><a href="#SSH公钥" class="headerlink" title="SSH公钥"></a>SSH公钥</h2><p>这里我解释一下这个公钥和Git之间的关系。每台电脑上都可以安装git，从而产生对应的公钥。</p>
<p>gitee/github接收从git提交的项目代码，那问题就来了，如何把git和gitee/github连接起来呢？</p>
<p>就是靠这个公钥。公钥先由本地git产生，然后再将公钥信息提交到码云SSH中，便可实现连接</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 通过ssh-keygen命令生成公钥</span></span><br><span class="line"><span class="comment"># 进入 C:\Users\huawei\.ssh 目录可查看对应的公钥</span></span><br></pre></td></tr></table></figure>

<p><img src="/2021/04/28/Git%E9%85%8D%E7%BD%AE/capture_20210428223930345.bmp" alt="图片4"></p>
<p><img src="/2021/04/28/Git%E9%85%8D%E7%BD%AE/image1.bmp" alt="image1"></p>
<h1 id="Git的工作流程"><a href="#Git的工作流程" class="headerlink" title="Git的工作流程"></a>Git的工作流程</h1><p><img src="/2021/04/28/Git%E9%85%8D%E7%BD%AE/capture_20210428223915568.bmp" alt="图片"></p>
<h1 id="致谢"><a href="#致谢" class="headerlink" title="致谢"></a>致谢</h1><p>狂神说</p>
]]></content>
      <tags>
        <tag>git</tag>
        <tag>工具</tag>
      </tags>
  </entry>
  <entry>
    <title>ML笔记</title>
    <url>/2021/09/20/2021ML%E7%AC%94%E8%AE%B0/</url>
    <content><![CDATA[<p>大三时正式开始接触AI机器学习方面的内容，希望能为以后研究生方向铺路</p>
<h1 id="1-Regression"><a href="#1-Regression" class="headerlink" title="1. Regression"></a>1. Regression</h1><p>如何开始一个深度学习？</p>
<ol>
<li><p>Function with unknown parameters</p>
<p>w and b are unknown parameters</p>
<p>w -&gt; weight               b-&gt;bias</p>
</li>
<li><p>Define loss from training data</p>
</li>
<li><p>Optimization</p>
<a id="more"></a>

<p>梯度下降，算积分，使得Loss趋近于最小</p>
<p><img src="/2021/09/20/2021ML%E7%AC%94%E8%AE%B0/p0.png" alt="image1"></p>
</li>
</ol>
<p>​                                                                    可反复增加层数，来达到建立深度神经网络的目的</p>
<p><img src="/2021/09/20/2021ML%E7%AC%94%E8%AE%B0/p1.png" alt="image2"></p>
<h1 id="2-Classification"><a href="#2-Classification" class="headerlink" title="2. Classification"></a>2. Classification</h1><p>模型无法训练起来的原因：</p>
<ul>
<li><p>model bias</p>
<p>参数不够，如同大海捞针，针却不在海里</p>
</li>
<li><p>optimization issue</p>
<p>梯度下降却无法得到最优解，如同大海捞针，方法不好捞不到针</p>
</li>
</ul>
<p>解决方法：</p>
<ol>
<li>比较不同的模型</li>
<li>从浅的网络或一些简单的模型开始优化</li>
<li>如果运用了深度网络，loss却不如其它简单模型来得好，那么可以归结于optimization issue，如下图所示：</li>
</ol>
<p><img src="/2021/09/20/2021ML%E7%AC%94%E8%AE%B0/p3.png" alt="image3"></p>
<h2 id="General-Guide"><a href="#General-Guide" class="headerlink" title="General Guide"></a>General Guide</h2><p><img src="/2021/09/20/2021ML%E7%AC%94%E8%AE%B0/p4.png" alt="image4"></p>
<p>首先判断在训练数据上的损失，在保证小的情况下再判断测试数据的损失</p>
<h2 id="2-1-局部最小值与鞍点"><a href="#2-1-局部最小值与鞍点" class="headerlink" title="2.1 局部最小值与鞍点"></a>2.1 局部最小值与鞍点</h2><p>local minima and saddle point</p>
<h3 id="Hessian"><a href="#Hessian" class="headerlink" title="Hessian"></a>Hessian</h3><p><img src="/2021/09/20/2021ML%E7%AC%94%E8%AE%B0/p2.png" alt="image5"></p>
<p>在梯度为0的情况下，计算L()，以此判断鞍点与局部最小</p>
<p>求二次偏导，构成<strong>hessian matrix</strong>，若此时特征值有正有负，则这个点为鞍点</p>
<p>选取特征值为负所对应的特征向量u</p>
<p>uT<em>H</em>u</p>
<p>用这种方法可逃离鞍点，降低loss</p>
<h2 id="2-2-批次与动量"><a href="#2-2-批次与动量" class="headerlink" title="2.2 批次与动量"></a>2.2 批次与动量</h2><p>batch and momentum</p>
<p>结论：</p>
<ul>
<li>small batch size has better performance </li>
<li>Noisy update is better for training</li>
</ul>
<h3 id="Small-Batch-vs-Large-Batch"><a href="#Small-Batch-vs-Large-Batch" class="headerlink" title="Small Batch vs Large Batch"></a>Small Batch vs Large Batch</h3><p><img src="/2021/09/20/2021ML%E7%AC%94%E8%AE%B0/p5.png" alt="image6"></p>
<p>batch size 代表将训练资料分成多少块，每块的大小即为Batch</p>
<ul>
<li><p>在没有平行计算时，小的batch自然比大的batch计算的要快，这就好比计算10道数学题和计算100道数学题之间的区别</p>
</li>
<li><p>有平行计算时，由于batch中的资料是同时开始计算，所花费的时间等同于计算1道数学题的时间</p>
</li>
<li><p>一次epoch代表利用所有分好的batches进行训练，每个batch内的计算是基于平行计算，因此，如果batch分的小，那么计算次数就多，计算速度就慢；反之速度就快</p>
</li>
<li><p>noisy的数据有利于训练</p>
</li>
<li><p>small batch有助于跳出局部最优解</p>
</li>
</ul>
<hr>
<p>未完待续……</p>
<h1 id="参考资料"><a href="#参考资料" class="headerlink" title="参考资料"></a>参考资料</h1><ol>
<li><p><a href="https://www.bilibili.com/video/BV1Wv411h7kN?p=12">李宏毅2021机器学习</a></p>
</li>
<li><p>《统计学习方法》李航著，第2版，北京：清华大学出版社，2019</p>
</li>
</ol>
]]></content>
      <categories>
        <category>ML_DL</category>
      </categories>
      <tags>
        <tag>ML</tag>
      </tags>
  </entry>
  <entry>
    <title>论文阅读Gaussian Embedding</title>
    <url>/2021/10/10/Gaussian%20Embedding/</url>
    <content><![CDATA[<p><img src="https://img-blog.csdnimg.cn/bab62afe3dfe480ba248078fd7456813.png?x-oss-process=image/watermark,type_ZHJvaWRzYW5zZmFsbGJhY2s,shadow_50,text_Q1NETiBAQ29kZVNsb2dhbg==,size_20,color_FFFFFF,t_70,g_se,x_16#pic_center" alt="在这里插入图片描述"></p>
<h1 id="1-前驱知识"><a href="#1-前驱知识" class="headerlink" title="1. 前驱知识"></a>1. 前驱知识</h1><h2 id="transE"><a href="#transE" class="headerlink" title="transE"></a>transE</h2><p>TransE [4] represents a relation as a vector r indicating <strong>the semantic translation</strong> from the head entity h to the tail entity t, aiming to satisfy the equation <strong>t - h≈ r</strong>（向量） when triplet (h, r, t) holds.</p>
<p><img src="https://img-blog.csdnimg.cn/819d0f5e44f3493a8084132a703bdfa2.png#pic_center" alt="在这里插入图片描述"></p>
<p>这个模型的不足之处在于</p>
<p>consider a one-to-many relation r with multiple tail entities ti satisfying <strong>h + r ≈ ti</strong> for ∀i ∈ {1, …,m}, (h, r, ti) ∈ KG, and it outputs invalid representations (t1 =…= tm) for distinguishing entities.</p>
<p>在一对多的关系中，一个实体可能会通过一个关系对应N个实体，会造成歧义</p>
<h1 id="2-高斯分布"><a href="#2-高斯分布" class="headerlink" title="2. 高斯分布"></a>2. 高斯分布</h1><p>期望用于表示 实体和关系的位置</p>
<p>协方差矩阵用于表示 实体和关系间的（不）确定性</p>
<h1 id="3-结论性概念"><a href="#3-结论性概念" class="headerlink" title="3. 结论性概念"></a>3. 结论性概念</h1><ul>
<li>确定性：一个关系中所包含的信息量的多少。一个关系所包含的信息熵越高，它的确定性就越大。例如知道希拉里的配偶是克林顿就比知道她的国籍是美国，关系的确定性来得高</li>
<li>一个实体几乎没有包含三元组，具有更高的不确定性</li>
<li>一个关系连接多个三元组，那么它也有着更高的不确定性</li>
<li>为人所熟知的实体有着更多的关系以及事实</li>
<li>不同的关系所包含的实体数量的不同</li>
<li>高频出现的关系连接着更多的实体对</li>
<li>不同实体和关系的不确定性的变化是非常大的</li>
</ul>
<h1 id="4-KG2E"><a href="#4-KG2E" class="headerlink" title="4. KG2E"></a>4. KG2E</h1><p>This name has two meanings. </p>
<p>The first indicates mapping Knowledge Graph to Embedding </p>
<p>and the second indicates the representation of a KG with Gaussian Embedding.</p>
<p>一对实体关系对应一个多维的高斯分布</p>
<p>双得分函数</p>
<ul>
<li>两种概率分布（实体对的分布、关系的分布）</li>
<li>基于期望似然的评分函数来检验非对称测度和对称测度的不同性能。</li>
</ul>
<h1 id="5-Qualitative-Analysis"><a href="#5-Qualitative-Analysis" class="headerlink" title="5. Qualitative Analysis"></a>5. Qualitative Analysis</h1><p>对知识图谱的不确定性做一个量化分析</p>
<p>不确定性越大，协方差越大</p>
<p>对了测量关系的不确定性，we measure the (log) determinant and trace of covariance for 13 relations</p>
<ul>
<li>协方差可以很好地对不确定性进行建模</li>
<li>关系越复杂（1对多，多对1）， 不确定越高</li>
<li>头尾实体越不平衡，不确定性越大</li>
</ul>
<h1 id="6-Link-Prediction"><a href="#6-Link-Prediction" class="headerlink" title="6. Link Prediction"></a>6. Link Prediction</h1><p>（实体1，关系，实体2）</p>
<p>均值向量µ和协方差矩阵Σ表示高斯分布对应的嵌入表示，E和R分别为KGs中的实体集和关系集。</p>
<p>能量函数 Eθ(x)，x为输入样本，θ为参数</p>
<p>通过学习，优化参数，使得正向样本的得分大于负面样本</p>
<hr>
<p>实体概率分布 Pe ∼ N(µh − µt,Σh +Σt)</p>
<p>关系概率分布 Pr ∼ N(µr,Σr)</p>
<p>最关键一步是，测量以上两者的相似性</p>
<h2 id="损失函数"><a href="#损失函数" class="headerlink" title="损失函数"></a>损失函数</h2><p><img src="https://img-blog.csdnimg.cn/6ec7c38b5b6e41a783e76309305a7cc7.png#pic_center" alt="在这里插入图片描述"></p>
<p>目标：最小化margin-based ranking loss</p>
<p>均匀分布初始化</p>
<p>[x]+，代表取x和0的最大值</p>
<p>γ，正负三元组的界限</p>
<p>E(h, r, t)，能量方程，有两种形式</p>
<p>不对称</p>
<p><img src="https://img-blog.csdnimg.cn/f202db4f1f654e599654e6fc3770b323.png?x-oss-process=image/watermark,type_ZHJvaWRzYW5zZmFsbGJhY2s,shadow_50,text_Q1NETiBAQ29kZVNsb2dhbg==,size_20,color_FFFFFF,t_70,g_se,x_16#pic_center" alt="在这里插入图片描述"></p>
<p>对称<br><img src="https://img-blog.csdnimg.cn/fc0c8c2623cc49e6bb36481415174d74.png?x-oss-process=image/watermark,type_ZHJvaWRzYW5zZmFsbGJhY2s,shadow_50,text_Q1NETiBAQ29kZVNsb2dhbg==,size_20,color_FFFFFF,t_70,g_se,x_16#pic_center" alt="在这里插入图片描述"></p>
<p>Γ，正向三元组样本的集合</p>
<p>Γ’，负向三元组的集合。通过随机交换头尾实体，来生成负向三元组</p>
<p><a href="https://blog.csdn.net/summer_rain18/article/details/86116131">负样本参考资料</a></p>
<p><strong>unif</strong>等概率替换头实体或尾实体</p>
<p><strong>bern</strong>根据bernoulli(伯努利)分布选择替换头实体还是尾实体</p>
<hr>
<ol>
<li>所有实体关系的高斯嵌入首先通过均匀分布初始化</li>
<li>算法的每次迭代中，先从已观测到的三元组中抽取一个batch，并使用<code>unif</code>或<code>bern</code>创建与之相关的负样本</li>
<li>利用随机梯度下降SGD，使margin-based ranking loss最小</li>
</ol>
<h2 id="结论"><a href="#结论" class="headerlink" title="结论"></a>结论</h2><ul>
<li>高斯分布的协方差可以很好地对关系的不确定性进行建模</li>
<li>有复杂语义的关系具有更大的不确定性</li>
<li>头尾实体越不平衡，不确定性越大</li>
<li>不对称能量方程更适合于知识图谱的高斯分布表示 </li>
<li>bern抽样策略表现良好</li>
</ul>
<h2 id="Metric"><a href="#Metric" class="headerlink" title="Metric"></a>Metric</h2><h3 id="hit-10"><a href="#hit-10" class="headerlink" title="hit@10"></a>hit@10</h3><p>我们从第一个开始遍历，看从第一个到第十个是否能够遇到真实的实体</p>
<p>每个testing triple正确答案是否排在序列的前十，如果在的话就计数+1</p>
<p>最终 排在前十的个数/总个数  就是Hit@10</p>
<p><img src="https://img-blog.csdnimg.cn/e11fba9b991d4048938cb9d7e45683f7.png#pic_center" alt="在这里插入图片描述"></p>
<p>这里的值就是百分比，百分比越高，代表模型的效果越好</p>
<p>模型效果与<code>Hits@10</code>成正比</p>
<h3 id="mean-rank"><a href="#mean-rank" class="headerlink" title="mean rank"></a>mean rank</h3><p>计算在测试集里，平均到第多少个才能匹配到正确的结果</p>
<p><img src="https://img-blog.csdnimg.cn/c179e11789384940bd7f10fd64559ebd.png#pic_center" alt="在这里插入图片描述"></p>
<p>因此，我们希望mean rank得到的值越小越好</p>
<p>当值越小时，可以看出我们基于此模型得出的排名是准确的</p>
<p><img src="https://img-blog.csdnimg.cn/8ba3468f8b444f9f89d983df5d10a738.png#pic_center" alt="在这里插入图片描述"></p>
<p>WN18中，mean rank unstructured transE transR transH KG2E表现都不错， 但是大多数模型在hits@10表现不够好</p>
<p>在hits@10中，KG2E_KL比所有线性模型都做的好，但在mean rank中表现一般。究其原因：</p>
<ul>
<li>WN18数据库中，关系数量太少，单一的方法可以判断出正确的三元组，但无法将其排到很高的位次</li>
<li>mean rank极易被具有很低位次且难以控制的三元组减少</li>
</ul>
<p>FB15K中，KG2E_KL方法完成了通杀，两种衡量标准中均表现不错</p>
<p>因为FB15K的差异密度远大于WN18，所以我们可以假定，不确定差异更大，基于密度的嵌入方法更擅长于此类语料库</p>
<h1 id="7-Triplet-Classification"><a href="#7-Triplet-Classification" class="headerlink" title="7. Triplet Classification"></a>7. Triplet Classification</h1><p>三元组的二分类问题，用来判断一个三元组正确与否</p>
<h2 id="evaluation-protocol"><a href="#evaluation-protocol" class="headerlink" title="evaluation protocol"></a>evaluation protocol</h2><blockquote>
<p>三元组分类方法 </p>
</blockquote>
<p>对于每一个三元组，通过能量方程计算其不相似得分，如若低于特定关系阈值，则被标记为正样本。</p>
<h2 id="implement"><a href="#implement" class="headerlink" title="implement"></a>implement</h2><p>learning rate α</p>
<p>the margin γ</p>
<p>dimension k</p>
<p>the batch size B</p>
<h2 id="result"><a href="#result" class="headerlink" title="result"></a>result</h2><p><img src="https://img-blog.csdnimg.cn/97cec8f8c822473a81287193011af330.png?x-oss-process=image/watermark,type_ZHJvaWRzYW5zZmFsbGJhY2s,shadow_50,text_Q1NETiBAQ29kZVNsb2dhbg==,size_20,color_FFFFFF,t_70,g_se,x_16#pic_center" alt="在这里插入图片描述"></p>
<h1 id="参考资料"><a href="#参考资料" class="headerlink" title="参考资料"></a>参考资料</h1><p>Learning to Represent Knowledge Graphs with Gaussian Embedding</p>
<p>Shizhu He, Kang Liu, Guoliang Ji and Jun Zhao National Laboratory of Pattern Recognition Institute of Automation, Chinese Academy of Sciences, Beijing, 100190, China{shizhu.he, kliu, guoliang.ji, jzhao}@nlpr.ia.ac.cn</p>
]]></content>
      <categories>
        <category>KG</category>
      </categories>
      <tags>
        <tag>ML</tag>
      </tags>
  </entry>
  <entry>
    <title>HTML5笔记</title>
    <url>/2021/09/27/HTML5%E9%87%8D%E7%82%B9/</url>
    <content><![CDATA[<h1 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h1><p>事先声明，本文是以Java后端开发的角度来学习HTML，并没有像前端那么细致。重点记录的是表单的使用</p>
<h1 id="1-知识点框架图"><a href="#1-知识点框架图" class="headerlink" title="1. 知识点框架图"></a>1. 知识点框架图</h1><p><img src="https://img-blog.csdnimg.cn/7015119a17b649f298bec1f9d2537532.png?x-oss-process=image/watermark,type_ZHJvaWRzYW5zZmFsbGJhY2s,shadow_50,text_Q1NETiBAQ29kZVNsb2dhbg==,size_20,color_FFFFFF,t_70,g_se,x_16#pic_center" alt="HTML总结"></p>
<h1 id="2-表单标签模板"><a href="#2-表单标签模板" class="headerlink" title="2. 表单标签模板"></a>2. 表单标签模板</h1><figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">form</span> <span class="attr">action</span>=<span class="string">&quot;1.我的第一个网页.html&quot;</span> <span class="attr">method</span>=<span class="string">&quot;get&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">p</span>&gt;</span>用户名 <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;text&quot;</span> <span class="attr">name</span>=<span class="string">&quot;username&quot;</span> <span class="attr">placeholder</span>=<span class="string">&quot;请输入用户名&quot;</span> <span class="attr">required</span>&gt;</span><span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- 密码输入框input type=&quot;password&quot;   --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">p</span>&gt;</span>密码 <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;password&quot;</span> <span class="attr">name</span>=<span class="string">&quot;pwd&quot;</span> <span class="attr">readonly</span>&gt;</span><span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">form</span>&gt;</span></span><br></pre></td></tr></table></figure>
<p>表单的创建关键词为<code>form</code>，action代表所要跳转的网页，method表示采用的提交方法</p>
<p><img src="https://img-blog.csdnimg.cn/21e3cf4b8abd48d1830d0ae42d50eb88.png#pic_center" alt="在这里插入图片描述"><br>每条语句的基本格式为<code>&lt;p&gt;</code>包含<code>&lt;input&gt;</code>，其中<code>type</code>表示表单的类型，此处text表示文本框，password表示密码框（输入时屏幕显示为*）。<br><code>name</code>关键字强行建议在每条input语句中加上！！！因为其代表着所要提交信息的名称</p>
<ul>
<li>placeholder 提示信息，这里为“请输入用户名”</li>
<li>readonly 代表只读，将无法在密码框中输入任何信息</li>
<li>required 代表非空，这里用户名必须填写，否则将无法提交</li>
</ul>
<h2 id="2-1-get-post"><a href="#2-1-get-post" class="headerlink" title="2.1 get/post"></a>2.1 get/post</h2><table>
<thead>
<tr>
<th></th>
<th>特点</th>
</tr>
</thead>
<tbody><tr>
<td>get</td>
<td>不安全，不能提交大文件，但高效，提交信息会显示在url里</td>
</tr>
<tr>
<td>post</td>
<td>安全</td>
</tr>
</tbody></table>
<h1 id="3-表单"><a href="#3-表单" class="headerlink" title="3. 表单"></a>3. 表单</h1><h2 id="3-1-单选框与多选框"><a href="#3-1-单选框与多选框" class="headerlink" title="3.1 单选框与多选框"></a>3.1 单选框与多选框</h2><figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">p</span>&gt;</span>性别:</span><br><span class="line">    <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;radio&quot;</span> <span class="attr">value</span>=<span class="string">&quot;boy&quot;</span> <span class="attr">name</span>=<span class="string">&quot;sex&quot;</span>/&gt;</span>男</span><br><span class="line">    <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;radio&quot;</span> <span class="attr">value</span>=<span class="string">&quot;girl&quot;</span> <span class="attr">name</span>=<span class="string">&quot;sex&quot;</span>/&gt;</span>女</span><br><span class="line"><span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">p</span>&gt;</span>爱好：</span><br><span class="line">    <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;checkbox&quot;</span> <span class="attr">value</span>=<span class="string">&quot;sleep&quot;</span> <span class="attr">name</span>=<span class="string">&quot;hobby&quot;</span>&gt;</span>睡觉</span><br><span class="line">    <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;checkbox&quot;</span> <span class="attr">value</span>=<span class="string">&quot;code&quot;</span> <span class="attr">name</span>=<span class="string">&quot;hobby&quot;</span>&gt;</span>敲代码</span><br><span class="line">    <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;checkbox&quot;</span> <span class="attr">value</span>=<span class="string">&quot;eat&quot;</span> <span class="attr">name</span>=<span class="string">&quot;hobby&quot;</span>&gt;</span>吃饭</span><br><span class="line">    <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;checkbox&quot;</span> <span class="attr">value</span>=<span class="string">&quot;run&quot;</span> <span class="attr">name</span>=<span class="string">&quot;hobby&quot;</span>&gt;</span>跑步</span><br><span class="line"><span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p><img src="https://img-blog.csdnimg.cn/a5d7446d87ef404f9a111b08ffa5b64c.png#pic_center" alt="在这里插入图片描述"><br>所见即所得，重点在体会<code>name</code>和 <code>value</code>的区别。举个例子，如果选择性别男，然后提交。url中就会显示 <em>name=boy</em> </p>
<h2 id="3-2-下拉可选"><a href="#3-2-下拉可选" class="headerlink" title="3.2 下拉可选"></a>3.2 下拉可选</h2><figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">p</span>&gt;</span>国籍：</span><br><span class="line">    <span class="tag">&lt;<span class="name">select</span> <span class="attr">name</span>=<span class="string">&quot;country&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">option</span> <span class="attr">value</span>=<span class="string">&quot;CHINA&quot;</span>&gt;</span>中国<span class="tag">&lt;/<span class="name">option</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">option</span> <span class="attr">value</span>=<span class="string">&quot;US&quot;</span>&gt;</span>美国<span class="tag">&lt;/<span class="name">option</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">option</span> <span class="attr">value</span>=<span class="string">&quot;GERMANY&quot;</span>&gt;</span>德国<span class="tag">&lt;/<span class="name">option</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">select</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p><img src="https://img-blog.csdnimg.cn/0976f01680b8456bb5b973888139c80b.png#pic_center" alt="在这里插入图片描述"><br>如图即为所求</p>
<h2 id="3-3-按钮"><a href="#3-3-按钮" class="headerlink" title="3.3 按钮"></a>3.3 按钮</h2><figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">p</span>&gt;</span>按钮：</span><br><span class="line">        <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;button&quot;</span> <span class="attr">name</span>=<span class="string">&quot;btn1&quot;</span> <span class="attr">value</span>=<span class="string">&quot;变长&quot;</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!--        &lt;input type=&quot;image&quot; src=&quot;../resources/image/12.png&quot;&gt;--&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p><img src="https://img-blog.csdnimg.cn/0ab2b462ca7f49b7b79ae27e15e9d54c.png#pic_center" alt="在这里插入图片描述"></p>
<p>可以通过在<code>value</code>里设置值，来对应到按钮上</p>
<h2 id="3-4-文件上传"><a href="#3-4-文件上传" class="headerlink" title="3.4 文件上传"></a>3.4 文件上传</h2><figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">p</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;file&quot;</span> <span class="attr">name</span>=<span class="string">&quot;files&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;button&quot;</span> <span class="attr">name</span>=<span class="string">&quot;upload&quot;</span> <span class="attr">value</span>=<span class="string">&quot;上传&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br></pre></td></tr></table></figure>


<p><img src="https://img-blog.csdnimg.cn/c028c05871194ae9954e3e85f72b117a.png?x-oss-process=image/watermark,type_ZHJvaWRzYW5zZmFsbGJhY2s,shadow_50,text_Q1NETiBAQ29kZVNsb2dhbg==,size_19,color_FFFFFF,t_70,g_se,x_16#pic_center" alt="在这里插入图片描述"></p>
<h2 id="3-5-大文本域"><a href="#3-5-大文本域" class="headerlink" title="3.5 大文本域"></a>3.5 大文本域</h2><figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">p</span>&gt;</span>反馈：</span><br><span class="line">        <span class="tag">&lt;<span class="name">textarea</span> <span class="attr">name</span>=<span class="string">&quot;textarea&quot;</span> <span class="attr">cols</span>=<span class="string">&quot;50&quot;</span> <span class="attr">rows</span>=<span class="string">&quot;10&quot;</span>&gt;</span>请输入<span class="tag">&lt;/<span class="name">textarea</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br></pre></td></tr></table></figure>
<p><img src="https://img-blog.csdnimg.cn/ccdefe40beb84732b45fae6190548d21.png?x-oss-process=image/watermark,type_ZHJvaWRzYW5zZmFsbGJhY2s,shadow_50,text_Q1NETiBAQ29kZVNsb2dhbg==,size_20,color_FFFFFF,t_70,g_se,x_16#pic_center" alt="在这里插入图片描述"></p>
<h2 id="3-6-提交与重置按钮"><a href="#3-6-提交与重置按钮" class="headerlink" title="3.6 提交与重置按钮"></a>3.6 提交与重置按钮</h2><figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">p</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;submit&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;reset&quot;</span> <span class="attr">value</span>=<span class="string">&quot;重置内容&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br></pre></td></tr></table></figure>
<p><img src="https://img-blog.csdnimg.cn/f4453365553642608980919b5d0b4d97.png#pic_center" alt="在这里插入图片描述"></p>
<h2 id="3-7-滑块"><a href="#3-7-滑块" class="headerlink" title="3.7 滑块"></a>3.7 滑块</h2><figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">p</span>&gt;</span>音量：</span><br><span class="line">        <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;range&quot;</span> <span class="attr">name</span>=<span class="string">&quot;voice&quot;</span> <span class="attr">max</span>=<span class="string">&quot;100&quot;</span> <span class="attr">min</span>=<span class="string">&quot;0&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br></pre></td></tr></table></figure>
<p><img src="https://img-blog.csdnimg.cn/04bad82d044c44a3b03ce9617b1a4f92.png#pic_center" alt="在这里插入图片描述"></p>
<h2 id="3-8-数字"><a href="#3-8-数字" class="headerlink" title="3.8 数字"></a>3.8 数字</h2><figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">p</span>&gt;</span>数字：</span><br><span class="line">        <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;number&quot;</span> <span class="attr">name</span>=<span class="string">&quot;num&quot;</span> <span class="attr">max</span>=<span class="string">&quot;100&quot;</span> <span class="attr">min</span>=<span class="string">&quot;1&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br></pre></td></tr></table></figure>
<p><img src="https://img-blog.csdnimg.cn/5accf1dacdbe42adbd0c7aa4b2217c98.png#pic_center" alt="在这里插入图片描述"><br>可以通过<code>step</code>改变每点击一次变化的步长</p>
<h2 id="3-9-搜索框"><a href="#3-9-搜索框" class="headerlink" title="3.9 搜索框"></a>3.9 搜索框</h2><figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">p</span>&gt;</span>搜索：</span><br><span class="line">        <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;search&quot;</span> <span class="attr">name</span>=<span class="string">&quot;search&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br></pre></td></tr></table></figure>
<p><img src="https://img-blog.csdnimg.cn/d2e3d020e2414df197f3104e6698665d.png#pic_center" alt="在这里插入图片描述"></p>
<br>
将HTML标签与图中一一对应，就能很快明白其使用方法，无须强行记忆。

<h1 id="参考资料"><a href="#参考资料" class="headerlink" title="参考资料"></a>参考资料</h1><p><a href="https://www.bilibili.com/video/BV1x4411V75C?p=12">【狂神说Java】HTML5完整教学通俗易懂</a></p>
]]></content>
      <categories>
        <category>web</category>
      </categories>
      <tags>
        <tag>web</tag>
      </tags>
  </entry>
  <entry>
    <title>Java3D安装教程</title>
    <url>/2021/08/31/Java3D%E5%AE%89%E8%A3%85(idea%E7%89%88)/</url>
    <content><![CDATA[<p>﻿正值学习计算机图形学期间，学校选用的是比较冷门的Java3D，网上的安装教程也比较少，安装教程仅供参考。</p>
<h2 id="1-JDK安装"><a href="#1-JDK安装" class="headerlink" title="1. JDK安装"></a>1. JDK安装</h2><p><a href="https://www.oracle.com/java/technologies/javase-downloads.html">JDK</a> 点击下载<br>可以下载1.8或11稳定版本，这里记得要在我的电脑中配置环境，由于教程众多这里不再赘述</p>
<h2 id="2-Java-3D-1-5-1"><a href="#2-Java-3D-1-5-1" class="headerlink" title="2. Java 3D 1.5.1"></a>2. Java 3D 1.5.1</h2><p><a href="https://www.oracle.com/java/technologies/java-archive-downloads-java-client-downloads.html#java3d-1.5.1-oth-JPR">Java3d</a> 点击下载<br>根据自己的系统选取，例如本人用的是windows，则选java3d-1-5-1-windows-i586.exe（代表32位）</p>
<p>这里注意一点，<strong>JDK和Java3D的位数需相同</strong>，例如JDK用的32位，Java3D库也需32位</p>
<h2 id="3-idea的安装"><a href="#3-idea的安装" class="headerlink" title="3. idea的安装"></a>3. idea的安装</h2><p><a href="https://www.jetbrains.com/idea/download/#section=windows">idea</a> 点击下载<br>下载community版本即可，如有激活码或其它途径可下载ultimate版本</p>
<p>以上三样安装安装好之后，即可打开idea进行配置</p>
<hr>
<ul>
<li>ddl文件配置<br>将Java3D bin目录文件下的ddl文件拷贝至JDK bin目录下，否则将报异常UnsatisfiedLinkError<br><img src="https://img-blog.csdnimg.cn/a18d09f5566a41139089d644d1b65e16.png?x-oss-process=image/watermark,type_ZHJvaWRzYW5zZmFsbGJhY2s,shadow_50,text_Q1NETiBAQ29kZVNsb2dhbg==,size_20,color_FFFFFF,t_70,g_se,x_16" alt="在这里插入图片描述"></li>
</ul>
<ul>
<li><p>打开idea，选取环境，创建项目<br>右键External Libraries下的环境，打开库设置<br><img src="https://img-blog.csdnimg.cn/b5905b2f4dc64757a793c53205ce59e8.png?x-oss-process=image/watermark,type_ZHJvaWRzYW5zZmFsbGJhY2s,shadow_50,text_Q1NETiBAQ29kZVNsb2dhbg==,size_20,color_FFFFFF,t_70,g_se,x_16" alt="在这里插入图片描述"></p>
</li>
<li><p>添加jar包<br><img src="https://img-blog.csdnimg.cn/62dc4948f18b48e2b1c8fd798638048d.png?x-oss-process=image/watermark,type_ZHJvaWRzYW5zZmFsbGJhY2s,shadow_50,text_Q1NETiBAQ29kZVNsb2dhbg==,size_20,color_FFFFFF,t_70,g_se,x_16" alt="在这里插入图片描述"></p>
</li>
<li><p>找到java3d的安装位置，默认是在以下路径<br>\Java3D\1.5.1\lib\ext<br>将jar包导入即可<br>（64版本的Java安装路径可能无(x86)）<br><img src="https://img-blog.csdnimg.cn/17291c13493348de938ad5c925db2cfb.png?x-oss-process=image/watermark,type_ZHJvaWRzYW5zZmFsbGJhY2s,shadow_50,text_Q1NETiBAQ29kZVNsb2dhbg==,size_20,color_FFFFFF,t_70,g_se,x_16" alt="在这里插入图片描述"></p>
</li>
<li><p>最后用代码测试结果</p>
</li>
</ul>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.codeslogan.Test;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> com.sun.j3d.utils.universe.*;</span><br><span class="line"><span class="keyword">import</span> com.sun.j3d.utils.geometry.ColorCube;</span><br><span class="line"><span class="keyword">import</span> javax.media.j3d.*;</span><br><span class="line"><span class="keyword">import</span> javax.vecmath.*;</span><br><span class="line"><span class="keyword">import</span> java.awt.GraphicsConfiguration;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Simple Java 3D example program to display a spinning cube.</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">HelloUniverse</span> <span class="keyword">extends</span> <span class="title">javax</span>.<span class="title">swing</span>.<span class="title">JFrame</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> SimpleUniverse univ = <span class="keyword">null</span>;</span><br><span class="line">    <span class="keyword">private</span> BranchGroup scene = <span class="keyword">null</span>;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> BranchGroup <span class="title">createSceneGraph</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="comment">// Create the root of the branch graph</span></span><br><span class="line">        BranchGroup objRoot = <span class="keyword">new</span> BranchGroup();</span><br><span class="line"></span><br><span class="line">        <span class="comment">// Create the TransformGroup node and initialize it to the</span></span><br><span class="line">        <span class="comment">// identity. Enable the TRANSFORM_WRITE capability so that</span></span><br><span class="line">        <span class="comment">// our behavior code can modify it at run time. Add it to</span></span><br><span class="line">        <span class="comment">// the root of the subgraph.</span></span><br><span class="line">        TransformGroup objTrans = <span class="keyword">new</span> TransformGroup();</span><br><span class="line">        objTrans.setCapability(TransformGroup.ALLOW_TRANSFORM_WRITE);</span><br><span class="line">        objRoot.addChild(objTrans);</span><br><span class="line"></span><br><span class="line">        <span class="comment">// Create a simple Shape3D node; add it to the scene graph.</span></span><br><span class="line">        objTrans.addChild(<span class="keyword">new</span> ColorCube(<span class="number">0.4</span>));</span><br><span class="line"></span><br><span class="line">        <span class="comment">// Create a new Behavior object that will perform the</span></span><br><span class="line">        <span class="comment">// desired operation on the specified transform and add</span></span><br><span class="line">        <span class="comment">// it into the scene graph.</span></span><br><span class="line">        Transform3D yAxis = <span class="keyword">new</span> Transform3D();</span><br><span class="line">        Alpha rotationAlpha = <span class="keyword">new</span> Alpha(-<span class="number">1</span>, <span class="number">4000</span>);</span><br><span class="line"></span><br><span class="line">        RotationInterpolator rotator =</span><br><span class="line">                <span class="keyword">new</span> RotationInterpolator(rotationAlpha, objTrans, yAxis,</span><br><span class="line">                        <span class="number">0.0f</span>, (<span class="keyword">float</span>) Math.PI*<span class="number">2.0f</span>);</span><br><span class="line">        BoundingSphere bounds =</span><br><span class="line">                <span class="keyword">new</span> BoundingSphere(<span class="keyword">new</span> Point3d(<span class="number">0.0</span>,<span class="number">0.0</span>,<span class="number">0.0</span>), <span class="number">100.0</span>);</span><br><span class="line">        rotator.setSchedulingBounds(bounds);</span><br><span class="line">        objRoot.addChild(rotator);</span><br><span class="line"></span><br><span class="line">        <span class="comment">// Have Java 3D perform optimizations on this scene graph.</span></span><br><span class="line">        objRoot.compile();</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> objRoot;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">private</span> Canvas3D <span class="title">createUniverse</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="comment">// Get the preferred graphics configuration for the default screen</span></span><br><span class="line">        GraphicsConfiguration config =</span><br><span class="line">                SimpleUniverse.getPreferredConfiguration();</span><br><span class="line"></span><br><span class="line">        <span class="comment">// Create a Canvas3D using the preferred configuration</span></span><br><span class="line">        Canvas3D c = <span class="keyword">new</span> Canvas3D(config);</span><br><span class="line"></span><br><span class="line">        <span class="comment">// Create simple universe with view branch</span></span><br><span class="line">        univ = <span class="keyword">new</span> SimpleUniverse(c);</span><br><span class="line"></span><br><span class="line">        <span class="comment">// This will move the ViewPlatform back a bit so the</span></span><br><span class="line">        <span class="comment">// objects in the scene can be viewed.</span></span><br><span class="line">        univ.getViewingPlatform().setNominalViewingTransform();</span><br><span class="line"></span><br><span class="line">        <span class="comment">// Ensure at least 5 msec per frame (i.e., &lt; 200Hz)</span></span><br><span class="line">        univ.getViewer().getView().setMinimumFrameCycleTime(<span class="number">5</span>);</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> c;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * Creates new form HelloUniverse</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">HelloUniverse</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="comment">// Initialize the GUI components</span></span><br><span class="line">        initComponents();</span><br><span class="line"></span><br><span class="line">        <span class="comment">// Create Canvas3D and SimpleUniverse; add canvas to drawing panel</span></span><br><span class="line">        Canvas3D c = createUniverse();</span><br><span class="line">        drawingPanel.add(c, java.awt.BorderLayout.CENTER);</span><br><span class="line"></span><br><span class="line">        <span class="comment">// Create the content branch and add it to the universe</span></span><br><span class="line">        scene = createSceneGraph();</span><br><span class="line">        univ.addBranchGraph(scene);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// ----------------------------------------------------------------</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">/** This method is called from within the constructor to</span></span><br><span class="line"><span class="comment">     * initialize the form.</span></span><br><span class="line"><span class="comment">     * WARNING: Do NOT modify this code. The content of this method is</span></span><br><span class="line"><span class="comment">     * always regenerated by the Form Editor.</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="comment">// &lt;editor-fold defaultstate=&quot;collapsed&quot; desc=&quot; Generated Code &quot;&gt;//GEN-BEGIN:initComponents</span></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">initComponents</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        drawingPanel = <span class="keyword">new</span> javax.swing.JPanel();</span><br><span class="line"></span><br><span class="line">        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);</span><br><span class="line">        setTitle(<span class="string">&quot;HelloUniverse&quot;</span>);</span><br><span class="line">        drawingPanel.setLayout(<span class="keyword">new</span> java.awt.BorderLayout());</span><br><span class="line"></span><br><span class="line">        drawingPanel.setPreferredSize(<span class="keyword">new</span> java.awt.Dimension(<span class="number">250</span>, <span class="number">250</span>));</span><br><span class="line">        getContentPane().add(drawingPanel, java.awt.BorderLayout.CENTER);</span><br><span class="line"></span><br><span class="line">        pack();</span><br><span class="line">    &#125;<span class="comment">// &lt;/editor-fold&gt;//GEN-END:initComponents</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> args the command line arguments</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String args[])</span> </span>&#123;</span><br><span class="line">        java.awt.EventQueue.invokeLater(<span class="keyword">new</span> Runnable() &#123;</span><br><span class="line">            <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span> </span>&#123;</span><br><span class="line">                <span class="keyword">new</span> HelloUniverse().setVisible(<span class="keyword">true</span>);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// Variables declaration - do not modify//GEN-BEGIN:variables</span></span><br><span class="line">    <span class="keyword">private</span> javax.swing.JPanel drawingPanel;</span><br><span class="line">    <span class="comment">// End of variables declaration//GEN-END:variables</span></span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p><img src="https://img-blog.csdnimg.cn/16801d2d51e14c77b61470634777efb4.png?x-oss-process=image/watermark,type_ZHJvaWRzYW5zZmFsbGJhY2s,shadow_50,text_Q1NETiBAQ29kZVNsb2dhbg==,size_20,color_FFFFFF,t_70,g_se,x_16" alt="在这里插入图片描述"></p>
<ul>
<li>安装成功！！</li>
</ul>
]]></content>
      <categories>
        <category>Java</category>
      </categories>
      <tags>
        <tag>Java</tag>
      </tags>
  </entry>
  <entry>
    <title>Java上转型对象</title>
    <url>/2021/10/02/Java%E4%B8%8A%E8%BD%AC%E5%9E%8B%E5%AF%B9%E8%B1%A1/</url>
    <content><![CDATA[<h1 id="对象转换概念"><a href="#对象转换概念" class="headerlink" title="对象转换概念"></a>对象转换概念</h1><p>不同类型的基本数据类型变量之间可以进行类型转换（自动转换与强制转换），在Java中对于具有继承关系的对象类型也可以进行转换。Java允许父类类型的引用变量直接引用子类类型的对象。<br><br></p>
<h1 id="上转型对象"><a href="#上转型对象" class="headerlink" title="上转型对象"></a>上转型对象</h1><p>假设，A类是B类的父类，当用子类创建一个对象，并把这个对象的引用放到父类的对象中时，称对象a是对象b的上转型对象。</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">A a = <span class="keyword">new</span> B();</span><br></pre></td></tr></table></figure>
<br>

<h1 id="要点分析"><a href="#要点分析" class="headerlink" title="要点分析"></a>要点分析</h1><h2 id="子类新增"><a href="#子类新增" class="headerlink" title="子类新增"></a>子类新增</h2><ul>
<li>上转型对象不能访问子类新增的数据域；不能直接访问子类新增的方法（子类中定义的覆盖、隐藏方法不算新增）。只有当对象类型强制转换为子类类型，才能进行相应的调用</li>
</ul>
<p><code>Example5_10.java</code></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span>  <span class="title">Monkey</span></span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">crySpeak</span><span class="params">(String s)</span> </span>&#123;</span><br><span class="line">        System.out.println(s);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">crawl</span><span class="params">()</span></span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;crawling&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">People</span> <span class="keyword">extends</span> <span class="title">Monkey</span> </span>&#123;</span><br><span class="line">    <span class="keyword">int</span> d =<span class="number">0</span>; <span class="comment">//子类新增的数据域</span></span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">computer</span><span class="params">(<span class="keyword">int</span> a,<span class="keyword">int</span> b)</span> </span>&#123; <span class="comment">//子类新增的方法</span></span><br><span class="line">        <span class="keyword">int</span> c=a*b;</span><br><span class="line">        System.out.println(c);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">crySpeak</span><span class="params">(String s)</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;***&quot;</span>+s+<span class="string">&quot;***&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Example5_10</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String args[])</span> </span>&#123;</span><br><span class="line">        Monkey monkey = <span class="keyword">new</span> People();</span><br><span class="line">        monkey.crySpeak(<span class="string">&quot;I love this game&quot;</span>); <span class="comment">//调用子类，重写不算新增</span></span><br><span class="line">        monkey.crawl();</span><br><span class="line">        <span class="comment">//monkey.computer(10,10); //上转型后，子类新增的方法失去</span></span><br><span class="line">        <span class="comment">//System.out.println(monkey.d);//上转型后，子类新增的变量失去</span></span><br><span class="line">        People people = <span class="keyword">null</span>;</span><br><span class="line">        <span class="keyword">if</span> (monkey <span class="keyword">instanceof</span> People) </span><br><span class="line">            <span class="comment">// instanceof判断money是否为People类所创建的对象</span></span><br><span class="line">            people=(People)monkey; <span class="comment">//把上转型对象强制转化为子类的对象</span></span><br><span class="line">        people.computer(<span class="number">10</span>,<span class="number">10</span>);</span><br><span class="line">        System.out.println(people.d);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">***I love this game***</span><br><span class="line">crawling</span><br><span class="line">100</span><br><span class="line">0</span><br></pre></td></tr></table></figure>

<p>在上述的例子中，父类为<code>Monkey</code>，子类为<code>People</code>。其中，在子类中，<code>int d</code>为新增变量，<code>computer</code>为新增方法，因此上转型对象无法直接调用这两个。强制转换为子类类型后，才能正常调用。</p>
<h2 id="覆盖隐藏"><a href="#覆盖隐藏" class="headerlink" title="覆盖隐藏"></a>覆盖隐藏</h2><ul>
<li>上转型对象可以访问子类从父类继承来的数据域、方法或子类中对父类覆盖重写的<strong>实例方法</strong>，但不能直接访问子类中对父类<strong>隐藏重写</strong>的静态方法和对父类隐藏定义的数据域。</li>
<li>如果子类覆盖了父类的某个实例方法后，当用上转型对象调用这个实例方法时，一定是调用<strong>子类</strong>中的这个<strong>实例</strong>方法。</li>
<li>如果子类隐藏了父类的某个静态方法后，当用上转型对象调用这个静态方法时，一定是调用<strong>父类</strong>中的这个<strong>静态</strong>方法，而不是子类中的这个静态方法，输出的值若为静态变量也应该是父类中的静态变量。</li>
</ul>
<p><code>MethodOverride.java</code></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MethodOverride</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        Child c=<span class="keyword">new</span> Child();</span><br><span class="line">        System.out.println(c.getClassName());</span><br><span class="line">        System.out.println(<span class="string">&quot;----------------&quot;</span>);</span><br><span class="line">        Parent p=<span class="keyword">new</span> Parent();</span><br><span class="line">        System.out.println(p.getClassName());</span><br><span class="line">        System.out.println(<span class="string">&quot;----------------&quot;</span>);</span><br><span class="line">        Parent pc=<span class="keyword">new</span> Child();</span><br><span class="line">        System.out.println(pc.getClassName());</span><br><span class="line">        System.out.println(pc.getX());</span><br><span class="line">        System.out.println(pc.getZ());</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Parent</span></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> x =<span class="number">5</span>;</span><br><span class="line">    <span class="keyword">static</span> <span class="keyword">int</span> z = <span class="number">10</span>;</span><br><span class="line">    <span class="function">String <span class="title">getClassName</span><span class="params">()</span></span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;this is Parent!&quot;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">int</span>  <span class="title">getX</span><span class="params">()</span></span>&#123;</span><br><span class="line">        <span class="keyword">return</span> x;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">static</span> <span class="keyword">int</span>  <span class="title">getZ</span><span class="params">()</span></span>&#123;</span><br><span class="line">        <span class="keyword">return</span> z;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Child</span> <span class="keyword">extends</span> <span class="title">Parent</span></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> x =<span class="number">6</span>;</span><br><span class="line">    <span class="keyword">int</span> y =<span class="number">7</span>;</span><br><span class="line">    <span class="keyword">static</span> <span class="keyword">int</span> z =<span class="number">11</span>;</span><br><span class="line">    <span class="function">String <span class="title">getClassName</span><span class="params">()</span></span>&#123;</span><br><span class="line">        System.out.println(x+<span class="string">&quot; &quot;</span>+y);</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;this is Child!&quot;</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">int</span>  <span class="title">getX</span><span class="params">()</span></span>&#123;</span><br><span class="line">        <span class="keyword">return</span> x;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">static</span> <span class="keyword">int</span>  <span class="title">getZ</span><span class="params">()</span></span>&#123;</span><br><span class="line">        <span class="keyword">return</span> z;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">6 7</span><br><span class="line">this is Child!</span><br><span class="line">----------------</span><br><span class="line">this is Parent!</span><br><span class="line">----------------</span><br><span class="line">6 7</span><br><span class="line">this is Child!</span><br><span class="line">6</span><br><span class="line">10</span><br></pre></td></tr></table></figure>
<p>在上述<code>MethodOverride</code>文件中，父类为<code>Parent</code>，子类为<code>Child</code>。前两个对象为具体类的实例化，因此调用的是自己所属类的实例方法。<br>第三个为上转型对象，<code>getClassName()</code>是对父类的重写方法，因此调用的是子类的<code>getClassName()</code>，由于是子类的方法，所以方法中的x,y为间接访问数据域也为子类的。<code>getX()</code>也是一个道理。<br><code>getZ()</code>为静态方法，子类虽然对静态变量及静态方法进行了隐藏，但无法直接访问。根据静态调用看左边的原则，调用的应该是父类的<code>getZ()</code>，z值也为父类的数据域。</p>
<h2 id="数据域"><a href="#数据域" class="headerlink" title="数据域"></a>数据域</h2><ul>
<li>子类从父类继承来的方法如果没有被覆盖或隐藏，此方法中如果存在成员变量调用，则此调用是针对父类的成员变量的调用。 </li>
</ul>
<p><code>HidingDemo.java</code></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.codeslogan.inherit;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">HidingDemo</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        A  x = <span class="keyword">new</span> B();</span><br><span class="line">        System.out.println(<span class="string">&quot;(1) x.i is &quot;</span> + x.i);</span><br><span class="line">        System.out.println(<span class="string">&quot;(2) (B)x.i is &quot;</span> + ((B)x).i);</span><br><span class="line">        System.out.println(<span class="string">&quot;(3) x.j is &quot;</span> + x.j);</span><br><span class="line">        System.out.println(<span class="string">&quot;(4) ((B)x).j is &quot;</span> + ((B)x).j);</span><br><span class="line">        System.out.println(<span class="string">&quot;(5) x.m1() is &quot;</span> + x.m1());</span><br><span class="line">        System.out.println(<span class="string">&quot;(6) ((B)x).m1() is &quot;</span> + ((B)x).m1());</span><br><span class="line">        System.out.println(<span class="string">&quot;(7) x.m2() is &quot;</span> + x.m2());</span><br><span class="line">        System.out.println(<span class="string">&quot;(8) x.m3() is &quot;</span> + x.m3());</span><br><span class="line">        System.out.println(<span class="string">&quot;(9) x.z is &quot;</span> + x.z);</span><br><span class="line">        System.out.println(<span class="string">&quot;(10) x.w is &quot;</span> + x.w);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">A</span> </span>&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">int</span> i = <span class="number">1</span>;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">int</span> j = <span class="number">11</span>;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">int</span> z = <span class="number">3</span>;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">int</span> w = <span class="number">13</span>;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> String <span class="title">m1</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;A&#x27;s static m1&quot;</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">m2</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;A&#x27;s instance m2&quot;</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">m3</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;A&#x27;s instance m3&quot;</span> + j;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">B</span> <span class="keyword">extends</span> <span class="title">A</span> </span>&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">int</span> i = <span class="number">2</span>;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">int</span> j = <span class="number">12</span>;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> String <span class="title">m1</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;B&#x27;s static m1&quot;</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">m2</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;B&#x27;s instance m2&quot;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">(1) x.i is 1</span><br><span class="line">&#x2F;&#x2F;上转型对象实例数据域看父类</span><br><span class="line">(2) (B)x.i is 2</span><br><span class="line">&#x2F;&#x2F;强转后看子类</span><br><span class="line">(3) x.j is 11</span><br><span class="line">&#x2F;&#x2F;上转型对象静态数据域看父类</span><br><span class="line">(4) ((B)x).j is 12</span><br><span class="line">&#x2F;&#x2F;强转后看子类</span><br><span class="line">(5) x.m1() is A&#39;s static m1</span><br><span class="line">&#x2F;&#x2F;静态方法看父类（左）</span><br><span class="line">(6) ((B)x).m1() is B&#39;s static m1</span><br><span class="line">&#x2F;&#x2F;强转后看子类</span><br><span class="line">(7) x.m2() is B&#39;s instance m2</span><br><span class="line">&#x2F;&#x2F;实例方法重写，看子类</span><br><span class="line">(8) x.m3() is A&#39;s instance m3 11</span><br><span class="line">&#x2F;&#x2F;继承来的方法，子类没有其对应的重写，结果看父类</span><br><span class="line">&#x2F;&#x2F;若其中有涉及数据域，无论是静态数据，还是实例数据，都应该是父类的数据域</span><br><span class="line">(9) x.z is 3</span><br><span class="line">&#x2F;&#x2F;显而易见，继承而来的实例数据</span><br><span class="line">(10) x.z is 13</span><br><span class="line">&#x2F;&#x2F;继承而来的静态数据</span><br></pre></td></tr></table></figure>
<p>总结：</p>
<ol>
<li>继承而来（子类没有对其进行额外的操作），全部看父类的内容</li>
<li>强转后，无条件看强转后的内容</li>
<li>数据域默认看的是父类</li>
<li>如果调用了上转型对象调用了父类的方法，那么对应的数据，也应该是父类的数据，即使子类对变量进行了覆盖</li>
</ol>
<h2 id="不变的强转"><a href="#不变的强转" class="headerlink" title="不变的强转"></a>不变的强转</h2><p>上转型对象即使采用父类做一个强制转换，所访问到的被覆盖的实例方法依旧是子类的</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">A a = <span class="keyword">new</span> B();</span><br><span class="line">a.getX();</span><br><span class="line">((A)a).getX(); <span class="comment">//a.getX();</span></span><br></pre></td></tr></table></figure>
<p>简单来说就是，原来它的类型本来就是A，再转为A相当于没转。</p>
<p><code>TestChange.java</code></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.codeslogan.inherit;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">TestChange</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        Animal x=<span class="keyword">new</span> Tiger();</span><br><span class="line">        System.out.println(<span class="string">&quot;(1):x.news is &quot;</span>+x.news);</span><br><span class="line">        System.out.println(<span class="string">&quot;(2):((Tiger)x).news is &quot;</span>+((Tiger)x).news);</span><br><span class="line">        System.out.println(<span class="string">&quot;(3):x.smile() is &quot;</span>+x.smile());</span><br><span class="line">        System.out.println(<span class="string">&quot;(4):((Tiger)x).smile() is &quot;</span>+((Tiger)x).smile());</span><br><span class="line">        System.out.println(<span class="string">&quot;(5):((Animal)x).getNews() is &quot;</span>+((Animal)x).getNews());</span><br><span class="line">        System.out.println(<span class="string">&quot;(6):x.getNews() is &quot;</span>+x.getNews());</span><br><span class="line">        System.out.println(<span class="string">&quot;(7):x.getMessage() is &quot;</span>+x.getMessage());</span><br><span class="line">        System.out.println(<span class="string">&quot;(8):((Tiger)x).eat() is &quot;</span>+((Tiger)x).eat());</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Animal</span></span>&#123;</span><br><span class="line">    <span class="keyword">public</span> String news=<span class="string">&quot;Animal&#x27;s news&quot;</span>;</span><br><span class="line">    <span class="keyword">public</span> String message=<span class="string">&quot;Animal&#x27;s message&quot;</span>;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> String <span class="title">smile</span><span class="params">()</span></span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;smile from Animal&quot;</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">getNews</span><span class="params">()</span></span>&#123;</span><br><span class="line">        <span class="keyword">return</span> news;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">getMessage</span><span class="params">()</span></span>&#123;</span><br><span class="line">        <span class="keyword">return</span> message;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Tiger</span> <span class="keyword">extends</span> <span class="title">Animal</span></span>&#123;</span><br><span class="line">    <span class="keyword">public</span> String news=<span class="string">&quot;Tiger&#x27;s  news&quot;</span>;</span><br><span class="line">    <span class="keyword">public</span> String message=<span class="string">&quot;Tiger&#x27;s message&quot;</span>;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> String <span class="title">smile</span><span class="params">()</span></span>&#123; <span class="comment">//隐藏</span></span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;smile from Tiger&quot;</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">getNews</span><span class="params">()</span></span>&#123; <span class="comment">//覆盖</span></span><br><span class="line">        <span class="keyword">return</span> news;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//新增的方法</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span>  String <span class="title">eat</span><span class="params">()</span></span>&#123; <span class="comment">//新</span></span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;need eat meat&quot;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">(1):x.news is Animal&#39;s news</span><br><span class="line">&#x2F;&#x2F; 默认访问父类的成员变量</span><br><span class="line">(2):((Tiger)x).news is Tiger&#39;s  news</span><br><span class="line">&#x2F;&#x2F; 强转</span><br><span class="line">(3):x.smile() is smile from Animal</span><br><span class="line">&#x2F;&#x2F; 静态方法看左</span><br><span class="line">(4):((Tiger)x).smile() is smile from Tiger</span><br><span class="line">&#x2F;&#x2F; 强转</span><br><span class="line">(5):((Animal)x).getNews() is Tiger&#39;s  news</span><br><span class="line">&#x2F;&#x2F; 不变的强转,易错点</span><br><span class="line">(6):x.getNews() is Tiger&#39;s  news</span><br><span class="line">&#x2F;&#x2F; 5与6是等效的</span><br><span class="line">(7):x.getMessage() is Animal&#39;s message</span><br><span class="line">&#x2F;&#x2F; 继承来的方法，访问变量看的是父类</span><br><span class="line">(8):((Tiger)x).eat() is need eat meat</span><br><span class="line">&#x2F;&#x2F; 访问子类新增需要强转</span><br></pre></td></tr></table></figure>
<p>经过上面的沉淀，到这里应该没有问题了，有问题底下留言</p>
<h1 id="动态绑定机制"><a href="#动态绑定机制" class="headerlink" title="动态绑定机制"></a>动态绑定机制</h1><p><code>DynamicBindingDemo.java</code></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.codeslogan.inherit;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">DynamicBindingDemo</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        m(<span class="keyword">new</span> GraduateStudent());</span><br><span class="line">        System.out.println(<span class="string">&quot;-----&quot;</span>);</span><br><span class="line">        m(<span class="keyword">new</span> Student());</span><br><span class="line">        System.out.println(<span class="string">&quot;-----&quot;</span>);</span><br><span class="line">        m(<span class="keyword">new</span> Person());</span><br><span class="line">        System.out.println(<span class="string">&quot;-----&quot;</span>);</span><br><span class="line">        m(<span class="keyword">new</span> Object());</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">m</span><span class="params">(Object x)</span> </span>&#123;</span><br><span class="line">        System.out.println(x.toString());</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Person</span> <span class="keyword">extends</span> <span class="title">Object</span></span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span>  String <span class="title">toString</span><span class="params">()</span></span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;Person&quot;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Student</span> <span class="keyword">extends</span> <span class="title">Person</span></span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">toString</span><span class="params">()</span></span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;Student&quot;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">GraduateStudent</span> <span class="keyword">extends</span> <span class="title">Student</span></span>&#123;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure>

<p>这道题要注意分析题目，不要看成构造函数。<code>m()</code>方法本质上是调用了每个类中的<code>toString()</code>，根据继承关系分析<code>toString()</code>方法来自哪个类就能得出答案。GraduateStudent是Student的子类，Student是Person的子类，Person是Object的子类。在调用<code>toString()</code>方法时，如果创建的是GraduateStudent的一个实例，JVM会依次在类GraduateStudent，Student，Person中查找<code>toString()</code>方法的实现，一旦找到一个，就停止查找，然后调用这个先找到的</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">Student</span><br><span class="line">-----</span><br><span class="line">Student</span><br><span class="line">-----</span><br><span class="line">Person</span><br><span class="line">-----</span><br><span class="line">java.lang.Object@12a3a380</span><br></pre></td></tr></table></figure>

<h1 id="构造方法链"><a href="#构造方法链" class="headerlink" title="构造方法链"></a>构造方法链</h1><p>定义：Java中，用子类构造一个实例对象时，系统会自行在执行子类的构造方法前沿着继承链依次调用所有父类的无参构造方法（按继承关系由其顶层父类至当前子类依次调用，无论其是否在子类的构造方法中被显式调用），这称为构造方法链。</p>
<p>本小节讨论的是上转型对象的构造方法，以及构造方法调用实例方法所出现的情况，具体如下：</p>
<p><code>TestC.java</code></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">A</span> </span>&#123;</span><br><span class="line">    <span class="keyword">int</span>  value = <span class="number">5</span>;</span><br><span class="line">    A( ) &#123;</span><br><span class="line">        setValue(<span class="number">10</span>);</span><br><span class="line">        System.out.println( <span class="string">&quot;A:&quot;</span> + value);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">setValue</span><span class="params">(<span class="keyword">int</span> v)</span> </span>&#123;</span><br><span class="line">        value = <span class="number">2</span> * v; &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">B</span> <span class="keyword">extends</span> <span class="title">A</span> </span>&#123;</span><br><span class="line">    B( ) &#123;</span><br><span class="line">        <span class="comment">//super();</span></span><br><span class="line">        System.out.println( <span class="string">&quot;B:&quot;</span> + value);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">setValue</span><span class="params">(<span class="keyword">int</span> v)</span> </span>&#123;</span><br><span class="line">        value = <span class="number">5</span> * v; &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">TestC</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span>  <span class="keyword">static</span>  <span class="keyword">void</span>  <span class="title">main</span><span class="params">(String[ ] args)</span></span>&#123;</span><br><span class="line">        <span class="keyword">new</span> A( );</span><br><span class="line">        <span class="keyword">new</span> B( );</span><br><span class="line">        A c =<span class="keyword">new</span> B();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>
<p>运行答案如下：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">A:20</span><br><span class="line">-------------</span><br><span class="line">A:50</span><br><span class="line">B:50</span><br><span class="line">-------------</span><br><span class="line">A:50</span><br><span class="line">B:50</span><br></pre></td></tr></table></figure>
<p>刚刚接触这道题我是有点意外的，没想到Java还能这么考，感觉自己平常学的Java和老师教的Java不是一个东西，但是还是得默默承受(4.0 yyds！！！) 话不多说，进入正题</p>
<ul>
<li>第一值输出为20，创建的是父类对象，调用其构造方法+实例方法，结果无需多言</li>
<li>第二组为两个50，在创建<code>B</code>对象时，因为它是<code>A</code>类的子类，默认会先调用A的构造方法。但是在A的构造方法中，调用了个实例方法。根据前面的知识我们知道，<strong>如果子类对父类的实例方法进行了重写覆盖，那么优先调用的应该是子类的实例方法</strong>，所以<code>value</code>值为50。</li>
<li>第三组的答案与第二组相同，道理同上，作为上转型只是一个障眼法。</li>
</ul>
<h1 id="参考资料"><a href="#参考资料" class="headerlink" title="参考资料"></a>参考资料</h1><p><a href="https://hd.hainanu.edu.cn/cs/info/1019/1026.htm">某海大某张姓老师</a></p>
]]></content>
      <categories>
        <category>Java</category>
      </categories>
      <tags>
        <tag>Java</tag>
      </tags>
  </entry>
  <entry>
    <title>Matlab笔记</title>
    <url>/2021/05/05/Matlab%E7%AC%94%E8%AE%B0/</url>
    <content><![CDATA[<h1 id="基本操作"><a href="#基本操作" class="headerlink" title="基本操作"></a>基本操作</h1><h2 id="小操作"><a href="#小操作" class="headerlink" title="小操作"></a>小操作</h2><ul>
<li>添加注释 Ctrl+R   % </li>
<li>取消注释 Ctrl+T</li>
<li>清空工作区变量 clear</li>
<li>清除命令行里操作过的命令，使屏幕变干净 clc</li>
<li>clear;clc  表示初始化</li>
<li>分号;表示不显示运行结果</li>
</ul>
<a id="more"></a>

<h2 id="输入输出函数-input-disp"><a href="#输入输出函数-input-disp" class="headerlink" title="输入输出函数(input(), disp())"></a>输入输出函数(input(), disp())</h2><p>disp用法类似C语言中的printf, 结尾无所谓分号</p>
<p>行向量 a = [1 2 3]</p>
<p>列向量 a = [1;2;3]</p>
<hr>
<p>A = input(‘请输入A：’)</p>
<h2 id="num2str"><a href="#num2str" class="headerlink" title="num2str"></a>num2str</h2><p>将数字转化为字符串</p>
<p>a = 40               40</p>
<p>num2str(a)      ‘40’</p>
<h2 id="字符串的拼接"><a href="#字符串的拼接" class="headerlink" title="字符串的拼接"></a>字符串的拼接</h2><p>strcat(‘a的取值为’, a)</p>
<p>[‘a的取值为’ a]</p>
<h2 id="sum"><a href="#sum" class="headerlink" title="sum()"></a>sum()</h2><p>如果是一维向量，则直接求和</p>
<p>如果是多维，默认对列向量求和</p>
<hr>
<p>sum(E, 1) 对列向量求和</p>
<p>sum(E, 2) 对行向量求和</p>
<p>sum(E(:)) 对整个矩阵求和</p>
<h2 id="提取矩阵中的元素"><a href="#提取矩阵中的元素" class="headerlink" title="提取矩阵中的元素"></a>提取矩阵中的元素</h2><p>A(3,2)     表示第三行第二列</p>
<p>A(3,:)      表示第三行所有元素</p>
<p>A(:,2)      表示第二列所有元素</p>
<p>:表示取所有元素</p>
<hr>
<p>A([2,5],:)    只取第二行和第五行</p>
<p>A(2:5,:)       只取第二行到第五行</p>
<p>A(2:2:5,:)    取第二行和第四行</p>
<hr>
<p>A(2:end,:)   取第二行到最后一行</p>
<p>A(2:end-1,:)   取第二行到倒数第2行</p>
<hr>
<p>A(:)将矩阵输出为一个列向量</p>
<h2 id="size"><a href="#size" class="headerlink" title="size()"></a>size()</h2><p> 返回几行几列</p>
<p>size(A, 1) 返回行</p>
<p>size(A, 2) 返回列</p>
<h2 id="repmat"><a href="#repmat" class="headerlink" title="repmat()"></a>repmat()</h2><p>B = repmat(A, 2, 1)</p>
<p>把A看成一个整体，2行1列个A</p>
<h2 id="inv-求逆阵"><a href="#inv-求逆阵" class="headerlink" title="inv()求逆阵"></a>inv()求逆阵</h2><p>inv(B)</p>
<h2 id="矩阵对应元素相乘除"><a href="#矩阵对应元素相乘除" class="headerlink" title="矩阵对应元素相乘除"></a>矩阵对应元素相乘除</h2><h3 id><a href="#" class="headerlink" title=".*   ./"></a>.*   ./</h3><p>区别直接乘除</p>
<h3 id="-1"><a href="#-1" class="headerlink" title="."></a>.</h3><p>点针对每个元素进行操作</p>
<h2 id="特征值和特征向量"><a href="#特征值和特征向量" class="headerlink" title="特征值和特征向量"></a>特征值和特征向量</h2><p>V = eig(B)         取特征值 </p>
<p>[V, D] = eig(B)  得到特征向量和特征值，并且特征值和特征向量一一对应</p>
<h2 id="find"><a href="#find" class="headerlink" title="find()"></a>find()</h2><p>返回不为0的矩阵的索引</p>
<p>ind = find(X)</p>
<p>ind = find(X, 2) 返回前两个不为0值的索引</p>
<p>[r,c] = find(D == Max_eig, 1)</p>
<h1 id="定义一个函数"><a href="#定义一个函数" class="headerlink" title="定义一个函数"></a>定义一个函数</h1><figure class="highlight matlab"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="params">[输出变量]</span> = 函数名称<span class="params">(输入变量）  </span></span></span><br><span class="line"><span class="function"><span class="params"> 函数的中间部分都是函数体</span></span></span><br><span class="line"><span class="function"><span class="params"> 函数的最后要用end结尾</span></span></span><br><span class="line"><span class="function"><span class="params"> 输出变量和输入变量可以有多个，用逗号隔开</span></span></span><br><span class="line"><span class="function"><span class="params">function [a,b,c]=test(d,e,f)</span></span></span><br><span class="line">    a=d+e;</span><br><span class="line">    b=e+f;</span><br><span class="line">    c=f+d;</span><br><span class="line"><span class="keyword">end</span></span><br><span class="line">自定义的函数要单独放在一个m文件中，不可以直接放在主函数里面（和其他大多数语言不同）</span><br></pre></td></tr></table></figure>



<h1 id="定义一个具有自变量的方程"><a href="#定义一个具有自变量的方程" class="headerlink" title="定义一个具有自变量的方程"></a>定义一个具有自变量的方程</h1><p>y=@(x) kx+b</p>
<p>声明x是一个自变量</p>
<h2 id="mean"><a href="#mean" class="headerlink" title="mean()"></a>mean()</h2><p>平均值</p>
]]></content>
      <tags>
        <tag>Matlab</tag>
      </tags>
  </entry>
  <entry>
    <title>Python笔记</title>
    <url>/2020/10/28/Python%E7%AC%94%E8%AE%B0/</url>
    <content><![CDATA[<h1 id="Python基础语法"><a href="#Python基础语法" class="headerlink" title="Python基础语法"></a>Python基础语法</h1><h2 id="输出"><a href="#输出" class="headerlink" title="输出"></a>输出</h2><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">print(<span class="string">&#x27;helloworld&#x27;</span>)</span><br><span class="line">print(<span class="string">&#x27;I am&#x27;</span>,<span class="string">&#x27;chenshilin&#x27;</span>)</span><br><span class="line"><span class="comment">#会依次打印每个字符串，遇到逗号“,”会输出一个空格</span></span><br><span class="line">print(<span class="string">&#x27;100+200=&#x27;</span>,<span class="number">100</span>+<span class="number">200</span>)</span><br></pre></td></tr></table></figure>

<a id="more"></a>

<h2 id="输入"><a href="#输入" class="headerlink" title="输入"></a>输入</h2><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">name = <span class="built_in">input</span>()</span><br><span class="line">name = <span class="built_in">input</span>(<span class="string">&#x27;please enter a integer:&#x27;</span>)</span><br><span class="line"><span class="comment">#input()可以让你显示一个字符串来提示用户</span></span><br></pre></td></tr></table></figure>

<h2 id="转义字符"><a href="#转义字符" class="headerlink" title="转义字符"></a>转义字符</h2><p>转义字符<code>\</code>可以转义很多字符，比如<code>\n</code>表示换行，<code>\t</code>表示制表符，字符<code>\</code>本身也要转义，所以<code>\\</code>表示的字符就是<code>\</code></p>
<p>Python还允许用<code>r&#39;&#39;</code>表示<code>&#39;&#39;</code>内部的字符串默认不转义</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">print(<span class="string">r&#x27;&#x27;&#x27;hello,\n</span></span><br><span class="line"><span class="string">world&#x27;&#x27;&#x27;</span>)</span><br></pre></td></tr></table></figure>

<p>hello,\n<br>world</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">print(<span class="string">&#x27;&#x27;&#x27;hello,\n</span></span><br><span class="line"><span class="string">world&#x27;&#x27;&#x27;</span>)</span><br></pre></td></tr></table></figure>

<p>hello,</p>
<p>world</p>
<h2 id="布尔"><a href="#布尔" class="headerlink" title="布尔"></a>布尔</h2><p>可以直接使用True和False <strong>(严格区分大小写)</strong></p>
<p>可以使用and, or, not运算</p>
<h2 id="变量"><a href="#变量" class="headerlink" title="变量"></a>变量</h2><p>Python语言的变量定义为动态语言，不用定义变量类型</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment">#整数</span></span><br><span class="line">a = <span class="number">100</span></span><br><span class="line"><span class="comment">#字符串</span></span><br><span class="line">t_007 = <span class="string">&#x27;T007&#x27;</span></span><br><span class="line"><span class="comment">#bool</span></span><br><span class="line">Answer = <span class="literal">True</span></span><br></pre></td></tr></table></figure>

<h2 id="列表：list"><a href="#列表：list" class="headerlink" title="列表：list"></a>列表：list</h2><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment">#创建数组</span></span><br><span class="line">classmates = [<span class="string">&#x27;Michael&#x27;</span>, <span class="string">&#x27;Bob&#x27;</span>, <span class="string">&#x27;Tracy&#x27;</span>]</span><br><span class="line"><span class="comment">#查看数组元素</span></span><br><span class="line">classmates[<span class="number">0</span>]</span><br><span class="line"><span class="comment">#查看数组个数</span></span><br><span class="line"><span class="built_in">len</span>(classmates)</span><br><span class="line"><span class="comment">#添加数组元素</span></span><br><span class="line">classmates.append(<span class="string">&#x27;Adam&#x27;</span>)</span><br><span class="line">classmates.insert(<span class="number">1</span>, <span class="string">&#x27;Jack&#x27;</span>)</span><br><span class="line"><span class="comment">#删除数组元素</span></span><br><span class="line">classmates.pop()</span><br><span class="line"><span class="comment">#可保留要删除的数据</span></span><br><span class="line">pop_bob = classmates.pop(<span class="number">1</span>)</span><br><span class="line"><span class="comment">#直接删除</span></span><br><span class="line"><span class="keyword">del</span> classmates[<span class="number">0</span>]</span><br><span class="line"><span class="comment">#按值删除</span></span><br><span class="line">classmates.remove(<span class="string">&#x27;Bob&#x27;</span>)</span><br><span class="line"><span class="comment">#list中的元素可以不相同</span></span><br><span class="line">L = [<span class="string">&#x27;Apple&#x27;</span>, <span class="number">123</span>, <span class="literal">True</span>]</span><br></pre></td></tr></table></figure>

<h3 id="切片"><a href="#切片" class="headerlink" title="切片"></a>切片</h3><p>1.列表切片在作为参数传递给函数时，表明传递的是一个副本，并不是本身</p>
<p>在这种情况下，如若函数对其更改，将不会改变其原有的值</p>
<p>2.切片的另一主要的用途为，顾名思义，对列表进行分割</p>
<h2 id="元组：tuple"><a href="#元组：tuple" class="headerlink" title="元组：tuple"></a>元组：tuple</h2><p>tuple一经初始化就不能修改</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">classmates = (<span class="string">&#x27;Michael&#x27;</span>, <span class="string">&#x27;Bob&#x27;</span>, <span class="string">&#x27;Tracy&#x27;</span>)</span><br><span class="line"><span class="comment">#只有1个元素的tuple定义时必须加一个逗号,来消除歧义</span></span><br><span class="line">t = (<span class="number">1</span>,)</span><br><span class="line"><span class="comment">#定义的不是tuple，是1这个数！</span></span><br><span class="line">t = (<span class="number">1</span>)</span><br></pre></td></tr></table></figure>

<h2 id="条件判断"><a href="#条件判断" class="headerlink" title="条件判断"></a>条件判断</h2><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">age = <span class="number">3</span></span><br><span class="line"><span class="keyword">if</span> age &gt;= <span class="number">18</span>:</span><br><span class="line">    print(<span class="string">&#x27;adult&#x27;</span>)</span><br><span class="line"><span class="keyword">elif</span> age &gt;= <span class="number">6</span>:</span><br><span class="line">    print(<span class="string">&#x27;teenager&#x27;</span>)</span><br><span class="line"><span class="keyword">else</span>:</span><br><span class="line">    print(<span class="string">&#x27;kid&#x27;</span>)</span><br></pre></td></tr></table></figure>

<p>注意不要少写了冒号<code>:</code>，缩进通常为4格</p>
<p>if语句执行有个特点，它是从上往下判断，如果在某个判断上是<code>True</code>，把该判断对应的语句执行后，就忽略掉剩下的<code>elif</code>和`else</p>
<p>类似C语言中的switch/case语句</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">s = <span class="built_in">input</span>(<span class="string">&#x27;birth: &#x27;</span>)</span><br><span class="line"><span class="comment">#把str转换成整数</span></span><br><span class="line">birth = <span class="built_in">int</span>(s)</span><br><span class="line"><span class="keyword">if</span> birth &lt; <span class="number">2000</span>:</span><br><span class="line">    print(<span class="string">&#x27;00前&#x27;</span>)</span><br><span class="line"><span class="keyword">else</span>:</span><br><span class="line">    print(<span class="string">&#x27;00后&#x27;</span>)</span><br><span class="line">    </span><br></pre></td></tr></table></figure>

<h2 id="循环"><a href="#循环" class="headerlink" title="循环"></a>循环</h2><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment">#计算1-100的整数之和 for...in...循环</span></span><br><span class="line"><span class="built_in">sum</span> = <span class="number">0</span></span><br><span class="line"><span class="keyword">for</span> x <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">101</span>):</span><br><span class="line">    <span class="built_in">sum</span> = <span class="built_in">sum</span> + x</span><br><span class="line">print(<span class="built_in">sum</span>)</span><br></pre></td></tr></table></figure>

<p>for x in …循环就是把每个元素代入变量<code>x</code>，然后执行缩进块的语句</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment">#计算100以内所有奇数之和，用while循环实现</span></span><br><span class="line"><span class="built_in">sum</span> = <span class="number">0</span></span><br><span class="line">n = <span class="number">99</span></span><br><span class="line"><span class="keyword">while</span> n &gt; <span class="number">0</span>:</span><br><span class="line">    <span class="built_in">sum</span> = <span class="built_in">sum</span> + n</span><br><span class="line">    n = n - <span class="number">2</span></span><br><span class="line">print(<span class="built_in">sum</span>)</span><br></pre></td></tr></table></figure>

<h2 id="dict-和-set"><a href="#dict-和-set" class="headerlink" title="dict 和 set"></a>dict 和 set</h2><h3 id="字典：dict"><a href="#字典：dict" class="headerlink" title="字典：dict"></a>字典：dict</h3><p>即map，使用键-值（key-value）存储，具有极快的查找速度</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">names = [<span class="string">&#x27;Michael&#x27;</span>, <span class="string">&#x27;Bob&#x27;</span>, <span class="string">&#x27;Tracy&#x27;</span>]</span><br><span class="line">scores = [<span class="number">95</span>, <span class="number">75</span>, <span class="number">85</span>]</span><br><span class="line"><span class="comment">#通过两个list创建dict</span></span><br><span class="line">d = &#123;<span class="string">&#x27;Michael&#x27;</span>: <span class="number">95</span>, <span class="string">&#x27;Bob&#x27;</span>: <span class="number">75</span>, <span class="string">&#x27;Tracy&#x27;</span>: <span class="number">85</span>&#125;</span><br><span class="line"><span class="comment">#查看</span></span><br><span class="line">d[<span class="string">&#x27;Michael&#x27;</span>]</span><br><span class="line"><span class="comment">#直接放入或修改</span></span><br><span class="line">d[<span class="string">&#x27;Adam&#x27;</span>] = <span class="number">67</span></span><br><span class="line">d[<span class="string">&#x27;Michael&#x27;</span>] = <span class="number">100</span></span><br><span class="line"><span class="comment">#删除</span></span><br><span class="line">d.pop(<span class="string">&#x27;Bob&#x27;</span>)</span><br></pre></td></tr></table></figure>

<p>判断key的存在，有两种办法，一是通过<code>in</code>判断key是否存在：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment">#返回值为bool类型</span></span><br><span class="line"><span class="string">&#x27;Thomas&#x27;</span> <span class="keyword">in</span> d</span><br></pre></td></tr></table></figure>

<p>二是通过dict提供的<code>get()</code>方法，如果key不存在，可以返回<code>None</code>，或者自己指定的value：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">d.get(&#39;Thomas&#39;)</span><br><span class="line">d.get(&#39;Thomas&#39;,-1)</span><br></pre></td></tr></table></figure>

<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment">#遍历字典</span></span><br><span class="line"><span class="keyword">for</span> key, value <span class="keyword">in</span> d.items():</span><br><span class="line">    print(key+<span class="string">&#x27;:&#x27;</span>+value)</span><br></pre></td></tr></table></figure>



<h3 id="set"><a href="#set" class="headerlink" title="set"></a>set</h3><p>不允许有重复的值</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span>s = <span class="built_in">set</span>([<span class="number">1</span>, <span class="number">1</span>, <span class="number">2</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">3</span>])</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>s</span><br><span class="line">&#123;<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>&#125;</span><br></pre></td></tr></table></figure>

<p>传入的参数[1, 1, 2, 2, 3, 3]是一个list</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment">#添加</span></span><br><span class="line">s.add(<span class="number">4</span>)</span><br><span class="line"><span class="comment">#删除</span></span><br><span class="line">s.remove(<span class="number">4</span>)</span><br></pre></td></tr></table></figure>

<p>set可以看成数学意义上的无序和无重复元素的集合，因此，两个set可以做数学意义上的交集、并集等操作：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span>s1 = <span class="built_in">set</span>([<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>])</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>s2 = <span class="built_in">set</span>([<span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>])</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>s1 &amp; s2</span><br><span class="line">&#123;<span class="number">2</span>, <span class="number">3</span>&#125;</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>s1 | s2</span><br><span class="line">&#123;<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>&#125;</span><br></pre></td></tr></table></figure>

<h2 id="何谓不可变"><a href="#何谓不可变" class="headerlink" title="何谓不可变"></a>何谓不可变</h2><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span>a = <span class="string">&#x27;abc&#x27;</span></span><br><span class="line"><span class="comment">#replace并没有修改a的值，只是返回了一个str</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>b = a.replace(<span class="string">&#x27;a&#x27;</span>, <span class="string">&#x27;A&#x27;</span>)</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>b</span><br><span class="line"><span class="string">&#x27;Abc&#x27;</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>a</span><br><span class="line"><span class="string">&#x27;abc&#x27;</span></span><br></pre></td></tr></table></figure>

<h2 id="函数"><a href="#函数" class="headerlink" title="函数"></a>函数</h2><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment">#函数的定义，注意缩进与冒号</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">my_abs</span>(<span class="params">x</span>):</span></span><br><span class="line">    <span class="keyword">if</span> x &gt;= <span class="number">0</span>:</span><br><span class="line">        <span class="keyword">return</span> x</span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        <span class="keyword">return</span> -x</span><br></pre></td></tr></table></figure>

<p>def函数时，需要确定函数名和参数个数；</p>
<p>如果有必要，可以先对参数的数据类型做检查；</p>
<p>函数体内部可以用<code>return</code>随时返回函数结果；</p>
<p>函数执行完毕也没有<code>return</code>语句时，自动<code>return None</code>。</p>
<p>函数可以同时返回多个值，但其实就是一个元组tuple</p>
<h3 id="函数的参数"><a href="#函数的参数" class="headerlink" title="函数的参数"></a>函数的参数</h3><h4 id="位置参数"><a href="#位置参数" class="headerlink" title="位置参数"></a>位置参数</h4><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">power</span>(<span class="params">x, n</span>):</span></span><br><span class="line">    s = <span class="number">1</span></span><br><span class="line">    <span class="keyword">while</span> n &gt; <span class="number">0</span>:</span><br><span class="line">        n = n - <span class="number">1</span></span><br><span class="line">        s = s * x</span><br><span class="line">    <span class="keyword">return</span> s</span><br></pre></td></tr></table></figure>

<p>x,n就被称为位置参数</p>
<h4 id="默认参数"><a href="#默认参数" class="headerlink" title="默认参数"></a>默认参数</h4><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">power</span>(<span class="params">x, n=<span class="number">2</span></span>):</span></span><br><span class="line">    s = <span class="number">1</span></span><br><span class="line">    <span class="keyword">while</span> n &gt; <span class="number">0</span>:</span><br><span class="line">        n = n - <span class="number">1</span></span><br><span class="line">        s = s * x</span><br><span class="line">    <span class="keyword">return</span> s</span><br></pre></td></tr></table></figure>

<p>n为默认参数</p>
<h4 id="可变参数"><a href="#可变参数" class="headerlink" title="可变参数"></a>可变参数</h4><p>可变参数就是传入的参数个数是可变的，可以是1个、2个到任意个，还可以是0个</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">calc</span>(<span class="params">numbers</span>):</span></span><br><span class="line">    <span class="built_in">sum</span> = <span class="number">0</span></span><br><span class="line">    <span class="keyword">for</span> n <span class="keyword">in</span> numbers:</span><br><span class="line">        <span class="built_in">sum</span> = <span class="built_in">sum</span> + n * n</span><br><span class="line">    <span class="keyword">return</span> <span class="built_in">sum</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#list</span></span><br><span class="line">calc([<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>])</span><br><span class="line"><span class="comment">#tuple</span></span><br><span class="line">calc((<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>))</span><br><span class="line">calc(<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>)</span><br></pre></td></tr></table></figure>

<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">calc</span>(<span class="params">*numbers</span>):</span></span><br><span class="line">    <span class="built_in">sum</span> = <span class="number">0</span></span><br><span class="line">    <span class="keyword">for</span> n <span class="keyword">in</span> numbers:</span><br><span class="line">        <span class="built_in">sum</span> = <span class="built_in">sum</span> + n * n</span><br><span class="line">    <span class="keyword">return</span> <span class="built_in">sum</span></span><br></pre></td></tr></table></figure>

<p>定义可变参数和定义一个list或tuple参数相比，仅仅在参数前面加了一个<code>*</code>号。在函数内部，参数<code>numbers</code>接收到的是一个tuple，因此，函数代码完全不变。但是，调用该函数时，可以传入任意个参数，包括0个参数：</p>
<h4 id="命名关键字参数"><a href="#命名关键字参数" class="headerlink" title="命名关键字参数"></a>命名关键字参数</h4><p>对于关键字参数，函数的调用者可以传入任意不受限制的关键字参数。</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line"></span><br></pre></td></tr></table></figure>



<h4 id="关键字参数"><a href="#关键字参数" class="headerlink" title="关键字参数"></a>关键字参数</h4><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">person</span>(<span class="params">name, age, **kw</span>):</span></span><br><span class="line">    print(<span class="string">&#x27;name:&#x27;</span>, name, <span class="string">&#x27;age:&#x27;</span>, age, <span class="string">&#x27;other:&#x27;</span>, kw)</span><br><span class="line">    </span><br><span class="line">    </span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>person(<span class="string">&#x27;Bob&#x27;</span>, <span class="number">35</span>, city=<span class="string">&#x27;Beijing&#x27;</span>)</span><br><span class="line">name: Bob age: <span class="number">35</span> other: &#123;<span class="string">&#x27;city&#x27;</span>: <span class="string">&#x27;Beijing&#x27;</span>&#125;</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>person(<span class="string">&#x27;Adam&#x27;</span>, <span class="number">45</span>, gender=<span class="string">&#x27;M&#x27;</span>, job=<span class="string">&#x27;Engineer&#x27;</span>)</span><br><span class="line">name: Adam age: <span class="number">45</span> other: &#123;<span class="string">&#x27;gender&#x27;</span>: <span class="string">&#x27;M&#x27;</span>, <span class="string">&#x27;job&#x27;</span>: <span class="string">&#x27;Engineer&#x27;</span>&#125;</span><br></pre></td></tr></table></figure>

<p>也可以将dict字典传入</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment">#1:</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>extra = &#123;<span class="string">&#x27;city&#x27;</span>: <span class="string">&#x27;Beijing&#x27;</span>, <span class="string">&#x27;job&#x27;</span>: <span class="string">&#x27;Engineer&#x27;</span>&#125;</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>person(<span class="string">&#x27;Jack&#x27;</span>, <span class="number">24</span>, city=extra[<span class="string">&#x27;city&#x27;</span>], job=extra[<span class="string">&#x27;job&#x27;</span>])</span><br><span class="line">name: Jack age: <span class="number">24</span> other: &#123;<span class="string">&#x27;city&#x27;</span>: <span class="string">&#x27;Beijing&#x27;</span>, <span class="string">&#x27;job&#x27;</span>: <span class="string">&#x27;Engineer&#x27;</span>&#125;</span><br><span class="line"><span class="comment">#2:</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>person(<span class="string">&#x27;Jack&#x27;</span>, <span class="number">24</span>, **extra)</span><br><span class="line">name: Jack age: <span class="number">24</span> other: &#123;<span class="string">&#x27;city&#x27;</span>: <span class="string">&#x27;Beijing&#x27;</span>, <span class="string">&#x27;job&#x27;</span>: <span class="string">&#x27;Engineer&#x27;</span>&#125;</span><br></pre></td></tr></table></figure>

<h2 id="类"><a href="#类" class="headerlink" title="类"></a>类</h2><h3 id="封装"><a href="#封装" class="headerlink" title="封装"></a>封装</h3><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Dog</span>():</span></span><br><span class="line">    <span class="string">&quot;&quot;&quot;小狗类&quot;&quot;&quot;</span></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span>(<span class="params">self, name, age</span>):</span></span><br><span class="line">        self.name = name</span><br><span class="line">        self.age = age</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">sit</span>(<span class="params">self</span>):</span></span><br><span class="line">        print(self.name.title() + <span class="string">&quot; is now sitting&quot;</span>)</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">roll_over</span>(<span class="params">self</span>):</span></span><br><span class="line">        print(self.name.title() + <span class="string">&quot; rolled over!&quot;</span>)</span><br><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure>

<p>创建类时，使用构造函数时要使用两个_</p>
<h3 id="继承"><a href="#继承" class="headerlink" title="继承"></a>继承</h3><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">ElectricCar</span>(<span class="params">Car</span>):</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span>(<span class="params">self, make, model, year</span>):</span></span><br><span class="line">        <span class="built_in">super</span>().__init__(self, make, model, year)</span><br></pre></td></tr></table></figure>

<p>super()是一个特殊的函数，帮助python将子类和父类关联起来。父类因为被称为超类，super因此而得名</p>
<h2 id="文件读取"><a href="#文件读取" class="headerlink" title="文件读取"></a>文件读取</h2><h3 id="方法一：遍历逐行读取"><a href="#方法一：遍历逐行读取" class="headerlink" title="方法一：遍历逐行读取"></a>方法一：遍历逐行读取</h3><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">filename  = <span class="string">&#x27;pi_digits.txt&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">with</span> <span class="built_in">open</span>(filename) <span class="keyword">as</span> file_project:</span><br><span class="line">    <span class="keyword">for</span> line <span class="keyword">in</span> file_project:</span><br><span class="line">        print(line)</span><br></pre></td></tr></table></figure>

<h3 id="方法二：读取整个文件"><a href="#方法二：读取整个文件" class="headerlink" title="方法二：读取整个文件"></a>方法二：读取整个文件</h3><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">with open(&#39;pi_digits.txt&#39;) as file_project:</span><br><span class="line">    contents &#x3D; file_project.read()</span><br><span class="line">    print(contents)</span><br></pre></td></tr></table></figure>

<h3 id="方法三：写到一个列表中"><a href="#方法三：写到一个列表中" class="headerlink" title="方法三：写到一个列表中"></a>方法三：写到一个列表中</h3><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">filename  = <span class="string">&#x27;pi_digits.txt&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">with</span> <span class="built_in">open</span>(filename) <span class="keyword">as</span> file_project:</span><br><span class="line">    lines = file_project.readlines()</span><br><span class="line">    </span><br><span class="line"><span class="keyword">for</span> line <span class="keyword">in</span> lines:</span><br><span class="line">    print(line)</span><br></pre></td></tr></table></figure>

<h2 id="文件写入"><a href="#文件写入" class="headerlink" title="文件写入"></a>文件写入</h2><h3 id="写入空文件"><a href="#写入空文件" class="headerlink" title="写入空文件"></a>写入空文件</h3><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">filename = <span class="string">&#x27;programming.txt&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">with</span> <span class="built_in">open</span>(filename, <span class="string">&#x27;w&#x27;</span>) <span class="keyword">as</span> file_project:</span><br><span class="line">    file_project.write(<span class="string">&#x27;i love programming&#x27;</span>)</span><br></pre></td></tr></table></figure>

<p>读取模式’r’, 写入模式’w’, 附加模式’a’</p>
<h2 id="异常"><a href="#异常" class="headerlink" title="异常"></a>异常</h2><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">try</span>:</span><br><span class="line">    print(<span class="number">5</span>/<span class="number">0</span>)</span><br><span class="line"><span class="keyword">except</span> ZeroDivisionError:</span><br><span class="line">    print(<span class="string">&quot;You can&#x27;t divide by zero!&quot;</span>)</span><br></pre></td></tr></table></figure>

<h3 id="try-except-else"><a href="#try-except-else" class="headerlink" title="try-except-else"></a>try-except-else</h3><p>只有会出现异常的代码块才需要放在try当中，如果程序出现了意料之中的异常提醒，那么会执行except中的代码；如果运行正常，会接着执行else中的代码</p>
<p>异常类型包括：</p>
<p>ZeroDivisionError</p>
<p>FileNotFoundErrot</p>
<h2 id="存储数据-json"><a href="#存储数据-json" class="headerlink" title="存储数据 json"></a>存储数据 json</h2><h3 id="写入"><a href="#写入" class="headerlink" title="写入"></a>写入</h3><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> json</span><br><span class="line">numbers = [<span class="number">2</span>, <span class="number">3</span>, <span class="number">5</span>, <span class="number">7</span>, <span class="number">11</span>, <span class="number">13</span>]</span><br><span class="line"></span><br><span class="line">filename = <span class="string">&#x27;numbers.json&#x27;</span></span><br><span class="line"><span class="keyword">with</span> <span class="built_in">open</span>(filename, <span class="string">&#x27;w&#x27;</span>) <span class="keyword">as</span> f_obj:</span><br><span class="line">    json.dump(numbers, f_obj)</span><br></pre></td></tr></table></figure>

<h3 id="读出"><a href="#读出" class="headerlink" title="读出"></a>读出</h3><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> json</span><br><span class="line"></span><br><span class="line">filename = <span class="string">&#x27;numbers.json&#x27;</span></span><br><span class="line"><span class="keyword">with</span> <span class="built_in">open</span>(filename) <span class="keyword">as</span> f_obj:</span><br><span class="line">    numbers = json.load(f_obj)</span><br><span class="line"></span><br><span class="line">print(numbers)</span><br></pre></td></tr></table></figure>

<h2 id="重构"><a href="#重构" class="headerlink" title="重构"></a>重构</h2><p>将代码划分为一系列完成具体工作的函数</p>
<h2 id="测试"><a href="#测试" class="headerlink" title="测试"></a>测试</h2><h3 id="单元测试函数"><a href="#单元测试函数" class="headerlink" title="单元测试函数"></a>单元测试函数</h3><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment">#导入模块</span></span><br><span class="line"><span class="keyword">import</span> unittest</span><br><span class="line"><span class="keyword">from</span> name_function <span class="keyword">import</span> get_formatted_name</span><br><span class="line"></span><br><span class="line"><span class="comment">#命名随意，但必须继承unittest.TestCase</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">NamesTestCase</span>(<span class="params">unittest.TestCase</span>):</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">test_first_last_name</span>(<span class="params">self</span>):</span></span><br><span class="line">        formatted_name = get_formatted_name(<span class="string">&#x27;janis&#x27;</span>, <span class="string">&#x27;joplin&#x27;</span>)</span><br><span class="line">        <span class="comment">#断言方法</span></span><br><span class="line">        self.assertEqual(formatted_name, <span class="string">&#x27;Janis Joplin&#x27;</span>)</span><br><span class="line">        </span><br><span class="line"><span class="comment">#运行这个文件中的测试</span></span><br><span class="line">unittest.main()</span><br></pre></td></tr></table></figure>

<p>![](D:\Huawei Share\Screenshot\capture_20201025231510992.bmp)</p>
<h3 id="测试类，方法setUp"><a href="#测试类，方法setUp" class="headerlink" title="测试类，方法setUp()"></a>测试类，方法setUp()</h3><p>setUp()方法创建一系列实例，就可以避免在每个测试方法中再创建</p>
<p><strong>survey.py</strong></p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">AnonymousSurvey</span>():</span></span><br><span class="line">    <span class="string">&quot;&quot;&quot;创建一个匿名调查类&quot;&quot;&quot;</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span>(<span class="params">self, question</span>):</span></span><br><span class="line">        <span class="string">&quot;&quot;&quot;初始化一个问题&quot;&quot;&quot;</span></span><br><span class="line">        self.question = question</span><br><span class="line">        self.responses = []</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">show_question</span>(<span class="params">self</span>):</span></span><br><span class="line">        <span class="string">&quot;&quot;&quot;显示调查问卷&quot;&quot;&quot;</span></span><br><span class="line">        print(self.question)</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">store_response</span>(<span class="params">self, new_response</span>):</span></span><br><span class="line">        <span class="string">&quot;&quot;&quot;存储新的回答&quot;&quot;&quot;</span></span><br><span class="line">        self.responses.append(new_response)</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">show_results</span>(<span class="params">self</span>):</span></span><br><span class="line">        <span class="string">&quot;&quot;&quot;显示收集到的所有回答&quot;&quot;&quot;</span></span><br><span class="line">        print(<span class="string">&quot;Survey results:&quot;</span>)</span><br><span class="line">        <span class="keyword">for</span> response <span class="keyword">in</span> self.responses:</span><br><span class="line">            print(<span class="string">&#x27;-&#x27;</span> + response)</span><br></pre></td></tr></table></figure>

<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> unittest</span><br><span class="line"><span class="keyword">from</span> survey <span class="keyword">import</span> AnonymousSurvey</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">TestAnonymousSurvey</span>(<span class="params">unittest.TestCase</span>):</span></span><br><span class="line">    <span class="string">&quot;&quot;&quot;针对AnonymousSurvey类的测试&quot;&quot;&quot;</span></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">setUp</span>(<span class="params">self</span>) -&gt; <span class="keyword">None</span>:</span></span><br><span class="line">        <span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">        创建一个调查对象和一组答案，供后续测试使用</span></span><br><span class="line"><span class="string">        &quot;&quot;&quot;</span></span><br><span class="line">        question = <span class="string">&quot;What language did you first learn to speak?&quot;</span></span><br><span class="line">        self.my_survey = AnonymousSurvey(question)</span><br><span class="line">        self.responses = [<span class="string">&#x27;English&#x27;</span>, <span class="string">&#x27;Spanish&#x27;</span>, <span class="string">&#x27;Mandarin&#x27;</span>]</span><br><span class="line">        <span class="function"><span class="keyword">def</span> <span class="title">test_store_single_response</span>(<span class="params">self</span>):</span></span><br><span class="line">            self.my_survey.store_reponse(self.response[<span class="number">0</span>])</span><br><span class="line">            self.assertIn(self.response[<span class="number">0</span>], self.my_survey.responses)</span><br><span class="line"></span><br><span class="line">        <span class="function"><span class="keyword">def</span> <span class="title">test_store_three_response</span>(<span class="params">self</span>):</span></span><br><span class="line">            <span class="keyword">for</span> response <span class="keyword">in</span> self.responses:</span><br><span class="line">                self.my_survey.store_reponse(response)</span><br><span class="line">            <span class="keyword">for</span> response <span class="keyword">in</span> self.responses:</span><br><span class="line">                self.assertIn(response, self.my_survey.responses)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">unittest.main()</span><br></pre></td></tr></table></figure>



<h1 id="参考文献"><a href="#参考文献" class="headerlink" title="参考文献"></a>参考文献</h1><p>1.《Python编程：从入门到实践》美Eric Matthes著</p>
<p>2.<a href="https://www.liaoxuefeng.com/">https://www.liaoxuefeng.com/</a></p>
]]></content>
      <categories>
        <category>Python</category>
      </categories>
      <tags>
        <tag>Python</tag>
      </tags>
  </entry>
  <entry>
    <title>SpringBoot入门级项目hnucisys</title>
    <url>/2021/12/24/SpringBoot%E5%85%A5%E9%97%A8%E7%BA%A7%E9%A1%B9%E7%9B%AEhnucisys/</url>
    <content><![CDATA[<h1 id="项目源地址"><a href="#项目源地址" class="headerlink" title="项目源地址"></a>项目源地址</h1><p><a href="https://github.com/CodeSlogan/hnucisys">竞赛信息系统</a><br><a href="https://github.com/CodeSlogan/hnucisys">https://github.com/CodeSlogan/hnucisys</a></p>
<h1 id="运行环境"><a href="#运行环境" class="headerlink" title="运行环境"></a>运行环境</h1><p>JDK 1.8<br>MySQL 8.0<br>Maven 3.8.1 </p>
<h1 id="代码规范"><a href="#代码规范" class="headerlink" title="代码规范"></a>代码规范</h1><p>《阿里巴巴Java开发手册》1.3.1 (终极版)</p>
<h1 id="项目介绍"><a href="#项目介绍" class="headerlink" title="项目介绍"></a>项目介绍</h1><p>&nbsp;&nbsp;&nbsp;&nbsp;互联网、信息技术的不断发展使得传统的Web项目的弊端不断展露，主要表现为性能低、数据持久、网络流量高，用户的需求也在随着时代变迁而增加，传统的Web项目越发不能满足人们的需求。在进行大学生对竞赛网站需求的调查中发现，用户需要的不仅是满足其基本需求的网站，更需要有新的功能出现，针对此调查结果研究设计出满足用户需求的竞赛信息网站。</p>
<p>&nbsp;&nbsp;&nbsp;&nbsp;本系统后端采用<strong>SpringBoot</strong>+<strong>MyBatis</strong>框架，前端使用<strong>HTML</strong>+<strong>CSS</strong>+<strong>JS</strong>技术设计竞赛信息网站，以<strong>MySQL</strong>作为后台数据库，内置<strong>Tomcat</strong>服务器，在开发过程中采用敏捷开发，最终实现用户对竞赛信息查询、寻找竞赛队友、创建队伍等功能，满足用户的需求。</p>
<h1 id="项目展示"><a href="#项目展示" class="headerlink" title="项目展示"></a>项目展示</h1><p>本系统分普通用户与管理员登录，管理员登录页面如下，为竞赛信息后台系统：</p>
<h2 id="后台"><a href="#后台" class="headerlink" title="后台"></a>后台</h2><p><img src="https://img-blog.csdnimg.cn/549c55350c594c539647fd71c2a134bd.png?x-oss-process=image/watermark,type_d3F5LXplbmhlaQ,shadow_50,text_Q1NETiBAQ29kZVNsb2dhbg==,size_20,color_FFFFFF,t_70,g_se,x_16#pic_center" alt="back"></p>
<br>

<h2 id="用户首页"><a href="#用户首页" class="headerlink" title="用户首页"></a>用户首页</h2><p><img src="https://img-blog.csdnimg.cn/93e6b7eec55045d191768b4f30a4a65c.png?x-oss-process=image/watermark,type_d3F5LXplbmhlaQ,shadow_50,text_Q1NETiBAQ29kZVNsb2dhbg==,size_20,color_FFFFFF,t_70,g_se,x_16#pic_center" alt="index"></p>
<br>

<h2 id="个人主页"><a href="#个人主页" class="headerlink" title="个人主页"></a>个人主页</h2><p><img src="https://img-blog.csdnimg.cn/04dc0543a33b4932a1fdb840f4725c54.png?x-oss-process=image/watermark,type_d3F5LXplbmhlaQ,shadow_50,text_Q1NETiBAQ29kZVNsb2dhbg==,size_20,color_FFFFFF,t_70,g_se,x_16#pic_center" alt="mypage"></p>
<br>

<h2 id="消息界面"><a href="#消息界面" class="headerlink" title="消息界面"></a>消息界面</h2><p><img src="https://img-blog.csdnimg.cn/602e407643af4e1884b0d0faae8183be.png?x-oss-process=image/watermark,type_d3F5LXplbmhlaQ,shadow_50,text_Q1NETiBAQ29kZVNsb2dhbg==,size_20,color_FFFFFF,t_70,g_se,x_16#pic_center" alt="news"></p>
<br>

<h2 id="队友推荐"><a href="#队友推荐" class="headerlink" title="队友推荐"></a>队友推荐</h2><p><img src="https://img-blog.csdnimg.cn/79aaffc7aabb440cb07a72da01786d76.png?x-oss-process=image/watermark,type_d3F5LXplbmhlaQ,shadow_50,text_Q1NETiBAQ29kZVNsb2dhbg==,size_20,color_FFFFFF,t_70,g_se,x_16#pic_center" alt="mate"></p>
<br>

<h2 id="队伍推荐"><a href="#队伍推荐" class="headerlink" title="队伍推荐"></a>队伍推荐</h2><p><img src="https://img-blog.csdnimg.cn/173b234d73314d5cae89c73d87b84ba2.png?x-oss-process=image/watermark,type_d3F5LXplbmhlaQ,shadow_50,text_Q1NETiBAQ29kZVNsb2dhbg==,size_20,color_FFFFFF,t_70,g_se,x_16#pic_center" alt="team"></p>
<br>



<h1 id="项目管理心得"><a href="#项目管理心得" class="headerlink" title="项目管理心得"></a>项目管理心得</h1><p>由于本次软件工程课程设计挑选的技术栈是我们同学从未接触过的，在平时的课程中，我们也仅仅学习了JavaSE，对Java用于开发的流程知之甚少。我作为小组组长，根据先前的开发经验，整理出了一份学习路线，从jdbc连接数据库，到Mybatis持久层框架的学习，最后再到SpringBoot。队员们在有条不紊的学习下，顺利掌握了开发流程，队员们凭借其个人能力与团队协作，解决了无数的bug，为项目最后交付提供了保证。为了能够协同开发，我们将项目部署在了Github，并通过idea内置的git工具，完成自己分配到的任务的提交，最后我们拥有了近150次的代码提交记录。</p>
<p>在开始时，我意识到如果项目失败，很大一部分原因会归结为缺少开发经验。但是，由于队员们强大的自学能力以及正确的学习路线，这一风险并没有发生。</p>
<h1 id="致谢"><a href="#致谢" class="headerlink" title="致谢"></a>致谢</h1><p>感谢我的5个队友们lzy&amp;wdj&amp;wcy&amp;lyx&amp;xd，以及后援团的隋哥！！！</p>
<p>让啥也不太会我当了一把项目经理的快感</p>
<p>感谢狂神说Java</p>
]]></content>
      <categories>
        <category>web</category>
      </categories>
      <tags>
        <tag>web</tag>
        <tag>Java</tag>
        <tag>SpringBoot</tag>
        <tag>后端</tag>
      </tags>
  </entry>
  <entry>
    <title>Dev-C++调试配置</title>
    <url>/2020/11/12/dev%E8%B0%83%E8%AF%95%E9%85%8D%E7%BD%AE/</url>
    <content><![CDATA[<p>我最开始接触C语言时用的编译器是Dev-C++，但调试功能一直没法使用，我也因为这个原因没有养成调试程序的习惯。今天上机房上实验课时，老师帮我解决了这个困扰我很久的问题。现将方法记录如下，希望大家在学习程序设计时可以试着去debug，同时也方便自己日后查找。</p>
<ol>
<li>复制<strong>zlib1.dll</strong>文件到C:\Windows\System32目录下</li>
<li>设置Dev-&gt;工具-&gt;编译选项-&gt;代码生成优化-&gt;连接器-&gt;产生调试信息YES</li>
<li>设置Dev-&gt;工具-&gt;环境选项-&gt;选中查看鼠标指向的变量</li>
</ol>
<p><strong>zlib1.dll</strong>文件的链接如下：</p>
<p> 私聊博主</p>
]]></content>
      <categories>
        <category>C/C++</category>
      </categories>
  </entry>
  <entry>
    <title>友元函数无法访问私有成员</title>
    <url>/2020/11/15/friend/</url>
    <content><![CDATA[<h1 id="Problem"><a href="#Problem" class="headerlink" title="Problem"></a>Problem</h1><p>今天在完成一份C++作业时，遇到了一个问题：</p>
<p>已经将函数作为友元放在了Port类，在分文件编写时仍然提示无法访问类中的私有成员</p>
<a id="more"></a>

<p><img src="/2020/11/15/friend/image1.jpg" alt="image1"></p>
<h1 id="Solve"><a href="#Solve" class="headerlink" title="Solve"></a>Solve</h1><p>在头文件中加入两行代码，这可能也是我的一个习惯问题，iostream只在方法文件中添加</p>
<p><code>port.h</code></p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">ifndef</span> PORT_H</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> PORT_H</span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt; //头文件中务必加入这两行代码</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;<span class="comment">//****</span></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Port</span></span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line"><span class="keyword">private</span>:</span><br><span class="line">	<span class="keyword">char</span>* brand;</span><br><span class="line">	<span class="keyword">char</span> style[<span class="number">20</span>];</span><br><span class="line">	<span class="keyword">int</span> bottles;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">	Port(<span class="keyword">const</span> <span class="keyword">char</span>* br = <span class="string">&quot;none&quot;</span>, <span class="keyword">const</span> <span class="keyword">char</span>* st = <span class="string">&quot;none&quot;</span>, <span class="keyword">int</span> b = <span class="number">0</span>);</span><br><span class="line">	Port(<span class="keyword">const</span> Port&amp; p);</span><br><span class="line">	<span class="keyword">virtual</span> ~Port() &#123; <span class="keyword">delete</span>[]brand; &#125;</span><br><span class="line">	Port&amp; <span class="keyword">operator</span> = (<span class="keyword">const</span> Port&amp; p);</span><br><span class="line">	Port&amp; <span class="keyword">operator</span> += (<span class="keyword">int</span> b);</span><br><span class="line">	Port&amp; <span class="keyword">operator</span>-=(<span class="keyword">int</span> b);</span><br><span class="line">	<span class="function"><span class="keyword">int</span> <span class="title">Bottlecount</span><span class="params">()</span> <span class="keyword">const</span> </span>&#123; <span class="keyword">return</span> bottles; &#125;</span><br><span class="line">	<span class="function"><span class="keyword">virtual</span> <span class="keyword">void</span> <span class="title">show</span><span class="params">()</span> <span class="keyword">const</span></span>;</span><br><span class="line">	<span class="keyword">friend</span> ostream&amp; <span class="keyword">operator</span>&lt;&lt;(ostream&amp; os, <span class="keyword">const</span> Port&amp; p);</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="meta-keyword">endif</span></span></span><br></pre></td></tr></table></figure>

]]></content>
      <categories>
        <category>C/C++</category>
      </categories>
      <tags>
        <tag>友元</tag>
      </tags>
  </entry>
  <entry>
    <title>割圆法Pi</title>
    <url>/2021/09/19/%E5%89%B2%E5%9C%86%E6%B3%95%E6%B1%82Pi/</url>
    <content><![CDATA[<h1 id="题目"><a href="#题目" class="headerlink" title="题目"></a>题目</h1><p>采用割圆术计算圆周率，即对一个圆先割出一个正方形，再割出4个等腰三角形，再割出8个等腰三角形，后面依此类推，把这些割出的图形面积相加即为圆的面积，然后除以圆的半径的平方，最终得到圆周率。 </p>
<a id="more"></a>

<h1 id="分析"><a href="#分析" class="headerlink" title="分析"></a>分析</h1><h2 id="方法1"><a href="#方法1" class="headerlink" title="方法1"></a>方法1</h2><p>首先这道题所描述的割圆法，与我们以往认知的割圆法有所不同，本题是以面积趋近圆，最后用数学公式<code>S=pi*r^2</code>求出pi</p>
<p>按照题目所述先割正方形，再割三角形的方法，用代码实现极为复杂。通过分析题目我们得知，可以将每次分割的三角形与起初的正方形结合，看作一个正多边形求解。通过连接圆心，将正多边形分解为三角形，利用数学公式<code>S=1/2*a*b*sina</code>求出一个三角形的面积。</p>
<p><img src="/2021/09/19/%E5%89%B2%E5%9C%86%E6%B3%95%E6%B1%82Pi/p1.bmp" alt="image1"></p>
<p>观察规律得知三角形的个数为4，8，16呈2的指数次幂递增，易得多边形面积，可得pi</p>
<h2 id="方法2"><a href="#方法2" class="headerlink" title="方法2"></a>方法2</h2><p><img src="/2021/09/19/%E5%89%B2%E5%9C%86%E6%B3%95%E6%B1%82Pi/p2.bmp" alt="image2"></p>
<p>另一种方法利用勾股定理，代替了角度。首先利用半径得出了正方形的边长，进而根据边长与半径的关系计算出三角形的高，得出单个三角形的面积，如上图。然后利用勾股定理算出三角形的斜边长c，作为下一个三角形的底边长。因此类推，面积易得。</p>
<h1 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h1><h2 id="方法1-1"><a href="#方法1-1" class="headerlink" title="方法1"></a>方法1</h2><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.codeslogan.Foundation;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> <span class="keyword">static</span> java.lang.Math.*;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment"> * <span class="doctag">@PackageName</span>: com.codeslogan.Foundation</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@ClassName</span>: Test_Pi</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Description</span>:</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Author</span>: codeslogan</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Date</span>: 2021-09-18 19:06</span></span><br><span class="line"><span class="comment">   */</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Test_Pi</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">double</span> s = <span class="number">0.0</span>; <span class="comment">//面积</span></span><br><span class="line">        <span class="keyword">double</span> r = <span class="number">10.0</span>; <span class="comment">//半径</span></span><br><span class="line">        <span class="keyword">double</span> myPi = <span class="number">0.0</span>; <span class="comment">//PI</span></span><br><span class="line"></span><br><span class="line">​        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">2</span>; i &lt;= <span class="number">100</span> ; i++) &#123;</span><br><span class="line">​            <span class="keyword">double</span> n = pow(<span class="number">2</span>,i); <span class="comment">//圆的分割块数</span></span><br><span class="line">​            s = n * <span class="number">1</span>/<span class="number">2</span> * pow(r,<span class="number">2</span>) * sin(toRadians(<span class="number">360</span>/n)); <span class="comment">//S=1/2*a*b*sina</span></span><br><span class="line">​            myPi = s / pow(r,<span class="number">2</span>); <span class="comment">// s=pi*r^2</span></span><br><span class="line">​            System.out.println(myPi);</span><br><span class="line">​        &#125;</span><br><span class="line">​    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="方法2-1"><a href="#方法2-1" class="headerlink" title="方法2"></a>方法2</h2><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.codeslogan.Foundation;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> <span class="keyword">static</span> java.lang.Math.pow;</span><br><span class="line"><span class="keyword">import</span> <span class="keyword">static</span> java.lang.Math.sqrt;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">CalculatePI</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">int</span> n = <span class="number">100</span>;</span><br><span class="line">        <span class="keyword">double</span> s;</span><br><span class="line">        <span class="keyword">double</span> totOfS = <span class="number">0.0</span>;</span><br><span class="line">        <span class="keyword">double</span> r = <span class="number">1.0</span>;</span><br><span class="line">        <span class="keyword">double</span> a = getSquareSide(r);</span><br><span class="line">        totOfS+=a*a;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">2</span>; i &lt; n; i++) &#123;</span><br><span class="line">            <span class="keyword">double</span> h = getTriangleH(a, r); <span class="comment">//获取三角形的高</span></span><br><span class="line">            s=a*h/<span class="number">2</span>;</span><br><span class="line">            totOfS += s*pow(<span class="number">2</span>,i);</span><br><span class="line">            a = getTriangleC(h, a); <span class="comment">//获取斜边长</span></span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">double</span> pi = totOfS/pow(r,<span class="number">2</span>);</span><br><span class="line">        System.out.println(<span class="string">&quot;Pi is &quot;</span> + pi);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">double</span> <span class="title">getSquareSide</span><span class="params">(<span class="keyword">double</span> r)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> sqrt(<span class="number">2</span>) * r;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">double</span> <span class="title">getTriangleH</span><span class="params">(<span class="keyword">double</span> a, <span class="keyword">double</span> r)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">double</span> h = r - sqrt(pow(r,<span class="number">2</span>) - pow(a/<span class="number">2</span>,<span class="number">2</span>));</span><br><span class="line">        <span class="keyword">return</span> h;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">double</span> <span class="title">getTriangleC</span><span class="params">(<span class="keyword">double</span> h, <span class="keyword">double</span> a)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">double</span> y = sqrt(pow(h,<span class="number">2</span>)+pow(a/<span class="number">2</span>,<span class="number">2</span>));</span><br><span class="line">        <span class="keyword">return</span> y;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>]]></content>
      <categories>
        <category>Java</category>
      </categories>
      <tags>
        <tag>Java</tag>
      </tags>
  </entry>
  <entry>
    <title>回溯算法解决01背包问题</title>
    <url>/2021/09/02/%E5%9B%9E%E6%BA%AF%E6%B3%95%E8%A7%A3%E5%86%B301%E8%83%8C%E5%8C%85%E9%97%AE%E9%A2%98(Java)/</url>
    <content><![CDATA[<p>﻿先前用C语言很容易实现了一个回溯算法，但转到Java后由于面向对象的原因，一时不知道如何处理变量。今天学习了static和final关键字，正好做一个练习。<br><strong>static: 定义一个类变量，使当前变量可以此类中的任意方法访问</strong><br><strong>final: 定义一个常量</strong></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> Foundation;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@PackageName</span>: Foundation</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@ClassName</span>: Bag</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Description</span>: 回溯法实现01背包问题及final, static关键字的使用</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Author</span>: codeslogan</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Date</span>: 2021-09-02 16:00</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Bag</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">static</span> <span class="keyword">final</span> <span class="keyword">int</span> N = <span class="number">3</span>;  <span class="comment">//3件物品</span></span><br><span class="line">    <span class="keyword">static</span> <span class="keyword">final</span> <span class="keyword">int</span> W = <span class="number">16</span>; <span class="comment">//限重16</span></span><br><span class="line">    <span class="keyword">static</span> <span class="keyword">int</span> []w = &#123;<span class="number">10</span>, <span class="number">8</span>, <span class="number">5</span>&#125;; <span class="comment">//每件物品的重量</span></span><br><span class="line">    <span class="keyword">static</span> <span class="keyword">int</span> []v = &#123;<span class="number">5</span>, <span class="number">4</span>, <span class="number">1</span>&#125;; <span class="comment">//每件物品的价值</span></span><br><span class="line">    <span class="keyword">static</span> <span class="keyword">int</span> curValue; <span class="comment">//记录当前的价值</span></span><br><span class="line">    <span class="keyword">static</span> <span class="keyword">int</span> curWeight;</span><br><span class="line">    <span class="keyword">static</span> <span class="keyword">int</span> bestValue;</span><br><span class="line">    <span class="keyword">static</span> <span class="keyword">int</span> []x = <span class="keyword">new</span> <span class="keyword">int</span>[<span class="number">3</span>];</span><br><span class="line">    <span class="keyword">static</span> <span class="keyword">int</span> []bestX = <span class="keyword">new</span> <span class="keyword">int</span>[<span class="number">3</span>];</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        backtracking(<span class="number">0</span>);</span><br><span class="line"></span><br><span class="line">        System.out.println(<span class="string">&quot;最大利润为: &quot;</span> + bestValue);</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; N; i++) &#123;</span><br><span class="line">            System.out.println(bestX[i]);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">backtracking</span><span class="params">(<span class="keyword">int</span> k)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (k &gt; N-<span class="number">1</span>) &#123;  <span class="comment">//递归基，结算并退出此重调用</span></span><br><span class="line">            <span class="keyword">if</span> (bestValue &lt; curValue) &#123;</span><br><span class="line">                bestValue = curValue;</span><br><span class="line">                <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; N; i++) &#123;</span><br><span class="line">                    bestX[i] = x[i];</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt;= <span class="number">1</span>; i++) &#123; <span class="comment">//循环01</span></span><br><span class="line">                x[k] = i;</span><br><span class="line">                <span class="keyword">if</span> (i == <span class="number">0</span>) &#123;</span><br><span class="line">                    backtracking(k+<span class="number">1</span>);</span><br><span class="line">                &#125;</span><br><span class="line">                <span class="keyword">else</span> &#123;</span><br><span class="line">                    <span class="keyword">if</span> (curWeight + w[k] &lt; W) &#123;</span><br><span class="line">                        curWeight += w[k];</span><br><span class="line">                        curValue += v[k];</span><br><span class="line">                        backtracking(k+<span class="number">1</span>);</span><br><span class="line">                        curWeight -= w[k]; <span class="comment">//回溯后还原原先情况</span></span><br><span class="line">                        curValue -= v[k];</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>

]]></content>
      <categories>
        <category>算法</category>
      </categories>
      <tags>
        <tag>算法</tag>
      </tags>
  </entry>
  <entry>
    <title>基础算法</title>
    <url>/2022/01/15/%E5%9F%BA%E7%A1%80%E7%AE%97%E6%B3%95/</url>
    <content><![CDATA[<h1 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h1><p>本文记录算法竞赛备赛过程中所使用的基础算法，其中包括排序，差分，高精度运算等。一是为了准备蓝桥，二是读研时的机试，以及数据结构与算法方面的知识</p>
<h1 id="排序"><a href="#排序" class="headerlink" title="排序"></a>排序</h1><blockquote>
<p>需注意边界问题</p>
</blockquote>
<h2 id="快速排序"><a href="#快速排序" class="headerlink" title="快速排序"></a>快速排序</h2><ol>
<li>确定分界点</li>
<li>调整区间，使x左边的区间都小于等于x（此时区间内不一定是有序的），右边则大于</li>
<li>递归处理左右两段</li>
</ol>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">quick_sort</span><span class="params">(<span class="keyword">int</span> q[], <span class="keyword">int</span> l, <span class="keyword">int</span> r)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (l &gt;= r) <span class="keyword">return</span>;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">int</span> x = q[l + r &gt;&gt; <span class="number">1</span>], i = l - <span class="number">1</span>, j = r + <span class="number">1</span>;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">while</span> (i &lt; j) &#123;</span><br><span class="line">        <span class="keyword">do</span> i++; <span class="keyword">while</span> (q[i] &lt; x);</span><br><span class="line">        <span class="keyword">do</span> j--; <span class="keyword">while</span> (q[j] &gt; x);</span><br><span class="line">        <span class="keyword">if</span> (i &lt; j) swap(q[i], q[j]);</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    quick_sort(q, l, j);</span><br><span class="line">    quick_sort(q, j+<span class="number">1</span>, r);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p><a href="https://www.acwing.com/problem/content/787/">Acwing785.快速排序</a></p>
<h2 id="归并排序"><a href="#归并排序" class="headerlink" title="归并排序"></a>归并排序</h2><ol>
<li>确定分界点为首末中点</li>
<li>以中点为界，递归排序中点两侧使其有序</li>
<li>归并，合二为一</li>
</ol>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">merge_sort</span><span class="params">(<span class="keyword">int</span> q[], <span class="keyword">int</span> l, <span class="keyword">int</span> r)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (l &gt;= r) <span class="keyword">return</span>;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">// 拆分过程</span></span><br><span class="line">    <span class="keyword">int</span> mid = l + r &gt;&gt; <span class="number">1</span>;</span><br><span class="line">    merge_sort(q, l, mid), merge_sort(q, mid+<span class="number">1</span>, r);</span><br><span class="line">    </span><br><span class="line">    <span class="comment">// 合并两个有序序列</span></span><br><span class="line">    <span class="keyword">int</span> k = <span class="number">0</span>, i = l, j = mid+<span class="number">1</span>;</span><br><span class="line">    <span class="keyword">while</span> (i &lt;= mid &amp;&amp; j &lt;= r) </span><br><span class="line">        <span class="keyword">if</span> (q[i] &lt;= q[j]) tmp[k++] = q[i++];</span><br><span class="line">        <span class="keyword">else</span> tmp[k++] = q[j++];</span><br><span class="line">    <span class="keyword">while</span> (i &lt;= mid) tmp[k++] = q[i++];</span><br><span class="line">    <span class="keyword">while</span> (j &lt;= r) tmp[k++] = q[j++];</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">for</span> (i = l, j = <span class="number">0</span>; i &lt;= r; i ++, j++ ) q[i] = tmp[j]; </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p><a href="https://www.acwing.com/problem/content/789/">Acwing787.归并排序</a></p>
<h1 id="二分"><a href="#二分" class="headerlink" title="二分"></a>二分</h1><h2 id="整数"><a href="#整数" class="headerlink" title="整数"></a>整数</h2><blockquote>
<p>版本一</p>
</blockquote>
<p>边界点归于左半边，从而将<code>[l, r]</code>拆分成<code>[l, mid]</code>和<code>[mid+1, r]</code></p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="keyword">int</span> l = <span class="number">0</span>, r = n<span class="number">-1</span>;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">bsearch_1</span><span class="params">(<span class="keyword">int</span> l, <span class="keyword">int</span> r)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">while</span> (l &lt; r)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">int</span> mid = l + r &gt;&gt; <span class="number">1</span>;</span><br><span class="line">        <span class="keyword">if</span> (check(mid)) r = mid;</span><br><span class="line">        <span class="keyword">else</span> l = mid + <span class="number">1</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> l;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<blockquote>
<p>版本二</p>
</blockquote>
<p>边界点归于右半边，从而将<code>[l, r]</code>拆分成<code>[l, mid-1]</code>和<code>[mid, r]</code></p>
<p>注意，在取mid时要加1</p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="keyword">int</span> l = <span class="number">0</span>, r = n<span class="number">-1</span>;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">bsearch_2</span><span class="params">(<span class="keyword">int</span> l, <span class="keyword">int</span> r)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">while</span> (l &lt; r)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">int</span> mid = l + r + <span class="number">1</span> &gt;&gt; <span class="number">1</span>;</span><br><span class="line">        <span class="keyword">if</span> (check(mid)) l = mid;</span><br><span class="line">        <span class="keyword">else</span> r = mid - <span class="number">1</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> l;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p><a href="https://www.acwing.com/problem/content/791/">Acwing789.数的范围</a></p>
<h2 id="浮点数"><a href="#浮点数" class="headerlink" title="浮点数"></a>浮点数</h2><p>相较于整数不用考虑边界的加一减一问题</p>
<p>保留4位小数，则保留精度到1e-6；保留6位小数，则保留精度到1e-8</p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="keyword">double</span> l = <span class="number">0</span>, r = x;</span><br><span class="line"><span class="keyword">while</span> (r - l &gt; <span class="number">1e-8</span>) &#123;</span><br><span class="line">    <span class="keyword">double</span> mid = (l+r) / <span class="number">2</span>;</span><br><span class="line">    <span class="keyword">if</span> (mid * mid &gt;= x) r = mid;</span><br><span class="line">    <span class="keyword">else</span> l = mid;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h1 id="高精度"><a href="#高精度" class="headerlink" title="高精度"></a>高精度</h1><p>由于在C++中没有处理大整数的类，我们需要用字符串<code>string</code>，来处理大整数的加减乘除</p>
<h2 id="加法"><a href="#加法" class="headerlink" title="加法"></a>加法</h2><ul>
<li>大整数的存储：由于进位的缘故，我们需要将整数<strong>逆序</strong>的读入<code>vector</code>容器当中</li>
<li>大整数的计算：模拟人工计算，从末位开始加减，用取余的方式进行进位。如果最后还有余数，则最后一位需进1</li>
</ul>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="comment">// big number</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;vector&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt; <span class="title">add</span><span class="params">(<span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt; &amp;A, <span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt; &amp;B)</span> </span>&#123;</span><br><span class="line">    <span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt; C;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">int</span> t = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; A.size() || i &lt; B.size(); i++) &#123;</span><br><span class="line">        <span class="keyword">if</span> (i &lt; A.size()) t += A[i];</span><br><span class="line">        <span class="keyword">if</span> (i &lt; B.size()) t += B[i];</span><br><span class="line">        C.push_back(t % <span class="number">10</span>);</span><br><span class="line">        t /= <span class="number">10</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">if</span> (t) C.push_back(<span class="number">1</span>);</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">return</span> C;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="built_in">string</span> a, b;</span><br><span class="line">    <span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt; A, B;</span><br><span class="line">    <span class="built_in">cin</span> &gt;&gt; a &gt;&gt; b;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = a.size() - <span class="number">1</span>; i &gt;= <span class="number">0</span>; i--) A.push_back(a[i] - <span class="string">&#x27;0&#x27;</span>);</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = b.size() - <span class="number">1</span>; i &gt;= <span class="number">0</span>; i--) B.push_back(b[i] - <span class="string">&#x27;0&#x27;</span>);</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">auto</span> C = add(A, B);</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = C.size() - <span class="number">1</span>; i &gt;= <span class="number">0</span>; i--) <span class="built_in">printf</span>(<span class="string">&quot;%d&quot;</span>, C[i]);</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="减法"><a href="#减法" class="headerlink" title="减法"></a>减法</h2><ul>
<li>主要的难点在于借位与进位</li>
</ul>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;vector&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 判断A&gt;=B</span></span><br><span class="line"><span class="function"><span class="keyword">bool</span> <span class="title">cmp</span><span class="params">(<span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt; &amp;A, <span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt; &amp;B)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (A.size() != B.size()) <span class="keyword">return</span> A.size() &gt; B.size();</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = A.size()<span class="number">-1</span>; i &gt;= <span class="number">0</span>; i--) &#123;</span><br><span class="line">        <span class="keyword">if</span> (A[i] != B[i])</span><br><span class="line">            <span class="keyword">return</span> A[i] &gt; B[i];</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// A-B，在A&gt;=B的前提下</span></span><br><span class="line"><span class="function"><span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt; <span class="title">sub</span><span class="params">(<span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt; &amp;A, <span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt; &amp;B)</span> </span>&#123;</span><br><span class="line">    <span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt; C;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>, t = <span class="number">0</span>; i &lt; A.size(); i++) &#123;</span><br><span class="line">        t = A[i] - t;</span><br><span class="line">        <span class="keyword">if</span> (i &lt; B.size()) t -= B[i];</span><br><span class="line">        C.push_back((t + <span class="number">10</span>) % <span class="number">10</span>); <span class="comment">//巧妙解决借位下的计算</span></span><br><span class="line">        <span class="keyword">if</span> (t &lt; <span class="number">0</span>) t = <span class="number">1</span>;</span><br><span class="line">        <span class="keyword">else</span> t = <span class="number">0</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">// 避免出现类似001的情况</span></span><br><span class="line">    <span class="keyword">while</span> (C.size() &gt; <span class="number">1</span> &amp;&amp; C.back() == <span class="number">0</span>) C.pop_back(); <span class="comment">//去掉前导0</span></span><br><span class="line">    </span><br><span class="line">    <span class="keyword">return</span> C;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="built_in">string</span> a, b;</span><br><span class="line">    <span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt; A, B;</span><br><span class="line">    <span class="built_in">cin</span> &gt;&gt; a &gt;&gt; b;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = a.size() - <span class="number">1</span>; i &gt;= <span class="number">0</span>; i--) A.push_back(a[i] - <span class="string">&#x27;0&#x27;</span>);</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = b.size() - <span class="number">1</span>; i &gt;= <span class="number">0</span>; i--) B.push_back(b[i] - <span class="string">&#x27;0&#x27;</span>);</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">if</span> (cmp(A, B)) &#123;</span><br><span class="line">        <span class="keyword">auto</span> C = sub(A, B);</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = C.size() - <span class="number">1</span>; i &gt;= <span class="number">0</span>; i--) <span class="built_in">printf</span>(<span class="string">&quot;%d&quot;</span>, C[i]);</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        <span class="keyword">auto</span> C = sub(B, A);</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;-&quot;</span>);</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = C.size() - <span class="number">1</span>; i &gt;= <span class="number">0</span>; i--) <span class="built_in">printf</span>(<span class="string">&quot;%d&quot;</span>, C[i]);</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>



<h2 id="乘法"><a href="#乘法" class="headerlink" title="乘法"></a>乘法</h2><ul>
<li>注意如<code>t</code>还未变为0时，需要重复执行</li>
</ul>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;vector&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt; <span class="title">mul</span><span class="params">(<span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt; A, <span class="keyword">int</span> b)</span> </span>&#123;</span><br><span class="line">    <span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt; C;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">int</span> t = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; A.size() || t; i++) &#123;</span><br><span class="line">        <span class="keyword">if</span> (i &lt; A.size()) t = A[i] * b;</span><br><span class="line">        C.push_back(t % <span class="number">10</span>);</span><br><span class="line">        t /= <span class="number">10</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">return</span> C;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="built_in">string</span> a;</span><br><span class="line">    <span class="keyword">int</span> b;</span><br><span class="line">    <span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt; A;</span><br><span class="line">    <span class="built_in">cin</span> &gt;&gt; a &gt;&gt; b;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i = a.size() - <span class="number">1</span>; i &gt;= <span class="number">0</span>; i--) A.push_back(a[i] - <span class="string">&#x27;0&#x27;</span>);</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">auto</span> C = mul(A, b);</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = C.size() - <span class="number">1</span>; i &gt;= <span class="number">0</span>; i--) <span class="built_in">printf</span>(<span class="string">&quot;%d&quot;</span>, C[i]);</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="除法"><a href="#除法" class="headerlink" title="除法"></a>除法</h2><ul>
<li>余数需要同时传入r的引用</li>
<li>C最后要进行一次倒置，来保证与其它四则运算输出兼容</li>
</ul>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;vector&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;algorithm&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">// A / b，余数r，商为C</span></span><br><span class="line"><span class="function"><span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt; <span class="title">div</span><span class="params">(<span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt; &amp;A, <span class="keyword">int</span> b, <span class="keyword">int</span>&amp; r)</span> </span>&#123;</span><br><span class="line">    <span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt; C;</span><br><span class="line">    </span><br><span class="line">    r = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i = A.size()<span class="number">-1</span>; i &gt;= <span class="number">0</span>; i--) &#123;</span><br><span class="line">        r = r * <span class="number">10</span> + A[i];</span><br><span class="line">        C.push_back(r / b); <span class="comment">// 求商</span></span><br><span class="line">        r %= b; </span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    reverse(C.begin(), C.end());</span><br><span class="line">    <span class="keyword">while</span>(C.size() &gt; <span class="number">1</span> &amp;&amp; C.back() == <span class="number">0</span>) C.pop_back();</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">return</span> C;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="built_in">string</span> a;</span><br><span class="line">    <span class="keyword">int</span> b;</span><br><span class="line">    <span class="built_in">cin</span> &gt;&gt; a &gt;&gt; b;</span><br><span class="line">    </span><br><span class="line">    <span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt; A;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = a.size()- <span class="number">1</span>; i &gt;= <span class="number">0</span>; i--) A.push_back(a[i] - <span class="string">&#x27;0&#x27;</span>);</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">int</span> r;</span><br><span class="line">    <span class="keyword">auto</span> C = div(A, b, r);</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = C.size()<span class="number">-1</span>; i &gt;= <span class="number">0</span>; i--) <span class="built_in">printf</span>(<span class="string">&quot;%d&quot;</span>, C[i]);</span><br><span class="line">    <span class="built_in">cout</span> &lt;&lt; <span class="built_in">endl</span> &lt;&lt; r &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>



<h1 id="前缀和"><a href="#前缀和" class="headerlink" title="前缀和"></a>前缀和</h1><p>前缀和指数列中前n个数的和（1 &lt; n &lt; 数列长度），利用前缀和可以求出<code>数列任一区间内</code>数的和</p>
<p>本质是高中数列的一个知识点<code>ai = S(i) - S(i-1)</code></p>
<p>同时这也体现出了算法题不过于数学思想的一种体现，不会数学的确也可以写代码，但肯定不能写好代码</p>
<p>我们计算机专业的同学学习专业课的同时，也不可忽视数学的学习</p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> N = <span class="number">100010</span>;</span><br><span class="line"><span class="keyword">int</span> n, m;</span><br><span class="line"><span class="keyword">int</span> a[N], s[N];</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="built_in">scanf</span>(<span class="string">&quot;%d%d&quot;</span>, &amp;n, &amp;m);</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= n; i ++ ) <span class="built_in">scanf</span>(<span class="string">&quot;%d&quot;</span>, &amp;a[i]);</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= n; i ++ ) s[i] = s[i<span class="number">-1</span>] + a[i]; <span class="comment">// 初始化前缀和</span></span><br><span class="line">    </span><br><span class="line">    <span class="keyword">while</span> (m -- ) &#123;</span><br><span class="line">        <span class="keyword">int</span> l, r;</span><br><span class="line">        <span class="built_in">scanf</span>(<span class="string">&quot;%d%d&quot;</span>, &amp;l, &amp;r);</span><br><span class="line">        <span class="comment">// 计算任一区间和</span></span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;%d\n&quot;</span>, s[r] - s[l<span class="number">-1</span>]);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h1 id="差分"><a href="#差分" class="headerlink" title="差分"></a>差分</h1><blockquote>
<p> 与前缀和互为<strong>逆运算</strong></p>
</blockquote>
<p>创建一数组b，使得数组a为数组b的<strong>前缀和</strong>，数组b为数组a的<strong>差分</strong></p>
<p>构造方法：b[i] = a[i] - a[i - 1]</p>
<p>此处使用了一个<em>虚拟</em>的构造方式（在数组一个位置加上一个数，那么在它的下一个位置减去这一数）</p>
<p>应用：对于a数组的任意区间[l, r]，令其加上一个数，而不改变其它值</p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> N = <span class="number">100010</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">int</span> n, m;</span><br><span class="line"><span class="keyword">int</span> a[N], b[N];</span><br><span class="line"></span><br><span class="line"><span class="comment">// 核心代码</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">insert</span><span class="params">(<span class="keyword">int</span> l, <span class="keyword">int</span> r, <span class="keyword">int</span> c)</span> </span>&#123; </span><br><span class="line">    b[l] += c;</span><br><span class="line">    b[r + <span class="number">1</span>] -= c;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="built_in">scanf</span>(<span class="string">&quot;%d%d&quot;</span>, &amp;n, &amp;m);</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= n; i ++ ) <span class="built_in">scanf</span>(<span class="string">&quot;%d&quot;</span>, &amp;a[i]);</span><br><span class="line">    </span><br><span class="line">    <span class="comment">// 在数组一个位置加上一个数，那么在它的下一个位置减去这一数</span></span><br><span class="line">    <span class="comment">// 等同于b[i] = a[i] - a[i - 1]</span></span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= n; i ++ ) insert(i, i, a[i]);</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">while</span> (m -- ) &#123;</span><br><span class="line">        <span class="keyword">int</span> l, r, c;</span><br><span class="line">        <span class="built_in">scanf</span>(<span class="string">&quot;%d%d%d&quot;</span>, &amp;l, &amp;r, &amp;c);</span><br><span class="line">        <span class="comment">// 在[l, r]区间内加上c</span></span><br><span class="line">        insert(l, r, c);</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">// 计算前缀和，将数组b还原成数组a</span></span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= n; i ++ ) b[i] += b[i<span class="number">-1</span>];</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= n; i ++ ) <span class="built_in">printf</span>(<span class="string">&quot;%d &quot;</span>, b[i]);</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p><a href="https://www.acwing.com/problem/content/799/">AcWing797.差分</a></p>
<h1 id="双指针算法"><a href="#双指针算法" class="headerlink" title="双指针算法"></a>双指针算法</h1><p>常用问题分类：</p>
<ol>
<li>对于一个序列，用两个指针维护一段区间</li>
<li>对于两个序列，维护某种次序。比如归并排序中合并两个有序序列的操作</li>
</ol>
<p>每个双指针算法都由一个朴素算法变化而来</p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 朴素解法 时间复杂度o(n^2)</span></span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; n; i++)</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> j = <span class="number">0</span>; j &lt;= i; j++)</span><br><span class="line">        <span class="keyword">if</span> (!check(j, i)) &#123;</span><br><span class="line">            res = max(res, i - j + <span class="number">1</span>);</span><br><span class="line">        &#125;</span><br></pre></td></tr></table></figure>

<p>关于双指针算法的时间复杂度为o(n)：</p>
<p>因为j只初始化了一次，且在过程中，j只增不减</p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 双指针算法 时间复杂度o(n)</span></span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>, j = <span class="number">0</span>; i &lt; n; i++) &#123;</span><br><span class="line">    <span class="keyword">while</span> (j &lt;= i &amp;&amp; check(j, i)) j++;</span><br><span class="line">    res = max(res, i - j + <span class="number">1</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="最长不重复子序列"><a href="#最长不重复子序列" class="headerlink" title="最长不重复子序列"></a>最长不重复子序列</h2><p>序列不一定递增</p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> N = <span class="number">1e6</span> + <span class="number">10</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">int</span> a[N], s[N];</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="keyword">int</span> n;</span><br><span class="line">    <span class="built_in">scanf</span>(<span class="string">&quot;%d&quot;</span>, &amp;n);</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; n; i ++ ) <span class="built_in">scanf</span>(<span class="string">&quot;%d&quot;</span>, &amp;a[i]);</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">int</span> res = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>, j = <span class="number">0</span>; i &lt; n; i ++ ) &#123;</span><br><span class="line">        s[a[i]]++;</span><br><span class="line">        <span class="keyword">while</span> (s[a[i]] &gt; <span class="number">1</span>) &#123;</span><br><span class="line">            s[a[j]]--;</span><br><span class="line">            j++;</span><br><span class="line">        &#125;</span><br><span class="line">        res = max(res, i - j + <span class="number">1</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">cout</span> &lt;&lt; res &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>





<h1 id="位运算"><a href="#位运算" class="headerlink" title="位运算"></a>位运算</h1><h1 id="离散化"><a href="#离散化" class="headerlink" title="离散化"></a>离散化</h1><h1 id="区间合并"><a href="#区间合并" class="headerlink" title="区间合并"></a>区间合并</h1><h1 id="参考资料"><a href="#参考资料" class="headerlink" title="参考资料"></a>参考资料</h1><p><a href="https://www.acwing.com/activity/content/11/">Acwing算法基础课</a></p>
<p>这里强烈推荐y总的算法基础课！！！`</p>
]]></content>
      <categories>
        <category>算法</category>
      </categories>
      <tags>
        <tag>算法</tag>
        <tag>C++</tag>
      </tags>
  </entry>
  <entry>
    <title>并查集</title>
    <url>/2021/09/22/%E5%A4%A9%E6%A2%AF%E8%B5%9B%E5%B9%B6%E6%9F%A5%E9%9B%86/</url>
    <content><![CDATA[<h1 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h1><p>本文介绍的是并查集，它属于我们所学的数据结构树的一个特例，经常用于求解各结点之间的关联问题</p>
<h1 id="1-初始化结点"><a href="#1-初始化结点" class="headerlink" title="1. 初始化结点"></a>1. 初始化结点</h1><figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">init</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= n; i++)</span><br><span class="line">        father[i] = i;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h1 id="2-查找一个结点的根结点"><a href="#2-查找一个结点的根结点" class="headerlink" title="2. 查找一个结点的根结点"></a>2. 查找一个结点的根结点</h1><figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">get</span><span class="params">(<span class="keyword">int</span> x)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(father[x] == x) <span class="comment">//递归基，直至找到根结点</span></span><br><span class="line">        <span class="keyword">return</span> x;</span><br><span class="line">    <span class="keyword">return</span> father[x] = get(father[x]); <span class="comment">//使结点直接指向根结点</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h1 id="3-合并"><a href="#3-合并" class="headerlink" title="3. 合并"></a>3. 合并</h1><figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">merge</span><span class="params">(<span class="keyword">int</span> x, <span class="keyword">int</span> y)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    x = get(x); <span class="comment">//找到x结点的根结点</span></span><br><span class="line">    y = get(y); </span><br><span class="line">    <span class="keyword">if</span>(x != y) <span class="comment">//若二者不等</span></span><br><span class="line">        father[y] = x; <span class="comment">//让y指向x</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h1 id="4-例题-luogu"><a href="#4-例题-luogu" class="headerlink" title="4. 例题(luogu)"></a>4. 例题(luogu)</h1><h2 id="4-1-题目背景"><a href="#4-1-题目背景" class="headerlink" title="4.1 题目背景"></a>4.1 题目背景</h2><p>若某个家族人员过于庞大，要判断两个是否是亲戚，确实还很不容易，现在给出某个亲戚关系图，求任意给出的两个人是否具有亲戚关系。</p>
<h2 id="4-2-题目描述"><a href="#4-2-题目描述" class="headerlink" title="4.2 题目描述"></a>4.2 题目描述</h2><p>规定：x和y是亲戚，y和z是亲戚，那么x和z也是亲戚。如果x,y是亲戚，那么x的亲戚都是y的亲戚，y的亲戚也都是x的亲戚。</p>
<h2 id="4-3-输入格式"><a href="#4-3-输入格式" class="headerlink" title="4.3 输入格式"></a>4.3 输入格式</h2><p>第一行：三个整数n,m,p，（n&lt;=5000,m&lt;=5000,p&lt;=5000），分别表示有n个人，m个亲戚关系，询问p对亲戚关系。</p>
<p>以下m行：每行两个数Mi，Mj，1&lt;=Mi，Mj&lt;=N，表示Mi和Mj具有亲戚关系。</p>
<p>接下来p行：每行两个数Pi，Pj，询问Pi和Pj是否具有亲戚关系。</p>
<h2 id="4-4-输出格式"><a href="#4-4-输出格式" class="headerlink" title="4.4 输出格式"></a>4.4 输出格式</h2><p>P行，每行一个’Yes’或’No’。表示第i个询问的答案为“具有”或“不具有”亲戚关系。</p>
<h2 id="4-5-输入输出样例"><a href="#4-5-输入输出样例" class="headerlink" title="4.5 输入输出样例"></a>4.5 输入输出样例</h2><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">6 5 3</span><br><span class="line">1 2</span><br><span class="line">1 5</span><br><span class="line">3 4</span><br><span class="line">5 2</span><br><span class="line">1 3</span><br><span class="line">1 4</span><br><span class="line">2 3</span><br><span class="line">5 6</span><br></pre></td></tr></table></figure>

<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">Yes</span><br><span class="line">Yes</span><br><span class="line">No</span><br></pre></td></tr></table></figure>

<h2 id="4-6-solution"><a href="#4-6-solution" class="headerlink" title="4.6 solution"></a>4.6 solution</h2><figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="keyword">int</span> n, m, p, a, b, c, d, father[<span class="number">5005</span>];</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">get</span><span class="params">(<span class="keyword">int</span> x)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(father[x] == x)</span><br><span class="line">        <span class="keyword">return</span> x;</span><br><span class="line">    <span class="keyword">return</span> father[x] = get(father[x]);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">merge</span><span class="params">(<span class="keyword">int</span> x, <span class="keyword">int</span> y)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    x = get(x);</span><br><span class="line">    y = get(y);</span><br><span class="line">    <span class="keyword">if</span>(x != y)</span><br><span class="line">        father[y] = x;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="built_in">cin</span> &gt;&gt; n &gt;&gt; m &gt;&gt; p;</span><br><span class="line">    <span class="comment">//初始化</span></span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= n; i++)</span><br><span class="line">        father[i] = i;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; m; i++)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="built_in">cin</span> &gt;&gt; a &gt;&gt; b;</span><br><span class="line">        merge(a, b);        </span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">while</span>(p--)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="built_in">cin</span> &gt;&gt; c &gt;&gt; d;</span><br><span class="line">        c = get(c);</span><br><span class="line">        d = get(d);</span><br><span class="line">        <span class="keyword">if</span>(c == d)</span><br><span class="line">            <span class="built_in">cout</span> &lt;&lt; <span class="string">&quot;Yes&quot;</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">        <span class="keyword">else</span></span><br><span class="line">            <span class="built_in">cout</span> &lt;&lt; <span class="string">&quot;No&quot;</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

]]></content>
      <categories>
        <category>天梯赛</category>
      </categories>
      <tags>
        <tag>数据结构</tag>
      </tags>
  </entry>
  <entry>
    <title>用conda安装pytorch</title>
    <url>/2020/11/01/%E7%94%A8conda%E5%AE%89%E8%A3%85pytorch/</url>
    <content><![CDATA[<h1 id="Miniconda"><a href="#Miniconda" class="headerlink" title="Miniconda"></a>Miniconda</h1><h2 id="Download-amp-install"><a href="#Download-amp-install" class="headerlink" title="Download &amp; install"></a>Download &amp; install</h2><a id="more"></a>

<h2 id="环境配置"><a href="#环境配置" class="headerlink" title="环境配置"></a>环境配置</h2><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">C:\Users\huawei\miniconda3\Scripts</span><br></pre></td></tr></table></figure>

<p>将以上路径加入到环境变量的path中</p>
<h2 id="添加清华镜向源"><a href="#添加清华镜向源" class="headerlink" title="添加清华镜向源"></a>添加清华镜向源</h2><p>用途：加快下载速度，否则非常慢</p>
<p>在开始菜单里找到并打开<u>Anaconda Prompt(miniconda3)</u>,命令行窗口</p>
<p>复制粘贴以下内容</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">conda config --add channels https:&#x2F;&#x2F;mirrors.tuna.tsinghua.edu.cn&#x2F;anaconda&#x2F;pkgs&#x2F;free&#x2F;</span><br><span class="line">conda config --add channels https:&#x2F;&#x2F;mirrors.tuna.tsinghua.edu.cn&#x2F;anaconda&#x2F;pkgs&#x2F;main&#x2F;</span><br><span class="line">conda config --add channels https:&#x2F;&#x2F;mirrors.tuna.tsinghua.edu.cn&#x2F;anaconda&#x2F;cloud&#x2F;conda-forge&#x2F;</span><br><span class="line">conda config --add channels https:&#x2F;&#x2F;mirrors.tuna.tsinghua.edu.cn&#x2F;anaconda&#x2F;cloud&#x2F;bioconda&#x2F;</span><br><span class="line">conda config --set show_channel_urls yes </span><br><span class="line">conda config --get channels</span><br><span class="line">conda config --add channels https:&#x2F;&#x2F;mirrors.tuna.tsinghua.edu.cn&#x2F;anaconda&#x2F;cloud&#x2F;pytorch&#x2F;</span><br><span class="line">conda config --add channels https:&#x2F;&#x2F;mirrors.tuna.tsinghua.edu.cn&#x2F;anaconda&#x2F;cloud&#x2F;msys2&#x2F;</span><br><span class="line">conda config --add channels https:&#x2F;&#x2F;mirrors.tuna.tsinghua.edu.cn&#x2F;anaconda&#x2F;cloud&#x2F;menpo&#x2F;</span><br></pre></td></tr></table></figure>

<h2 id="创建Pytorch环境"><a href="#创建Pytorch环境" class="headerlink" title="创建Pytorch环境"></a>创建Pytorch环境</h2><p>这里是根据自己的python版本创建</p>
<p>命令行输出可查看</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">python -v</span><br></pre></td></tr></table></figure>

<p>例如我的是3.8.3</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">conda create -n pytorch python&#x3D;3.8.3</span><br></pre></td></tr></table></figure>

<p>以上命令就根据python的版本创建出了pytorch的环境</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">conda activate pytorch</span><br></pre></td></tr></table></figure>

<p>激活环境</p>
<h1 id="Pytorch"><a href="#Pytorch" class="headerlink" title="Pytorch"></a>Pytorch</h1><p>以下操作接着刚刚的命令行窗口内</p>
<h2 id="查看自己的GPU版本"><a href="#查看自己的GPU版本" class="headerlink" title="查看自己的GPU版本"></a>查看自己的GPU版本</h2><p>右键开始菜单栏-任务管理器-性能-GPU</p>
<p>根据自己的显卡选择CUDA的版本，如果不是英伟达显卡，刚选择None</p>
<p>安装命令可以在官网里获取</p>
<h2 id="Download-amp-install-1"><a href="#Download-amp-install-1" class="headerlink" title="Download&amp;install"></a>Download&amp;install</h2><p>建议删除 -c pytorch，否则会默认从官网下载，速度极慢</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">conda install pytorch torchvision torchaudio cpuonly -c pytorch</span><br></pre></td></tr></table></figure>

<h2 id="测试"><a href="#测试" class="headerlink" title="测试"></a>测试</h2><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">python #进行Python</span><br><span class="line">import torch #这步后没有报错说明安装成功</span><br></pre></td></tr></table></figure>

<p>或者</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">pip list</span><br></pre></td></tr></table></figure>

<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">(pytorch) C:\Users\huawei&gt;pip list</span><br><span class="line">Package      Version</span><br><span class="line">------------ -------------------</span><br><span class="line">certifi      2020.6.20</span><br><span class="line">cffi         1.14.3</span><br><span class="line">mkl-service  2.3.0</span><br><span class="line">numpy        1.19.2</span><br><span class="line">olefile      0.46</span><br><span class="line">Pillow       8.0.1</span><br><span class="line">pip          20.2.4</span><br><span class="line">pycparser    2.20</span><br><span class="line">setuptools   50.3.0.post20201006</span><br><span class="line">six          1.15.0</span><br><span class="line">torch        1.6.0</span><br><span class="line">torchaudio   0.6.0</span><br><span class="line">torchvision  0.2.2</span><br><span class="line">wheel        0.35.1</span><br><span class="line">wincertstore 0.2</span><br></pre></td></tr></table></figure>

<h1 id="库"><a href="#库" class="headerlink" title="库"></a>库</h1><p>直接分次复制到命令行中即可</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">conda install pandas</span><br><span class="line">conda install jupyter notebook</span><br><span class="line">conda install matplotlib</span><br><span class="line">pip install sklearn</span><br></pre></td></tr></table></figure>

]]></content>
      <categories>
        <category>ML_DL</category>
      </categories>
      <tags>
        <tag>ML</tag>
        <tag>pytorch</tag>
        <tag>conda</tag>
      </tags>
  </entry>
  <entry>
    <title>论文阅读Knowledge Vault</title>
    <url>/2021/11/25/%E8%AE%BA%E6%96%87%E9%98%85%E8%AF%BBKnowledge%20Vault/</url>
    <content><![CDATA[<h1 id="题目归属及框架"><a href="#题目归属及框架" class="headerlink" title="题目归属及框架"></a>题目归属及框架</h1><p><img src="https://img-blog.csdnimg.cn/7fb48eac4a8641b6b70a02ead96decb4.png?x-oss-process=image/watermark,type_ZHJvaWRzYW5zZmFsbGJhY2s,shadow_50,text_Q1NETiBAQ29kZVNsb2dhbg==,size_20,color_FFFFFF,t_70,g_se,x_16#pic_center" alt="在这里插入图片描述"><br><img src="https://img-blog.csdnimg.cn/160789c05d3c4cdfb0b00f3f23bd33a1.png?x-oss-process=image/watermark,type_ZHJvaWRzYW5zZmFsbGJhY2s,shadow_50,text_Q1NETiBAQ29kZVNsb2dhbg==,size_20,color_FFFFFF,t_70,g_se,x_16#pic_center" alt="在这里插入图片描述"></p>
<p><img src="https://img-blog.csdnimg.cn/833a0d828acf4b968e9e77d300fd0482.png?x-oss-process=image/watermark,type_ZHJvaWRzYW5zZmFsbGJhY2s,shadow_50,text_Q1NETiBAQ29kZVNsb2dhbg==,size_20,color_FFFFFF,t_70,g_se,x_16#pic_center" alt="在这里插入图片描述"></p>
<h1 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h1><p>谷歌公司正在打造人类历史上最大的知识库<code>Knowledge Vault</code></p>
<p>这个被冠以<code>Knowledge Vault</code>之名的知识库无需任何人工干预，就能<strong>自动搜集</strong>源自互联网的信息并将其整合成单一的事实库，内容涉及世界、人物以及相关对象。这种知识采集机制达到的广度和精度，正在日益成为各种便于机器人和智能手机理解人们对其提问的系统的基础。它有望让“谷歌”超越搜索引擎功能，像“甲骨文”（Oracle）数据库那样回答问题，甚至还能从新的视角来考察人类历史。</p>
<p>这在篇文章中，作者分析了knowledge vault(KV)知识库这一自动化的过程是如何运转的。</p>
<h1 id="概述"><a href="#概述" class="headerlink" title="概述"></a>概述</h1><p>当今世界上已经存在了很多成熟的知识库，但要使知识库的规模更大，需要探索一种自动化的方法来构建数据库。因此，作者在本文提出了一种<u>web规模的概率知识融合方法</u>，将从web上抽取的资源与现有的知识库（如freebase）相结合，并使用了<strong>监督学习</strong>。正因如此，KV的规模以以往的知识库都要来的大。</p>
<p>关键词：知识库；知识抽取；概率方法；机器学习</p>
<h1 id="动机"><a href="#动机" class="headerlink" title="动机"></a>动机</h1><ul>
<li><p>现有的知识库虽然到达了比较大的规模，但仍具有<u>不完整性</u>，例如Freebase中，71%的人没有出生地。</p>
</li>
<li><p>直接从web资源上摘录下来的信息，具有较大的<u>噪声</u>，数据无法直接利用，有很多可信度不高。</p>
</li>
</ul>
<h1 id="贡献"><a href="#贡献" class="headerlink" title="贡献"></a>贡献</h1><ol>
<li>使用已有知识库里的先验知识，与web上爬取下来的带有噪声的数据相结合。利用已有的三元组，经过知识推理判断新三元组的正确性，<strong>先验概率模型</strong>的出现解决了抽取过程中出现错误的问题。</li>
<li>KV的规模比相同的知识库大。</li>
<li>对不同的抽取方法及先验概率方法进行了详细的比较。</li>
</ol>
<h1 id="KV组件"><a href="#KV组件" class="headerlink" title="KV组件"></a>KV组件</h1><ul>
<li>抽取器<strong>Extractors</strong>：负责从web资源抽取知识，每个抽取器会对实体分配一个置信分数，以此表明该三元组的正确率</li>
<li>基于图的先验概率模型<strong>Graph-based priors</strong>：负责基于已有的知识库，来计算每个三元组的先验概率</li>
<li>知识融合<strong>Knowledge fusion</strong>：负责基于抽取器和先验概率模型，计算三元组的正确的概率</li>
</ul>
<p>s subject，p predictate</p>
<p>o object，G ExPxE的三维矩阵</p>
<p>当G(s,p,o)=1时，表示为正三元组</p>
<p>Pr(G(s, p, o) = 1|·) 计算其正确概率</p>
<h1 id="Local-closed-world-assumption-LCWA"><a href="#Local-closed-world-assumption-LCWA" class="headerlink" title="Local closed world assumption(LCWA)"></a>Local closed world assumption(LCWA)</h1><p>这是KV知识库的底层假设，所有的抽取和概率计算基于它，内容如下：</p>
<blockquote>
<p>O(s,p) as the set of existing object values for a given s and p.<br>给定一个(s,p,o)，如果(s,p,o) ∈ O(s,p)，则它是正确的<br>如果 (s,p,o) !∈ O(s,p)并且 |O(s,p)| &gt; 0，则它是错误的<br>如果|O(s,p)| = 0，我们就不打标签并把(s,p,o)扔出训练和测试集</p>
</blockquote>
<h1 id="抽取器-Extractors"><a href="#抽取器-Extractors" class="headerlink" title="抽取器(Extractors)"></a>抽取器(Extractors)</h1><h2 id="抽取方法"><a href="#抽取方法" class="headerlink" title="抽取方法"></a>抽取方法</h2><h3 id="Text-documents-TXT"><a href="#Text-documents-TXT" class="headerlink" title="Text documents(TXT)"></a>Text documents(TXT)</h3><ol>
<li>运行一套标准的NLP工具，做命名实体识别，词类标注，依赖分析和实体链接</li>
<li>用远程监督训练关系抽取器。对每一个感兴趣的谓词，从现有知识库提取含有这个谓词的实体对。然后在txt中进行匹配，抽取句子的特征和模式。</li>
</ol>
<p>为每一个谓词用逻辑回归拟合一个分类器：</p>
<p>输入：含有该谓词的sentences的features和patterns</p>
<p>训练集：根据LCWA进行标注的sentences</p>
<h3 id="HTML-trees-DOM"><a href="#HTML-trees-DOM" class="headerlink" title="HTML trees (DOM)"></a>HTML trees (DOM)</h3><p>输入：实体特征向量的词汇化路径</p>
<p>输出：被抽取三元组的得分</p>
<h3 id="HTML-tables-TBL"><a href="#HTML-tables-TBL" class="headerlink" title="HTML tables (TBL)"></a>HTML tables (TBL)</h3><ol>
<li>执行了一个命名实体链接</li>
<li>用已有的知识库，识别表格中每一列实体的关系。模棱两可的列将被直接的抛弃。</li>
<li>被抽取三元组的得分由命名实体链接系统返回</li>
</ol>
<h3 id="Human-Annotated-pages-ANO"><a href="#Human-Annotated-pages-ANO" class="headerlink" title="Human Annotated pages(ANO)"></a>Human Annotated pages(ANO)</h3><p>为不同的谓词定义了从schema.org（语义库）到FB的手工映射。</p>
<p>被抽取三元组的得分由命名实体链接系统返回</p>
<h2 id="抽取器比较"><a href="#抽取器比较" class="headerlink" title="抽取器比较"></a>抽取器比较</h2><p>通过为不同的方法计算AOC曲线，来进行比较</p>
<p><img src="https://img-blog.csdnimg.cn/2d956601fd884690917e3afe47e7c77c.png?x-oss-process=image/watermark,type_ZHJvaWRzYW5zZmFsbGJhY2s,shadow_50,text_Q1NETiBAQ29kZVNsb2dhbg==,size_20,color_FFFFFF,t_70,g_se,x_16#pic_center" alt="在这里插入图片描述"></p>
<p>从抽取的数量，以及抽取的三元组的正确度，进行比较后得出，DOM抽取器的表现最好</p>
<h2 id="抽取器结果合并"><a href="#抽取器结果合并" class="headerlink" title="抽取器结果合并"></a>抽取器结果合并</h2><p>为每一个三元组$t = (s, p, o)$建立特征向量$f(t)$ </p>
<p>特征向量由两个值组成：</p>
<ol>
<li>抽取这个三元组所用到的源数据的数量的平方根</li>
<li>抽取三元组用到的所有源数据抽取器打分的平均分</li>
</ol>
<h1 id="基于图的先验概念计算-Priors"><a href="#基于图的先验概念计算-Priors" class="headerlink" title="基于图的先验概念计算(Priors)"></a>基于图的先验概念计算(Priors)</h1><p>Web上抽取的事实可能是不正确的，我们用Freebase上面已经存在的三元组来拟合一个先验模型，这个模型能够计算任何给定的三元组的正确概率，即使之前在Freebase里面不存在。下面给出两种算法：</p>
<h2 id="路径排序算法"><a href="#路径排序算法" class="headerlink" title="路径排序算法"></a>路径排序算法</h2><p>Path ranking algorithm (PRA)</p>
<p>在实体集合中，对于每个s，从s开始在图里面随机地walk，如果能够到对应地o，我们就把这个路径记下来，这可以看作是一种规则（rule）。<br><img src="https://img-blog.csdnimg.cn/d8a43a34b42a4cd6a92725aacdda9f8c.png#pic_center" alt="在这里插入图片描述"><br><img src="https://img-blog.csdnimg.cn/00ee1087e00145c396e801458a7249c5.png#pic_center" alt="在这里插入图片描述"></p>
<p>每一个实体对都会有很多这样的rule，我们拟合一个二分类器来合并这些路径（得到公共路径）。这个时候我们成功地把一个确定的关系（谓词）p转化为了很多这样的路径，然后再训练一个分类器，以这些路径为特征，来推导谓词p。每个谓词p，都训练一个分类器。</p>
<h2 id="Neural-network-model-MLP"><a href="#Neural-network-model-MLP" class="headerlink" title="Neural network model (MLP)"></a>Neural network model (MLP)</h2><p>作者为每一个谓词关联了一个向量，不同于常规方法的是，使用了一个标准的多元感知层来捕获交互信息，计算三元组的概率<br><img src="https://img-blog.csdnimg.cn/10314d9968ad4bf4b1c28a04cb818122.png#pic_center" alt="在这里插入图片描述"></p>
<p>其中A向量为L x (3K)的矩阵，3K同时是u,w,v的维度，以此来作为第一层的权重</p>
<p>β为L x 1 的向量，作为第二层的权重。</p>
<p>作者令L=K=60，最后参数的时间复杂度为O(L+LK+KE+KP)</p>
<p>经过实验，MLP和PRA取得了一样的效果。</p>
<h1 id="Extractors-Priors"><a href="#Extractors-Priors" class="headerlink" title="Extractors + Priors"></a>Extractors + Priors</h1><p><img src="https://img-blog.csdnimg.cn/b6c4822c5c65411eb10f9fadc04026e7.png?x-oss-process=image/watermark,type_ZHJvaWRzYW5zZmFsbGJhY2s,shadow_50,text_Q1NETiBAQ29kZVNsb2dhbg==,size_20,color_FFFFFF,t_70,g_se,x_16#pic_center" alt="在这里插入图片描述"></p>
<p>这里的抽取器与先验概率模型合并的方法，与上文的抽取器结果合并方法相同。通过文中Figure 4的图像我们得出，两个模型合并后取得了显著的效果。<br><img src="https://img-blog.csdnimg.cn/4e5b322c94a144dfb178f53eabf40f2e.png?x-oss-process=image/watermark,type_ZHJvaWRzYW5zZmFsbGJhY2s,shadow_50,text_Q1NETiBAQ29kZVNsb2dhbg==,size_19,color_FFFFFF,t_70,g_se,x_16#pic_center" alt="在这里插入图片描述"></p>
<p>图中的横坐标表示估计的三元组的正确的概率</p>
<p>纵坐标对应其三元组的个数，从图中得出以下结论：</p>
<ul>
<li>不确定的三元组的数量下降</li>
<li>提高高可信度事实的数量</li>
</ul>
<h1 id="思考"><a href="#思考" class="headerlink" title="思考"></a>思考</h1><p>关于知识图谱的思考，下面这些问题还未有很好的解决方案，仍在探索中</p>
<ol>
<li>事实之间的<strong>互斥性</strong>：字面意思说是互斥性，在实际的例子中更准确的表达是事实并不一定是互斥的，也有可能是包含关系。例如，我们可能有一个事实，说奥巴马出生在檀香山，另一个说他出生在夏威夷，这些并不是相互排斥的</li>
<li>事实之间的<strong>软相关性</strong>：我们预计一个人的出生日期比他们孩子的出生日期早15到50年</li>
<li>值可以在多个抽象层次上表示：我们可以不同的<strong>粒度</strong>上表示世界，也就是宏观和微观。这同时也解决了上述提到的事实之间的互斥性</li>
<li>事实的<strong>时效性</strong>：有些事实只是暂时的。例如，谷歌的现任CEO是拉里•佩奇，但从2001年到2011年，CEO是埃里克•施密特。这两个事实都是正确的，但只是在指定的时间间隔内。</li>
<li>添加<strong>新</strong>的实体和关系：添加新的实体所带来的冗余和同义关系</li>
</ol>
<h1 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h1><p>在本文中，作者描述了如何构建一个web规模的概率知识库，称之为知识库。</p>
<p>与以前的工作相比，作者将多个提取源与从现有知识库中（<em>如 FB</em>）获得的<strong>先验知识融合</strong>在一起。得到的知识库大约是现有自动构造的知识库的38倍。</p>
<p>作者希望在未来，能够继续扩大KV，存储更多关于世界的知识，并利用这个资源来帮助各种下游应用，如问题解答、基于实体的搜索等。</p>
]]></content>
      <categories>
        <category>KG</category>
      </categories>
      <tags>
        <tag>ML</tag>
      </tags>
  </entry>
  <entry>
    <title>论文阅读Neural Association Models</title>
    <url>/2021/12/03/%E8%AE%BA%E6%96%87%E9%98%85%E8%AF%BBNeural%20Association%20Models/</url>
    <content><![CDATA[<h1 id="论文题目归属及框架"><a href="#论文题目归属及框架" class="headerlink" title="论文题目归属及框架"></a>论文题目归属及框架</h1><img src="https://img-blog.csdnimg.cn/74735b4af1254f35887372b6358f2a42.png?x-oss-process=image/watermark,type_d3F5LXplbmhlaQ,shadow_50,text_Q1NETiBAQ29kZVNsb2dhbg==,size_20,color_FFFFFF,t_70,g_se,x_16#pic_center" alt="image-20211201192508450" width="67%;">


<img src="https://img-blog.csdnimg.cn/83e142dc1b5b4130830ba1e124731a56.png?x-oss-process=image/watermark,type_d3F5LXplbmhlaQ,shadow_50,text_Q1NETiBAQ29kZVNsb2dhbg==,size_20,color_FFFFFF,t_70,g_se,x_16#pic_center" alt="image-20211201192540544" width="50%;">


<img src="https://img-blog.csdnimg.cn/a6597ea7b642430d8b80faaba54efca3.png?x-oss-process=image/watermark,type_d3F5LXplbmhlaQ,shadow_50,text_Q1NETiBAQ29kZVNsb2dhbg==,size_20,color_FFFFFF,t_70,g_se,x_16" alt="Probabilistic Reasoning via Deep Learning" style="80%;">

<h1 id="背景与动机"><a href="#背景与动机" class="headerlink" title="背景与动机"></a>背景与动机</h1><p>在本文中，作者提出了一种新的深度学习方法——<strong>神经关联模型(NAM)**，用于AI中的</strong>概率推理<strong>。作者建议使用神经网络来模拟一个领域中任意两个事件之间的关联。神经网络将一个事件作为输入，并计算出另一个事件的</strong>条件概率<strong>，以模拟这两个事件关联的可能性。与现有的线性模型不同，该NAM模型利用的是深度神经网络中的</strong>多层非线性激活**来模拟它们的关联。</p>
<p>在这项工作中，作者研究了两种NAM模型结构。第一个模型是标准的深度神经网络(<strong>DNN</strong>)，第二个模型使用一种特殊的结构称为关系调制神经网络(<strong>RMNN</strong>)。</p>
<p>在多种知识图谱任务上进行实验后表明，两个模型均能优于其它常规的方法。更值得一提的是，RMNN在知识迁移学习方面的表现尤为突出，在只观察少量训练样本的情况下，预先训练的模型可以迅速扩展到新的关系。</p>
<h1 id="贡献"><a href="#贡献" class="headerlink" title="贡献"></a>贡献</h1><ul>
<li>作者提出了基于深度神经网络的概率推理神经关联模型，该模型具有足够的通用性，可以处理符号事件的各种推理问题。</li>
<li>本工作研究的一种特定的模型(RMNN)对于知识转移学习非常有效，它可以快速地将现有的知识库适应于新遇到的场景和情境。</li>
<li>第一个证明DNNs具有多层非线性的工作</li>
</ul>
<h1 id="统计关系学习"><a href="#统计关系学习" class="headerlink" title="统计关系学习"></a>统计关系学习</h1><p>统计关系学习，Statistical Relation Learning(SRL)，</p>
<p>SRL试图将实体集E和关系集R上的每一个可能的三元组xijk = (ei, rk, ej)建模为二元随机变量yijk∈{0,1}，表示真或假。</p>
<p> SRL模型的似然函数如下:</p>
<img src="https://img-blog.csdnimg.cn/519ea9e159bf45838d522eefe29b2984.png#pic_center" alt="image-20211202152510779" width="67%;">

<p>σ(·)表示sigmoid function</p>
<p>Ber (y|p)为伯努利分布</p>
<img src="https://img-blog.csdnimg.cn/ea9c84d2f2474fa39520c2d2f37356a1.png#pic_center" alt="image-20211202152618773" width="50%;">

<p>该函数的输入为一个三元组向量，通过score function<code>f()</code>，来计算其得分。把得分投到sigmoid激活函数中，实现归一化，用以表示概率</p>
<h1 id="NAM"><a href="#NAM" class="headerlink" title="NAM"></a>NAM</h1><img src="https://img-blog.csdnimg.cn/67f7a84d5cb04facb21f8cd45dc965ac.png?x-oss-process=image/watermark,type_d3F5LXplbmhlaQ,shadow_50,text_Q1NETiBAQ29kZVNsb2dhbg==,size_20,color_FFFFFF,t_70,g_se,x_16#pic_center" alt="image-20211202153543459" width="50%;">


<p>NAM模型以事件E1的向量作为输入，计算E2事件的条件概率</p>
<p>如果事件 E2 是二值的（True or False），NAM 用 sigmoid 函数计算 $Pr(E2|E1)$；如果 E2 是多值的，则 NAM 使用 softmax 计算 $Pr(E2|E1)$，输出多值向量。</p>
<p>事件E1，E2的具体含义会根据所训练的任务的不同而发生改变，常见的情况有如下5种：</p>
<img src="https://img-blog.csdnimg.cn/8c35ada173a14ef1a90ae9f015431918.png?x-oss-process=image/watermark,type_d3F5LXplbmhlaQ,shadow_50,text_Q1NETiBAQ29kZVNsb2dhbg==,size_20,color_FFFFFF,t_70,g_se,x_16#pic_center" alt="image-20211202153908233" width="50%;">


<h2 id="loss"><a href="#loss" class="headerlink" title="loss"></a>loss</h2><p>NAM 的 loss 采用了 log likelihood 函数，即对数似然损失函数</p>
<img src="https://img-blog.csdnimg.cn/e3a5951e1b714a5e9e9011122193c4f7.png#pic_center" alt="image-20211202154313863" width="50%;">

<p>从形式上不难判断出，该函数在参数为<code>Θ</code>的情况下，分别计算了数据集中每个正样本和负样本的logistic score之和</p>
<p>训练方法：随机梯度下降</p>
<h1 id="DNN"><a href="#DNN" class="headerlink" title="DNN"></a>DNN</h1><img src="https://img-blog.csdnimg.cn/b3e981c421e141eaa5c433a23b885923.png?x-oss-process=image/watermark,type_d3F5LXplbmhlaQ,shadow_50,text_Q1NETiBAQ29kZVNsb2dhbg==,size_20,color_FFFFFF,t_70,g_se,x_16#pic_center" width="50%;">


<img src="https://img-blog.csdnimg.cn/ff7daaf95a9f468b9f1b632bb96e04f9.png#pic_center" alt="image-20211202161527504" width="30%;">


<p>模型的每一层的输出由头实体向量$v_i^{(1)}$和关系向量$c_k$组成</p>
<img src="https://img-blog.csdnimg.cn/b28341eab94243099f6ab4238c865c5f.png#pic_center" width="50%;">



<p>W和b分别表示了每一层的权重矩阵与偏重，计算得出a</p>
<img src="https://img-blog.csdnimg.cn/7183ed50ff444060a6fe7da8bf1b2979.png#pic_center" alt="image-20211202161558040" width="50%;">


<p>最后，作者使用最后一层的输出z和尾实体向量$v_j^{(2)}$，代入到sigmoid函数中计算三元组的得分</p>
<h1 id="RMNN"><a href="#RMNN" class="headerlink" title="RMNN"></a>RMNN</h1><img src="https://img-blog.csdnimg.cn/9f4afcc1ddb84c77bd2160a6c5935f31.png?x-oss-process=image/watermark,type_d3F5LXplbmhlaQ,shadow_50,text_Q1NETiBAQ29kZVNsb2dhbg==,size_20,color_FFFFFF,t_70,g_se,x_16#pic_center" alt="image-20211202225935636" width="50%;">



<p>区别于DNN一开始时就将<strong>头实体向量与关系向量合并处理</strong>，RMNN选择的是在每一层让关系向量<strong>重新进入</strong>神经网络的隐含层中进行计算。从后面可以看出，这种结构在<strong>知识转移学习</strong>任务中具有优越性。</p>
<img src="https://img-blog.csdnimg.cn/513fc66fcbb9483a8071347e8232e327.png#pic_center" alt="image-20211202230744690" width="50%;">


<p>$W^{(l)}$ 和 $B^{(l)}$ 分别表示第$l$层正常权重矩阵和特定于<strong>关系</strong>（区别DNN）的权重矩阵</p>
<img src="https://img-blog.csdnimg.cn/e412b904eed34c028f96fc0d60690261.png#pic_center" alt="image-20211202231040838" width="50%;">


<p>最后，取最顶层的$z^{(L)}$代入得分函数进行计算</p>
<h1 id="实验"><a href="#实验" class="headerlink" title="实验"></a>实验</h1><h2 id="文本蕴含"><a href="#文本蕴含" class="headerlink" title="文本蕴含"></a>文本蕴含</h2><img src="https://img-blog.csdnimg.cn/f3bd4f60e91e4c19bcb0f04c5a90366d.png?x-oss-process=image/watermark,type_d3F5LXplbmhlaQ,shadow_50,text_Q1NETiBAQ29kZVNsb2dhbg==,size_20,color_FFFFFF,t_70,g_se,x_16#pic_center" width="60%;">


<p>从结果可以看出，本文提出的基于DNN的NAM模型与各种传统方法相比有了很大的改进。这表明，通过在连续空间中表示句子并利用深度神经网络进行概率推理，可以更好地建模自然语言中的蕴涵关系。</p>
<h2 id="三元组分类"><a href="#三元组分类" class="headerlink" title="三元组分类"></a>三元组分类</h2><img src="https://img-blog.csdnimg.cn/e8f284def046495bb9d514f96104b21c.png?x-oss-process=image/watermark,type_d3F5LXplbmhlaQ,shadow_50,text_Q1NETiBAQ29kZVNsb2dhbg==,size_20,color_FFFFFF,t_70,g_se,x_16#pic_center" alt="image-20211202231715839" width="60%;">


<p>三元组分类：给定一个三元组判断其是正/反样本</p>
<p>首先设定一个临界值T，利用上述提出的得分函数$f()$对一个三元组进行计算，若值大于临界值 T，则判断为正样本</p>
<p>结果清楚地表明，两种NAM方法(DNN和RMNN)在这些三级分类任务上取得了相当的性能，并且都比所有现有方法取得了一致的改进。特别是，与流行的神经张量网络(NTN)相比，RMNN模型在WN11和FB13上的绝对改进幅度分别为3.7%和1.9%</p>
<h2 id="常识推理"><a href="#常识推理" class="headerlink" title="常识推理"></a>常识推理</h2><p>所谓常识推理，如骆驼是否能够穿越沙漠？提出的NAM模型通过计算关联概率Pr(E2|E1)来回答这个问题，其中E1 ={骆驼，能够}和E2 =穿越沙漠。</p>
<img src="https://img-blog.csdnimg.cn/df385e84eac7407c9efb2ee4facacd3d.png?x-oss-process=image/watermark,type_d3F5LXplbmhlaQ,shadow_50,text_Q1NETiBAQ29kZVNsb2dhbg==,size_20,color_FFFFFF,t_70,g_se,x_16#pic_center" alt="image-20211202233038218" width="60%;">


<p>我们在图4中展示了CN14中所有14个关系对RNMM和NTN的分类精度，结果表明，RMNN的准确率在不同关系之间存在差异，从80.1% (desire)到93.5% (CreatedBy)。我们注意到一些常识关系(如欲望，能力，HasSubevent)比其他(如创造的，原因欲望，动机的目标)更难。总的来说，RNMM在几乎所有关系上都显著优于NTN。</p>
<h2 id="知识迁移学习"><a href="#知识迁移学习" class="headerlink" title="知识迁移学习"></a>知识迁移学习</h2><img src="https://img-blog.csdnimg.cn/9c91093470eb4249b0dd7ec667fdf450.png?x-oss-process=image/watermark,type_d3F5LXplbmhlaQ,shadow_50,text_Q1NETiBAQ29kZVNsb2dhbg==,size_20,color_FFFFFF,t_70,g_se,x_16#pic_center" width="60%;">


<p>在实验中，作者使用CN14中的其他13个关系来训练NAM模型(DNN和RMNN)，来验证第14个关系的预测结果。在迁移学习过程中，作者<strong>冻结所有NAM参数</strong>，包括所有权重和实体表示，只从中学习一个新的CausesDesire关系代码。</p>
<p>结果表明，在这个实验中，RNMM比DNN表现得更好，我们可以显著改善RNMM的新关系，只需要5-20%的训练样本为CausesDesire。这表明连接关系代码到所有隐藏层的结构可以从相对较少的训练样本中更有效地学习新的关系代码。</p>
<img src="https://img-blog.csdnimg.cn/ba397b9cf8b6405589259055791496f9.png?x-oss-process=image/watermark,type_d3F5LXplbmhlaQ,shadow_50,text_Q1NETiBAQ29kZVNsb2dhbg==,size_20,color_FFFFFF,t_70,g_se,x_16#pic_center" alt="image-20211202233557902" width="60%;">


<p>作者在迁移学习任务中，设置了第二个实验，<strong>更新所有NAM参数</strong>。</p>
<p>正如预期的那样，因为参数发生改变，原有的13个关系的表现将会恶化。</p>
<h1 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h1><p>在本文中，作者提出了用于概率推理的神经关联模型，包括了两种模型结构DNN和RMNN，来计算任意两个事件之间的关联概率。在多个推理任务上的实验结果表明，两个模型都能显著优于现有的推理方法。此外，RMNN在知识迁移方面表现突出。</p>
]]></content>
      <categories>
        <category>KG</category>
      </categories>
      <tags>
        <tag>ML</tag>
      </tags>
  </entry>
  <entry>
    <title>页面置换算法</title>
    <url>/2021/05/17/%E9%A1%B5%E9%9D%A2%E8%BD%AC%E6%8D%A2%E7%AE%97%E6%B3%95/</url>
    <content><![CDATA[<p>5种页面置换算法的简单实现</p>
<h1 id="页面置换算法"><a href="#页面置换算法" class="headerlink" title="页面置换算法"></a>页面置换算法</h1><h2 id="OPT"><a href="#OPT" class="headerlink" title="OPT"></a>OPT</h2><p><strong>最佳置换算法</strong></p>
<ul>
<li>缺点：最佳置换算法是一种理想化算法，具有较好的性能，但是实际上无法实现（无法预知一个进程中的若干页面哪一个最长时间不被访问）；</li>
<li>优点：最佳置换算法可以保证获得最低的缺页率，性能最好 </li>
</ul>
<a id="more"></a>

<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">opt</span><span class="params">()</span> <span class="comment">//最佳转换算法，往后查找</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">	<span class="built_in">printf</span>(<span class="string">&quot;--------------------------------\n&quot;</span>);</span><br><span class="line">	<span class="built_in">printf</span>(<span class="string">&quot;现在执行的是最佳置换算法opt：\n&quot;</span>);</span><br><span class="line">	<span class="built_in">memset</span>(arr, <span class="number">-1</span>, <span class="keyword">sizeof</span>(arr));</span><br><span class="line">	<span class="keyword">int</span> no = <span class="number">0</span>, tot = <span class="number">0</span>, z = <span class="number">0</span>, three = <span class="number">0</span>;</span><br><span class="line">	<span class="keyword">int</span> flag[<span class="number">8</span>];</span><br><span class="line">	<span class="built_in">memset</span>(flag, <span class="number">0</span>, <span class="keyword">sizeof</span>(flag)); <span class="comment">//初始化一个flag数组，来确定最晚出现需要替换的点</span></span><br><span class="line">	<span class="keyword">for</span> (i = <span class="number">0</span>; i &lt; M; i++)</span><br><span class="line">	&#123;</span><br><span class="line">		<span class="keyword">if</span> (no &lt; N) <span class="comment">//填充空数组 </span></span><br><span class="line">		&#123;</span><br><span class="line">			arr[no++] = pageNum[i];</span><br><span class="line">			tot++;</span><br><span class="line">			showdata(); </span><br><span class="line">		&#125;</span><br><span class="line">		<span class="keyword">else</span> <span class="comment">//当数组填充满后</span></span><br><span class="line">		&#123;</span><br><span class="line">			<span class="keyword">for</span> (j = <span class="number">0</span>; j &lt; N; j++)</span><br><span class="line">			&#123;</span><br><span class="line">				<span class="keyword">if</span> (arr[j] == pageNum[i])</span><br><span class="line">					z = <span class="number">1</span>; <span class="comment">//如果队列里已经存在此进程，则无需再进行页面调度</span></span><br><span class="line">			&#125;</span><br><span class="line">			<span class="keyword">if</span> (z == <span class="number">0</span>)</span><br><span class="line">			&#123;</span><br><span class="line">				<span class="keyword">for</span> (<span class="keyword">int</span> k = i + <span class="number">1</span>; k &lt; M; k++) <span class="comment">//从下一位向后查找 </span></span><br><span class="line">				&#123;</span><br><span class="line">					<span class="keyword">for</span> (j = <span class="number">0</span>; j &lt; N; j++)</span><br><span class="line">					&#123;</span><br><span class="line">						<span class="keyword">if</span> (arr[j] == pageNum[k] &amp;&amp; three &lt; (N<span class="number">-1</span>)) <span class="comment">//此位先出现则标记此位</span></span><br><span class="line">						&#123;</span><br><span class="line">							<span class="keyword">if</span> (flag[arr[j]] == <span class="number">1</span>)</span><br><span class="line">								<span class="keyword">continue</span>;</span><br><span class="line">							flag[arr[j]] = <span class="number">1</span>;							</span><br><span class="line">							three++;</span><br><span class="line">						&#125;</span><br><span class="line">					&#125;</span><br><span class="line">				&#125;</span><br><span class="line">				<span class="keyword">for</span> (<span class="keyword">int</span> l = <span class="number">0</span>; l &lt; N; l++) <span class="comment">//遍历确定最长时间未被访问的页面</span></span><br><span class="line">				&#123;</span><br><span class="line">					<span class="keyword">if</span> (flag[arr[l]] == <span class="number">1</span>)</span><br><span class="line">						<span class="keyword">continue</span>;</span><br><span class="line">					<span class="keyword">else</span>         </span><br><span class="line">					&#123;</span><br><span class="line">						arr[l] = pageNum[i];</span><br><span class="line">						tot++;</span><br><span class="line">						showdata();</span><br><span class="line">					&#125;</span><br><span class="line">				&#125;</span><br><span class="line">			&#125;</span><br><span class="line">			z = <span class="number">0</span>;</span><br><span class="line">			three = <span class="number">0</span>;</span><br><span class="line">			<span class="built_in">memset</span>(flag, <span class="number">0</span>, <span class="keyword">sizeof</span>(flag));</span><br><span class="line">		&#125;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="built_in">printf</span>(<span class="string">&quot;页面置换的次数为：%d\n&quot;</span>, tot);</span><br><span class="line">	<span class="keyword">double</span> rate = (<span class="keyword">double</span>)tot / M * <span class="number">100</span>;</span><br><span class="line">	<span class="built_in">printf</span>(<span class="string">&quot;OPT缺页率为：%.2lf%%\n&quot;</span>, rate);</span><br><span class="line">	<span class="built_in">printf</span>(<span class="string">&quot;--------------------------------\n&quot;</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>



<h2 id="FIFO"><a href="#FIFO" class="headerlink" title="FIFO"></a>FIFO</h2><p><strong>先进先出算法</strong></p>
<ul>
<li>优点：先进先出算法实现简单，是最直观的一个算法</li>
<li>缺点：先进先出的性能最差，因为与通常页面的使用规则不符合，所以实际应用少</li>
</ul>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="comment">//FIFO先进先出算法</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">fifo</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">	<span class="built_in">printf</span>(<span class="string">&quot;--------------------------------\n&quot;</span>);</span><br><span class="line">	<span class="built_in">printf</span>(<span class="string">&quot;现在执行的是FIFO先进先出算法：\n&quot;</span>);</span><br><span class="line">	<span class="built_in">memset</span>(arr, <span class="number">-1</span>, <span class="keyword">sizeof</span>(arr));</span><br><span class="line">	<span class="keyword">int</span> no = <span class="number">0</span>, z = <span class="number">0</span>, change = <span class="number">0</span>;</span><br><span class="line">	<span class="keyword">for</span> (i = <span class="number">0</span>; i &lt; M; i++)</span><br><span class="line">	&#123;</span><br><span class="line">		<span class="keyword">for</span> (j = <span class="number">0</span>; j &lt; N; j++)</span><br><span class="line">		&#123;</span><br><span class="line">			<span class="keyword">if</span> (arr[j] == pageNum[i])</span><br><span class="line">				z = <span class="number">1</span>; <span class="comment">//如果队列里已经存在此进程，则无需再进行页面调度</span></span><br><span class="line">		&#125;</span><br><span class="line">		<span class="keyword">if</span> (z == <span class="number">0</span>)</span><br><span class="line">		&#123;</span><br><span class="line">			change++;</span><br><span class="line">			arr[no++] = pageNum[i];</span><br><span class="line">			showdata();</span><br><span class="line">		&#125;</span><br><span class="line">		z = <span class="number">0</span>; <span class="comment">//默认需要调度</span></span><br><span class="line">		<span class="keyword">if</span> (no == N) <span class="comment">//队列已满，则归0从头开始，等效于队头出队</span></span><br><span class="line">			no = <span class="number">0</span>;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="built_in">printf</span>(<span class="string">&quot;页面置换的次数为：%d\n&quot;</span>, change);</span><br><span class="line">	<span class="keyword">double</span> rate = (<span class="keyword">double</span>)change / M * <span class="number">100</span>;</span><br><span class="line">	<span class="built_in">printf</span>(<span class="string">&quot;FIFO缺页率为：%.2lf%%\n&quot;</span>, rate);</span><br><span class="line">	<span class="built_in">printf</span>(<span class="string">&quot;--------------------------------\n&quot;</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>



<h2 id="LFU"><a href="#LFU" class="headerlink" title="LFU"></a>LFU</h2><p><strong>最少使用置换算法</strong></p>
<ul>
<li>缺点：并不能真正反映出页面的真实情况</li>
<li>优点：该算法既充分利用了主存中页面调度情况的历史信息，又正确反映了程序的局部性</li>
</ul>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">lfu</span><span class="params">()</span> <span class="comment">//最不经常使用算法，使用次数最少算法</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">	<span class="built_in">printf</span>(<span class="string">&quot;--------------------------------\n&quot;</span>);</span><br><span class="line">	<span class="built_in">printf</span>(<span class="string">&quot;现在执行的是最不经常使用算法lfu：\n&quot;</span>);</span><br><span class="line">	<span class="keyword">int</span> count[<span class="number">8</span>], tot = <span class="number">0</span>, no = <span class="number">0</span>, z = <span class="number">0</span>, least = <span class="number">100</span>, mark = <span class="number">-1</span>;</span><br><span class="line">	<span class="built_in">memset</span>(arr, <span class="number">-1</span>, <span class="keyword">sizeof</span>(arr));</span><br><span class="line">	<span class="built_in">memset</span>(count, <span class="number">0</span>, <span class="keyword">sizeof</span>(count)); <span class="comment">//用count数组记录访问次数，当访问次数相同时</span></span><br><span class="line">	<span class="keyword">for</span> (i = <span class="number">0</span>; i &lt; M; i++)          <span class="comment">//默认取索引较小的一位</span></span><br><span class="line">	&#123;</span><br><span class="line">		<span class="keyword">if</span> (no &lt; N) <span class="comment">//填充空数组 </span></span><br><span class="line">		&#123;</span><br><span class="line">			arr[no++] = pageNum[i];</span><br><span class="line">			tot++;</span><br><span class="line">			count[pageNum[i]]++;</span><br><span class="line">			showdata();</span><br><span class="line">		&#125;</span><br><span class="line">		<span class="keyword">else</span></span><br><span class="line">		&#123;</span><br><span class="line">			<span class="keyword">for</span> (j = <span class="number">0</span>; j &lt; N; j++)</span><br><span class="line">			&#123;</span><br><span class="line">				<span class="keyword">if</span> (arr[j] == pageNum[i])</span><br><span class="line">				&#123;</span><br><span class="line">					z = <span class="number">1</span>; <span class="comment">//如果队列里已经存在此进程，则无需再进行页面调度</span></span><br><span class="line">					count[pageNum[i]]++;</span><br><span class="line">				&#125;</span><br><span class="line">			&#125;</span><br><span class="line">			<span class="keyword">if</span> (z == <span class="number">0</span>)</span><br><span class="line">			&#123;</span><br><span class="line">				<span class="keyword">for</span> (<span class="keyword">int</span> k = <span class="number">0</span>; k &lt; N; k++) <span class="comment">//通过循环比较出目前访问次数最小的页面进程</span></span><br><span class="line">				&#123;</span><br><span class="line">					<span class="keyword">if</span> (count[arr[k]] &lt; least)</span><br><span class="line">					&#123;</span><br><span class="line">						least = count[arr[k]];</span><br><span class="line">						mark = k;</span><br><span class="line">					&#125;</span><br><span class="line">				&#125;</span><br><span class="line">				arr[mark] = pageNum[i];</span><br><span class="line">				showdata();</span><br><span class="line">				tot++;</span><br><span class="line">				count[pageNum[i]]++;</span><br><span class="line">			&#125;</span><br><span class="line">			z = <span class="number">0</span>;</span><br><span class="line">			least = <span class="number">100</span>;</span><br><span class="line">			mark = <span class="number">-1</span>;</span><br><span class="line">		&#125;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="built_in">printf</span>(<span class="string">&quot;页面置换的次数为：%d\n&quot;</span>, tot);</span><br><span class="line">	<span class="keyword">double</span> rate = (<span class="keyword">double</span>)tot / M * <span class="number">100</span>;</span><br><span class="line">	<span class="built_in">printf</span>(<span class="string">&quot;LFU缺页率为：%.2lf%%\n&quot;</span>, rate);</span><br><span class="line">	<span class="built_in">printf</span>(<span class="string">&quot;--------------------------------\n&quot;</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>



<h2 id="LRU"><a href="#LRU" class="headerlink" title="LRU"></a>LRU</h2><p><strong>最近最久未使用置换算法</strong></p>
<ul>
<li>优点：由于考虑程序访问的时间局部性，一般能有较好的性能；实际应用多</li>
<li>缺点：实现需要较多的硬件支持，会增加硬件成本</li>
</ul>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">lru</span><span class="params">()</span> <span class="comment">//最近最久未访问算法，从当前位往前查找</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">	<span class="built_in">printf</span>(<span class="string">&quot;--------------------------------\n&quot;</span>);</span><br><span class="line">	<span class="built_in">printf</span>(<span class="string">&quot;现在执行的是最近最久未访问算法lru：\n&quot;</span>);</span><br><span class="line">	<span class="built_in">memset</span>(arr, <span class="number">-1</span>, <span class="keyword">sizeof</span>(arr));</span><br><span class="line">	<span class="keyword">int</span> no = <span class="number">0</span>, tot = <span class="number">0</span>, z = <span class="number">0</span>, three = <span class="number">0</span>;</span><br><span class="line">	<span class="keyword">int</span> flag[<span class="number">8</span>];</span><br><span class="line">	<span class="built_in">memset</span>(flag, <span class="number">0</span>, <span class="keyword">sizeof</span>(flag)); <span class="comment">//初始化一个flag数组，来确定最晚出现需要替换的点</span></span><br><span class="line">	<span class="keyword">for</span> (i = <span class="number">0</span>; i &lt; M; i++)</span><br><span class="line">	&#123;</span><br><span class="line">		<span class="keyword">if</span> (no &lt; N) <span class="comment">//填充空数组 </span></span><br><span class="line">		&#123;</span><br><span class="line">			arr[no++] = pageNum[i];</span><br><span class="line">			tot++;</span><br><span class="line">			showdata();</span><br><span class="line">		&#125;</span><br><span class="line">		<span class="keyword">else</span> <span class="comment">//当数组填充满后</span></span><br><span class="line">		&#123;</span><br><span class="line">			<span class="keyword">for</span> (j = <span class="number">0</span>; j &lt; N; j++)</span><br><span class="line">			&#123;</span><br><span class="line">				<span class="keyword">if</span> (arr[j] == pageNum[i])</span><br><span class="line">					z = <span class="number">1</span>; <span class="comment">//如果队列里已经存在此进程，则无需再进行页面调度</span></span><br><span class="line">			&#125;</span><br><span class="line">			<span class="keyword">if</span> (z == <span class="number">0</span>)</span><br><span class="line">			&#123;</span><br><span class="line">				<span class="keyword">for</span> (<span class="keyword">int</span> k = i - <span class="number">1</span>; k &gt;= <span class="number">0</span>; k--) <span class="comment">//从上一位向前查找 </span></span><br><span class="line">				&#123;</span><br><span class="line">					<span class="keyword">for</span> (j = <span class="number">0</span>; j &lt; N; j++)</span><br><span class="line">					&#123;</span><br><span class="line">						<span class="keyword">if</span> (arr[j] == pageNum[k] &amp;&amp; three &lt; (N - <span class="number">1</span>)) <span class="comment">//此位先出现则标记此位</span></span><br><span class="line">						&#123;</span><br><span class="line">							<span class="keyword">if</span> (flag[arr[j]] == <span class="number">1</span>)</span><br><span class="line">								<span class="keyword">continue</span>;</span><br><span class="line">							flag[arr[j]] = <span class="number">1</span>;</span><br><span class="line">							three++;</span><br><span class="line">						&#125;</span><br><span class="line">					&#125;</span><br><span class="line">				&#125;</span><br><span class="line">				<span class="keyword">for</span> (<span class="keyword">int</span> l = <span class="number">0</span>; l &lt; N; l++) <span class="comment">//遍历确定最长时间未被访问的页面</span></span><br><span class="line">				&#123;</span><br><span class="line">					<span class="keyword">if</span> (flag[arr[l]] == <span class="number">1</span>)</span><br><span class="line">						<span class="keyword">continue</span>;</span><br><span class="line">					<span class="keyword">else</span></span><br><span class="line">					&#123;</span><br><span class="line">						arr[l] = pageNum[i];</span><br><span class="line">						tot++;</span><br><span class="line">						showdata();</span><br><span class="line">					&#125;</span><br><span class="line">				&#125;</span><br><span class="line">			&#125;</span><br><span class="line">			z = <span class="number">0</span>;</span><br><span class="line">			three = <span class="number">0</span>;</span><br><span class="line">			<span class="built_in">memset</span>(flag, <span class="number">0</span>, <span class="keyword">sizeof</span>(flag));</span><br><span class="line">		&#125;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="built_in">printf</span>(<span class="string">&quot;页面置换的次数为：%d\n&quot;</span>, tot);</span><br><span class="line">	<span class="keyword">double</span> rate = (<span class="keyword">double</span>)tot / M * <span class="number">100</span>;</span><br><span class="line">	<span class="built_in">printf</span>(<span class="string">&quot;LRU缺页率为：%.2lf%%\n&quot;</span>, rate);</span><br><span class="line">	<span class="built_in">printf</span>(<span class="string">&quot;--------------------------------\n&quot;</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>



<h2 id="NRU"><a href="#NRU" class="headerlink" title="NRU"></a>NRU</h2><p>最近未用/时钟算法</p>
<ul>
<li>优点：性能和开销比较均衡</li>
<li>缺点：未考虑页面是否被修改过</li>
</ul>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">nru</span><span class="params">()</span> <span class="comment">//clock置换算法/最近未用算法/NRU算法</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">	<span class="built_in">printf</span>(<span class="string">&quot;--------------------------------\n&quot;</span>);</span><br><span class="line">	<span class="built_in">printf</span>(<span class="string">&quot;现在执行的是clock置换算法nru：\n&quot;</span>);</span><br><span class="line">	<span class="keyword">int</span> ask[<span class="number">10</span>], no = <span class="number">0</span>, tot = <span class="number">0</span>, z = <span class="number">0</span>, mark = <span class="number">0</span>;</span><br><span class="line">	<span class="built_in">memset</span>(arr, <span class="number">-1</span>, <span class="keyword">sizeof</span>(arr));</span><br><span class="line">	<span class="built_in">memset</span>(ask, <span class="number">0</span>, <span class="keyword">sizeof</span>(ask)); <span class="comment">//ask数组标记是否访问，1代表最近访问，0代表未访问</span></span><br><span class="line">	<span class="keyword">for</span> (i = <span class="number">0</span>; i &lt; M; i++)</span><br><span class="line">	&#123;</span><br><span class="line">		<span class="keyword">if</span> (no &lt; N) <span class="comment">//填充空数组 </span></span><br><span class="line">		&#123;</span><br><span class="line">			ask[no] = <span class="number">1</span>; <span class="comment">//初始化为最近访问</span></span><br><span class="line">			arr[no++] = pageNum[i];</span><br><span class="line">			tot++;</span><br><span class="line">			showdata();</span><br><span class="line">		&#125;</span><br><span class="line">		<span class="keyword">else</span></span><br><span class="line">		&#123;</span><br><span class="line">			<span class="keyword">for</span> (j = <span class="number">0</span>; j &lt; N; j++)</span><br><span class="line">			&#123;</span><br><span class="line">				<span class="keyword">if</span> (arr[j] == pageNum[i])</span><br><span class="line">				&#123;</span><br><span class="line">					z = <span class="number">1</span>; <span class="comment">//如果队列里已经存在此进程，则无需再进行页面调度</span></span><br><span class="line">					ask[j] = <span class="number">1</span>; <span class="comment">//同时更新最近访问</span></span><br><span class="line">				&#125;</span><br><span class="line">			&#125;</span><br><span class="line">			<span class="keyword">if</span> (z == <span class="number">0</span>)</span><br><span class="line">			&#123;</span><br><span class="line">				<span class="keyword">int</span> k = <span class="number">0</span>;</span><br><span class="line">				<span class="keyword">while</span> (<span class="number">1</span>) <span class="comment">//通过循环找出访问位为0</span></span><br><span class="line">				&#123;</span><br><span class="line">					<span class="keyword">for</span> (k = <span class="number">0</span>; k &lt; N; k++)</span><br><span class="line">					&#123;</span><br><span class="line">						<span class="keyword">if</span> (ask[k] == <span class="number">0</span>)</span><br><span class="line">							<span class="keyword">goto</span> flag;</span><br><span class="line">						<span class="keyword">else</span> <span class="keyword">if</span> (ask[k] == <span class="number">1</span>)</span><br><span class="line">							ask[k] = <span class="number">0</span>;</span><br><span class="line">					&#125;</span><br><span class="line">				&#125;</span><br><span class="line">				flag:</span><br><span class="line">				arr[k] = pageNum[i];</span><br><span class="line">				ask[k] = <span class="number">1</span>;</span><br><span class="line">				showdata();</span><br><span class="line">				tot++;</span><br><span class="line">			&#125;</span><br><span class="line">		&#125;</span><br><span class="line">		z = <span class="number">0</span>;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="built_in">printf</span>(<span class="string">&quot;页面置换的次数为：%d\n&quot;</span>, tot);</span><br><span class="line">	<span class="keyword">double</span> rate = (<span class="keyword">double</span>)tot / M * <span class="number">100</span>;</span><br><span class="line">	<span class="built_in">printf</span>(<span class="string">&quot;NRU缺页率为：%.2lf%%\n&quot;</span>, rate);</span><br><span class="line">	<span class="built_in">printf</span>(<span class="string">&quot;--------------------------------\n&quot;</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>



<h2 id="代码实现-C语言"><a href="#代码实现-C语言" class="headerlink" title="代码实现(C语言)"></a>代码实现(C语言)</h2><figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdlib.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> N 3</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> M 20</span></span><br><span class="line"><span class="keyword">int</span> i, j;</span><br><span class="line"><span class="keyword">int</span> arr[N];</span><br><span class="line"><span class="keyword">int</span> pageNum[M] = &#123; <span class="number">7</span>,<span class="number">0</span>,<span class="number">1</span>,<span class="number">2</span>,<span class="number">0</span>,<span class="number">3</span>,<span class="number">0</span>,<span class="number">4</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">0</span>,<span class="number">3</span>,<span class="number">2</span>,<span class="number">1</span>,<span class="number">2</span>,<span class="number">0</span>,<span class="number">1</span>,<span class="number">7</span>,<span class="number">0</span>,<span class="number">1</span> &#125;;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">showdata</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">	<span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; N; i++)</span><br><span class="line">	&#123;</span><br><span class="line">		<span class="built_in">printf</span>(<span class="string">&quot;%d &quot;</span>, arr[i]);</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="built_in">printf</span>(<span class="string">&quot;\n&quot;</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//FIFO先进先出算法</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">fifo</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">	<span class="built_in">printf</span>(<span class="string">&quot;--------------------------------\n&quot;</span>);</span><br><span class="line">	<span class="built_in">printf</span>(<span class="string">&quot;现在执行的是FIFO先进先出算法：\n&quot;</span>);</span><br><span class="line">	<span class="built_in">memset</span>(arr, <span class="number">-1</span>, <span class="keyword">sizeof</span>(arr));</span><br><span class="line">	<span class="keyword">int</span> no = <span class="number">0</span>, z = <span class="number">0</span>, change = <span class="number">0</span>;</span><br><span class="line">	<span class="keyword">for</span> (i = <span class="number">0</span>; i &lt; M; i++)</span><br><span class="line">	&#123;</span><br><span class="line">		<span class="keyword">for</span> (j = <span class="number">0</span>; j &lt; N; j++)</span><br><span class="line">		&#123;</span><br><span class="line">			<span class="keyword">if</span> (arr[j] == pageNum[i])</span><br><span class="line">				z = <span class="number">1</span>; <span class="comment">//如果队列里已经存在此进程，则无需再进行页面调度</span></span><br><span class="line">		&#125;</span><br><span class="line">		<span class="keyword">if</span> (z == <span class="number">0</span>)</span><br><span class="line">		&#123;</span><br><span class="line">			change++;</span><br><span class="line">			arr[no++] = pageNum[i];</span><br><span class="line">			showdata();</span><br><span class="line">		&#125;</span><br><span class="line">		z = <span class="number">0</span>; <span class="comment">//默认需要调度</span></span><br><span class="line">		<span class="keyword">if</span> (no == N) <span class="comment">//队列已满，则归0从头开始，等效于队头出队</span></span><br><span class="line">			no = <span class="number">0</span>;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="built_in">printf</span>(<span class="string">&quot;页面置换的次数为：%d\n&quot;</span>, change);</span><br><span class="line">	<span class="keyword">double</span> rate = (<span class="keyword">double</span>)change / M * <span class="number">100</span>;</span><br><span class="line">	<span class="built_in">printf</span>(<span class="string">&quot;FIFO缺页率为：%.2lf%%\n&quot;</span>, rate);</span><br><span class="line">	<span class="built_in">printf</span>(<span class="string">&quot;--------------------------------\n&quot;</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">opt</span><span class="params">()</span> <span class="comment">//最佳转换算法，往后查找</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">	<span class="built_in">printf</span>(<span class="string">&quot;--------------------------------\n&quot;</span>);</span><br><span class="line">	<span class="built_in">printf</span>(<span class="string">&quot;现在执行的是最佳置换算法opt：\n&quot;</span>);</span><br><span class="line">	<span class="built_in">memset</span>(arr, <span class="number">-1</span>, <span class="keyword">sizeof</span>(arr));</span><br><span class="line">	<span class="keyword">int</span> no = <span class="number">0</span>, tot = <span class="number">0</span>, z = <span class="number">0</span>, three = <span class="number">0</span>;</span><br><span class="line">	<span class="keyword">int</span> flag[<span class="number">8</span>];</span><br><span class="line">	<span class="built_in">memset</span>(flag, <span class="number">0</span>, <span class="keyword">sizeof</span>(flag)); <span class="comment">//初始化一个flag数组，来确定最晚出现需要替换的点</span></span><br><span class="line">	<span class="keyword">for</span> (i = <span class="number">0</span>; i &lt; M; i++)</span><br><span class="line">	&#123;</span><br><span class="line">		<span class="keyword">if</span> (no &lt; N) <span class="comment">//填充空数组 </span></span><br><span class="line">		&#123;</span><br><span class="line">			arr[no++] = pageNum[i];</span><br><span class="line">			tot++;</span><br><span class="line">			showdata(); </span><br><span class="line">		&#125;</span><br><span class="line">		<span class="keyword">else</span> <span class="comment">//当数组填充满后</span></span><br><span class="line">		&#123;</span><br><span class="line">			<span class="keyword">for</span> (j = <span class="number">0</span>; j &lt; N; j++)</span><br><span class="line">			&#123;</span><br><span class="line">				<span class="keyword">if</span> (arr[j] == pageNum[i])</span><br><span class="line">					z = <span class="number">1</span>; <span class="comment">//如果队列里已经存在此进程，则无需再进行页面调度</span></span><br><span class="line">			&#125;</span><br><span class="line">			<span class="keyword">if</span> (z == <span class="number">0</span>)</span><br><span class="line">			&#123;</span><br><span class="line">				<span class="keyword">for</span> (<span class="keyword">int</span> k = i + <span class="number">1</span>; k &lt; M; k++) <span class="comment">//从下一位向后查找 </span></span><br><span class="line">				&#123;</span><br><span class="line">					<span class="keyword">for</span> (j = <span class="number">0</span>; j &lt; N; j++)</span><br><span class="line">					&#123;</span><br><span class="line">						<span class="keyword">if</span> (arr[j] == pageNum[k] &amp;&amp; three &lt; (N<span class="number">-1</span>)) <span class="comment">//此位先出现则标记此位</span></span><br><span class="line">						&#123;</span><br><span class="line">							<span class="keyword">if</span> (flag[arr[j]] == <span class="number">1</span>)</span><br><span class="line">								<span class="keyword">continue</span>;</span><br><span class="line">							flag[arr[j]] = <span class="number">1</span>;							</span><br><span class="line">							three++;</span><br><span class="line">						&#125;</span><br><span class="line">					&#125;</span><br><span class="line">				&#125;</span><br><span class="line">				<span class="keyword">for</span> (<span class="keyword">int</span> l = <span class="number">0</span>; l &lt; N; l++) <span class="comment">//遍历确定最长时间未被访问的页面</span></span><br><span class="line">				&#123;</span><br><span class="line">					<span class="keyword">if</span> (flag[arr[l]] == <span class="number">1</span>)</span><br><span class="line">						<span class="keyword">continue</span>;</span><br><span class="line">					<span class="keyword">else</span>         </span><br><span class="line">					&#123;</span><br><span class="line">						arr[l] = pageNum[i];</span><br><span class="line">						tot++;</span><br><span class="line">						showdata();</span><br><span class="line">					&#125;</span><br><span class="line">				&#125;</span><br><span class="line">			&#125;</span><br><span class="line">			z = <span class="number">0</span>;</span><br><span class="line">			three = <span class="number">0</span>;</span><br><span class="line">			<span class="built_in">memset</span>(flag, <span class="number">0</span>, <span class="keyword">sizeof</span>(flag));</span><br><span class="line">		&#125;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="built_in">printf</span>(<span class="string">&quot;页面置换的次数为：%d\n&quot;</span>, tot);</span><br><span class="line">	<span class="keyword">double</span> rate = (<span class="keyword">double</span>)tot / M * <span class="number">100</span>;</span><br><span class="line">	<span class="built_in">printf</span>(<span class="string">&quot;OPT缺页率为：%.2lf%%\n&quot;</span>, rate);</span><br><span class="line">	<span class="built_in">printf</span>(<span class="string">&quot;--------------------------------\n&quot;</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">lru</span><span class="params">()</span> <span class="comment">//最近最久未访问算法，从当前位往前查找</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">	<span class="built_in">printf</span>(<span class="string">&quot;--------------------------------\n&quot;</span>);</span><br><span class="line">	<span class="built_in">printf</span>(<span class="string">&quot;现在执行的是最近最久未访问算法lru：\n&quot;</span>);</span><br><span class="line">	<span class="built_in">memset</span>(arr, <span class="number">-1</span>, <span class="keyword">sizeof</span>(arr));</span><br><span class="line">	<span class="keyword">int</span> no = <span class="number">0</span>, tot = <span class="number">0</span>, z = <span class="number">0</span>, three = <span class="number">0</span>;</span><br><span class="line">	<span class="keyword">int</span> flag[<span class="number">8</span>];</span><br><span class="line">	<span class="built_in">memset</span>(flag, <span class="number">0</span>, <span class="keyword">sizeof</span>(flag)); <span class="comment">//初始化一个flag数组，来确定最晚出现需要替换的点</span></span><br><span class="line">	<span class="keyword">for</span> (i = <span class="number">0</span>; i &lt; M; i++)</span><br><span class="line">	&#123;</span><br><span class="line">		<span class="keyword">if</span> (no &lt; N) <span class="comment">//填充空数组 </span></span><br><span class="line">		&#123;</span><br><span class="line">			arr[no++] = pageNum[i];</span><br><span class="line">			tot++;</span><br><span class="line">			showdata();</span><br><span class="line">		&#125;</span><br><span class="line">		<span class="keyword">else</span> <span class="comment">//当数组填充满后</span></span><br><span class="line">		&#123;</span><br><span class="line">			<span class="keyword">for</span> (j = <span class="number">0</span>; j &lt; N; j++)</span><br><span class="line">			&#123;</span><br><span class="line">				<span class="keyword">if</span> (arr[j] == pageNum[i])</span><br><span class="line">					z = <span class="number">1</span>; <span class="comment">//如果队列里已经存在此进程，则无需再进行页面调度</span></span><br><span class="line">			&#125;</span><br><span class="line">			<span class="keyword">if</span> (z == <span class="number">0</span>)</span><br><span class="line">			&#123;</span><br><span class="line">				<span class="keyword">for</span> (<span class="keyword">int</span> k = i - <span class="number">1</span>; k &gt;= <span class="number">0</span>; k--) <span class="comment">//从上一位向前查找 </span></span><br><span class="line">				&#123;</span><br><span class="line">					<span class="keyword">for</span> (j = <span class="number">0</span>; j &lt; N; j++)</span><br><span class="line">					&#123;</span><br><span class="line">						<span class="keyword">if</span> (arr[j] == pageNum[k] &amp;&amp; three &lt; (N - <span class="number">1</span>)) <span class="comment">//此位先出现则标记此位</span></span><br><span class="line">						&#123;</span><br><span class="line">							<span class="keyword">if</span> (flag[arr[j]] == <span class="number">1</span>)</span><br><span class="line">								<span class="keyword">continue</span>;</span><br><span class="line">							flag[arr[j]] = <span class="number">1</span>;</span><br><span class="line">							three++;</span><br><span class="line">						&#125;</span><br><span class="line">					&#125;</span><br><span class="line">				&#125;</span><br><span class="line">				<span class="keyword">for</span> (<span class="keyword">int</span> l = <span class="number">0</span>; l &lt; N; l++) <span class="comment">//遍历确定最长时间未被访问的页面</span></span><br><span class="line">				&#123;</span><br><span class="line">					<span class="keyword">if</span> (flag[arr[l]] == <span class="number">1</span>)</span><br><span class="line">						<span class="keyword">continue</span>;</span><br><span class="line">					<span class="keyword">else</span></span><br><span class="line">					&#123;</span><br><span class="line">						arr[l] = pageNum[i];</span><br><span class="line">						tot++;</span><br><span class="line">						showdata();</span><br><span class="line">					&#125;</span><br><span class="line">				&#125;</span><br><span class="line">			&#125;</span><br><span class="line">			z = <span class="number">0</span>;</span><br><span class="line">			three = <span class="number">0</span>;</span><br><span class="line">			<span class="built_in">memset</span>(flag, <span class="number">0</span>, <span class="keyword">sizeof</span>(flag));</span><br><span class="line">		&#125;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="built_in">printf</span>(<span class="string">&quot;页面置换的次数为：%d\n&quot;</span>, tot);</span><br><span class="line">	<span class="keyword">double</span> rate = (<span class="keyword">double</span>)tot / M * <span class="number">100</span>;</span><br><span class="line">	<span class="built_in">printf</span>(<span class="string">&quot;LRU缺页率为：%.2lf%%\n&quot;</span>, rate);</span><br><span class="line">	<span class="built_in">printf</span>(<span class="string">&quot;--------------------------------\n&quot;</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">lfu</span><span class="params">()</span> <span class="comment">//最不经常使用算法，使用次数最少算法</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">	<span class="built_in">printf</span>(<span class="string">&quot;--------------------------------\n&quot;</span>);</span><br><span class="line">	<span class="built_in">printf</span>(<span class="string">&quot;现在执行的是最不经常使用算法lfu：\n&quot;</span>);</span><br><span class="line">	<span class="keyword">int</span> count[<span class="number">8</span>], tot = <span class="number">0</span>, no = <span class="number">0</span>, z = <span class="number">0</span>, least = <span class="number">100</span>, mark = <span class="number">-1</span>;</span><br><span class="line">	<span class="built_in">memset</span>(arr, <span class="number">-1</span>, <span class="keyword">sizeof</span>(arr));</span><br><span class="line">	<span class="built_in">memset</span>(count, <span class="number">0</span>, <span class="keyword">sizeof</span>(count)); <span class="comment">//用count数组记录访问次数，当访问次数相同时</span></span><br><span class="line">	<span class="keyword">for</span> (i = <span class="number">0</span>; i &lt; M; i++)          <span class="comment">//默认取索引较小的一位</span></span><br><span class="line">	&#123;</span><br><span class="line">		<span class="keyword">if</span> (no &lt; N) <span class="comment">//填充空数组 </span></span><br><span class="line">		&#123;</span><br><span class="line">			arr[no++] = pageNum[i];</span><br><span class="line">			tot++;</span><br><span class="line">			count[pageNum[i]]++;</span><br><span class="line">			showdata();</span><br><span class="line">		&#125;</span><br><span class="line">		<span class="keyword">else</span></span><br><span class="line">		&#123;</span><br><span class="line">			<span class="keyword">for</span> (j = <span class="number">0</span>; j &lt; N; j++)</span><br><span class="line">			&#123;</span><br><span class="line">				<span class="keyword">if</span> (arr[j] == pageNum[i])</span><br><span class="line">				&#123;</span><br><span class="line">					z = <span class="number">1</span>; <span class="comment">//如果队列里已经存在此进程，则无需再进行页面调度</span></span><br><span class="line">					count[pageNum[i]]++;</span><br><span class="line">				&#125;</span><br><span class="line">			&#125;</span><br><span class="line">			<span class="keyword">if</span> (z == <span class="number">0</span>)</span><br><span class="line">			&#123;</span><br><span class="line">				<span class="keyword">for</span> (<span class="keyword">int</span> k = <span class="number">0</span>; k &lt; N; k++) <span class="comment">//通过循环比较出目前访问次数最小的页面进程</span></span><br><span class="line">				&#123;</span><br><span class="line">					<span class="keyword">if</span> (count[arr[k]] &lt; least)</span><br><span class="line">					&#123;</span><br><span class="line">						least = count[arr[k]];</span><br><span class="line">						mark = k;</span><br><span class="line">					&#125;</span><br><span class="line">				&#125;</span><br><span class="line">				arr[mark] = pageNum[i];</span><br><span class="line">				showdata();</span><br><span class="line">				tot++;</span><br><span class="line">				count[pageNum[i]]++;</span><br><span class="line">			&#125;</span><br><span class="line">			z = <span class="number">0</span>;</span><br><span class="line">			least = <span class="number">100</span>;</span><br><span class="line">			mark = <span class="number">-1</span>;</span><br><span class="line">		&#125;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="built_in">printf</span>(<span class="string">&quot;页面置换的次数为：%d\n&quot;</span>, tot);</span><br><span class="line">	<span class="keyword">double</span> rate = (<span class="keyword">double</span>)tot / M * <span class="number">100</span>;</span><br><span class="line">	<span class="built_in">printf</span>(<span class="string">&quot;LFU缺页率为：%.2lf%%\n&quot;</span>, rate);</span><br><span class="line">	<span class="built_in">printf</span>(<span class="string">&quot;--------------------------------\n&quot;</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">nru</span><span class="params">()</span> <span class="comment">//clock置换算法/最近未用算法/NRU算法</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">	<span class="built_in">printf</span>(<span class="string">&quot;--------------------------------\n&quot;</span>);</span><br><span class="line">	<span class="built_in">printf</span>(<span class="string">&quot;现在执行的是clock置换算法nru：\n&quot;</span>);</span><br><span class="line">	<span class="keyword">int</span> ask[<span class="number">10</span>], no = <span class="number">0</span>, tot = <span class="number">0</span>, z = <span class="number">0</span>, mark = <span class="number">0</span>;</span><br><span class="line">	<span class="built_in">memset</span>(arr, <span class="number">-1</span>, <span class="keyword">sizeof</span>(arr));</span><br><span class="line">	<span class="built_in">memset</span>(ask, <span class="number">0</span>, <span class="keyword">sizeof</span>(ask)); <span class="comment">//ask数组标记是否访问，1代表最近访问，0代表未访问</span></span><br><span class="line">	<span class="keyword">for</span> (i = <span class="number">0</span>; i &lt; M; i++)</span><br><span class="line">	&#123;</span><br><span class="line">		<span class="keyword">if</span> (no &lt; N) <span class="comment">//填充空数组 </span></span><br><span class="line">		&#123;</span><br><span class="line">			ask[no] = <span class="number">1</span>; <span class="comment">//初始化为最近访问</span></span><br><span class="line">			arr[no++] = pageNum[i];</span><br><span class="line">			tot++;</span><br><span class="line">			showdata();</span><br><span class="line">		&#125;</span><br><span class="line">		<span class="keyword">else</span></span><br><span class="line">		&#123;</span><br><span class="line">			<span class="keyword">for</span> (j = <span class="number">0</span>; j &lt; N; j++)</span><br><span class="line">			&#123;</span><br><span class="line">				<span class="keyword">if</span> (arr[j] == pageNum[i])</span><br><span class="line">				&#123;</span><br><span class="line">					z = <span class="number">1</span>; <span class="comment">//如果队列里已经存在此进程，则无需再进行页面调度</span></span><br><span class="line">					ask[j] = <span class="number">1</span>; <span class="comment">//同时更新最近访问</span></span><br><span class="line">				&#125;</span><br><span class="line">			&#125;</span><br><span class="line">			<span class="keyword">if</span> (z == <span class="number">0</span>)</span><br><span class="line">			&#123;</span><br><span class="line">				<span class="keyword">int</span> k = <span class="number">0</span>;</span><br><span class="line">				<span class="keyword">while</span> (<span class="number">1</span>) <span class="comment">//通过循环找出访问位为0</span></span><br><span class="line">				&#123;</span><br><span class="line">					<span class="keyword">for</span> (k = <span class="number">0</span>; k &lt; N; k++)</span><br><span class="line">					&#123;</span><br><span class="line">						<span class="keyword">if</span> (ask[k] == <span class="number">0</span>)</span><br><span class="line">							<span class="keyword">goto</span> flag;</span><br><span class="line">						<span class="keyword">else</span> <span class="keyword">if</span> (ask[k] == <span class="number">1</span>)</span><br><span class="line">							ask[k] = <span class="number">0</span>;</span><br><span class="line">					&#125;</span><br><span class="line">				&#125;</span><br><span class="line">				flag:</span><br><span class="line">				arr[k] = pageNum[i];</span><br><span class="line">				ask[k] = <span class="number">1</span>;</span><br><span class="line">				showdata();</span><br><span class="line">				tot++;</span><br><span class="line">			&#125;</span><br><span class="line">		&#125;</span><br><span class="line">		z = <span class="number">0</span>;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="built_in">printf</span>(<span class="string">&quot;页面置换的次数为：%d\n&quot;</span>, tot);</span><br><span class="line">	<span class="keyword">double</span> rate = (<span class="keyword">double</span>)tot / M * <span class="number">100</span>;</span><br><span class="line">	<span class="built_in">printf</span>(<span class="string">&quot;NRU缺页率为：%.2lf%%\n&quot;</span>, rate);</span><br><span class="line">	<span class="built_in">printf</span>(<span class="string">&quot;--------------------------------\n&quot;</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">	fifo(); <span class="comment">//先进先出算法</span></span><br><span class="line">	opt(); <span class="comment">//最佳转换算法</span></span><br><span class="line">	lru(); <span class="comment">//最近最久未使用</span></span><br><span class="line">	lfu(); <span class="comment">//最不经常使用算法</span></span><br><span class="line">	nru(); <span class="comment">//clock置换算法</span></span><br><span class="line"></span><br><span class="line">	<span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure>]]></content>
      <categories>
        <category>os</category>
      </categories>
      <tags>
        <tag>算法</tag>
        <tag>os</tag>
      </tags>
  </entry>
  <entry>
    <title>JS笔记</title>
    <url>/2021/10/05/JS%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/</url>
    <content><![CDATA[<p>﻿</p>
<h1 id="什么是JavaScript"><a href="#什么是JavaScript" class="headerlink" title="什么是JavaScript"></a>什么是JavaScript</h1><p>JavaScript是世界上最流行的脚本语言，因为你在电脑、手机、平板上浏览的所有的网页，以及无数基于HTML5的手机App，交互逻辑都是由JavaScript驱动的。</p>
<p>简单地说，JavaScript是一种运行在浏览器中的解释型的编程语言。</p>
<h1 id="快速入门"><a href="#快速入门" class="headerlink" title="快速入门"></a>快速入门</h1><h2 id="引入JS"><a href="#引入JS" class="headerlink" title="引入JS"></a>引入JS</h2><figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="meta-keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">&quot;en&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">&quot;UTF-8&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>Title<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!--    内部引入--&gt;</span></span><br><span class="line"><span class="comment">&lt;!--    &lt;script&gt;--&gt;</span></span><br><span class="line"><span class="comment">&lt;!--        alert(&#x27;hello, world&#x27;);--&gt;</span></span><br><span class="line"><span class="comment">&lt;!--    &lt;/script&gt;--&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!--    外部引入--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">&quot;js/qj.js&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure>



<figure class="highlight js"><table><tr><td class="code"><pre><span class="line">alert(<span class="string">&#x27;hello, world&#x27;</span>);</span><br></pre></td></tr></table></figure>

<h2 id="2-2-基本语法"><a href="#2-2-基本语法" class="headerlink" title="2.2 基本语法"></a>2.2 基本语法</h2><p><img src="https://img-blog.csdnimg.cn/d56fc92290a24ae4830b7e382dec5f3e.png?x-oss-process=image/watermark,type_ZHJvaWRzYW5zZmFsbGJhY2s,shadow_50,text_Q1NETiBAQ29kZVNsb2dhbg==,size_20,color_FFFFFF,t_70,g_se,x_16#pic_center" alt="在这里插入图片描述"></p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line">alert(num)</span><br><span class="line"><span class="built_in">console</span>.log(num)</span><br></pre></td></tr></table></figure>



<h2 id="2-3-数据类型"><a href="#2-3-数据类型" class="headerlink" title="2.3 数据类型"></a>2.3 数据类型</h2><p>数值、文本、图形、音频、视频</p>
<h3 id="比较运算符"><a href="#比较运算符" class="headerlink" title="比较运算符"></a>比较运算符</h3><figure class="highlight js"><table><tr><td class="code"><pre><span class="line">===  <span class="comment">//一定需要使用三等来判断相等</span></span><br></pre></td></tr></table></figure>



<p>NaN与所有的数都不相等</p>
<p>只能使用方法 isNaN()</p>
<h3 id="数组"><a href="#数组" class="headerlink" title="数组"></a>数组</h3><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> num = [<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>,<span class="string">&#x27;hello&#x27;</span>, <span class="string">&#x27;a&#x27;</span>, <span class="number">4.2</span>];</span><br></pre></td></tr></table></figure>

<p>用中括号，可以是不同的数据类型</p>
<h3 id="对象"><a href="#对象" class="headerlink" title="对象"></a>对象</h3><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> person = &#123;</span><br><span class="line">	name: <span class="string">&quot;codeslogan&quot;</span>,</span><br><span class="line">	age: <span class="number">3</span>,</span><br><span class="line">	tag: [<span class="string">&#x27;js&#x27;</span>,<span class="string">&#x27;java&#x27;</span>,<span class="string">&#x27;web&#x27;</span>]</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>用大括号</p>
<p>命令行调用</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">person.name</span><br><span class="line">&gt; <span class="string">&quot;codeslogan&quot;</span></span><br><span class="line">person.age</span><br><span class="line">&gt; 3</span><br><span class="line">person.tag</span><br><span class="line">&gt; [<span class="string">&#x27;js&#x27;</span>,<span class="string">&#x27;java&#x27;</span>,<span class="string">&#x27;web&#x27;</span>]</span><br></pre></td></tr></table></figure>



<h2 id="2-4-严格检查模式"><a href="#2-4-严格检查模式" class="headerlink" title="2.4 严格检查模式"></a>2.4 严格检查模式</h2><figure class="highlight js"><table><tr><td class="code"><pre><span class="line">&lt;script&gt;</span><br><span class="line"><span class="meta">    &#x27;use strict&#x27;</span>;</span><br><span class="line">    <span class="keyword">let</span> i=<span class="number">1</span>;</span><br><span class="line">&lt;/script&gt;</span><br></pre></td></tr></table></figure>

<p><code>&#39;use strict&#39;;</code>需要放在JS的第一行，</p>
<p>预防变量定义时的随意性所导致的问题</p>
<p>局部变量用let关键词定义</p>
<h1 id="数据类型详解"><a href="#数据类型详解" class="headerlink" title="数据类型详解"></a>数据类型详解</h1><h2 id="字符串"><a href="#字符串" class="headerlink" title="字符串"></a>字符串</h2><h3 id="多行字符串"><a href="#多行字符串" class="headerlink" title="多行字符串"></a>多行字符串</h3><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> msg = <span class="string">`hello</span></span><br><span class="line"><span class="string">            world</span></span><br><span class="line"><span class="string">            java</span></span><br><span class="line"><span class="string">            javascript</span></span><br><span class="line"><span class="string">            javaweb`</span>;</span><br></pre></td></tr></table></figure>



<h3 id="模板字符串"><a href="#模板字符串" class="headerlink" title="模板字符串"></a>模板字符串</h3><figure class="highlight js"><table><tr><td class="code"><pre><span class="line">&lt;script&gt;</span><br><span class="line"><span class="meta">    &#x27;use strict&#x27;</span>;</span><br><span class="line">    <span class="keyword">let</span> str = <span class="string">&quot;hello&quot;</span>;</span><br><span class="line">    <span class="keyword">let</span> age = <span class="number">3</span>;</span><br><span class="line">    <span class="keyword">let</span> msg = <span class="string">`你好呀，<span class="subst">$&#123;str&#125;</span>`</span>;</span><br><span class="line">&lt;/script&gt;</span><br></pre></td></tr></table></figure>



<h3 id="字符串的不可变性"><a href="#字符串的不可变性" class="headerlink" title="字符串的不可变性"></a>字符串的不可变性</h3><p><img src="https://img-blog.csdnimg.cn/6b0f74b3f86043f0bf0242ccf0befd19.png?x-oss-process=image/watermark,type_ZHJvaWRzYW5zZmFsbGJhY2s,shadow_50,text_Q1NETiBAQ29kZVNsb2dhbg==,size_11,color_FFFFFF,t_70,g_se,x_16#pic_center" alt="在这里插入图片描述"></p>
<h2 id="数组-1"><a href="#数组-1" class="headerlink" title="数组"></a>数组</h2><p>Array可以包含任何数据类型的数据</p>
<h3 id="长度"><a href="#长度" class="headerlink" title="长度"></a>长度</h3><p>arr.length可以通过赋值任意改变</p>
<h3 id="indexOf"><a href="#indexOf" class="headerlink" title="indexOf"></a>indexOf</h3><p>获取某元素的下标值</p>
<h3 id="slice"><a href="#slice" class="headerlink" title="slice()"></a>slice()</h3><p>数组版的substring，用法[a,b)</p>
<p>并返回一个新数组</p>
<h3 id="push-pop"><a href="#push-pop" class="headerlink" title="push() pop()"></a>push() pop()</h3><figure class="highlight js"><table><tr><td class="code"><pre><span class="line">push() <span class="comment">//在数组尾部添加一个值</span></span><br><span class="line">pop() <span class="comment">//弹出数组尾部的一个值，并返回</span></span><br></pre></td></tr></table></figure>



<h3 id="unshift-shift"><a href="#unshift-shift" class="headerlink" title="unshift() shift()"></a>unshift() shift()</h3><figure class="highlight js"><table><tr><td class="code"><pre><span class="line">unshift() <span class="comment">//在数组头部添加一个值</span></span><br><span class="line">shift() <span class="comment">//移除数组头部的一个值</span></span><br></pre></td></tr></table></figure>



<h3 id="sort"><a href="#sort" class="headerlink" title="sort()"></a>sort()</h3><p>排序，且会改变原来数组的值 </p>
<h3 id="reverse"><a href="#reverse" class="headerlink" title="reverse()"></a>reverse()</h3><p>反转，且会改变原来数组里的值</p>
<h3 id="concat"><a href="#concat" class="headerlink" title="concat()"></a>concat()</h3><p>拼接，不会改变原数组的值，返回一个新数组</p>
<h3 id="连接符-join"><a href="#连接符-join" class="headerlink" title="连接符 join()"></a>连接符 join()</h3><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> s = [<span class="string">&#x27;A&#x27;</span>,<span class="string">&#x27;B&#x27;</span>, <span class="string">&#x27;C&#x27;</span>]</span><br><span class="line">s.join(<span class="string">&#x27;-&#x27;</span>)</span><br><span class="line">&gt; <span class="string">&#x27;A-B-C&#x27;</span></span><br></pre></td></tr></table></figure>

<p>以join()方法中的符号，将数组元素拼接起来并返回</p>
<h2 id="对象-1"><a href="#对象-1" class="headerlink" title="对象"></a>对象</h2><h3 id="键值对"><a href="#键值对" class="headerlink" title="键值对"></a>键值对</h3><p>若干个键值对，所有的键都是一个字符串，值可以是任意的对象</p>
<p><code>person[&#39;age&#39;]</code>可以直接访问age属性</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">var 对象名 &#x3D; &#123;</span><br><span class="line">	属性名： 属性值,</span><br><span class="line">	属性名： 属性值,</span><br><span class="line">	属性名： 属性值</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="不存在的属性"><a href="#不存在的属性" class="headerlink" title="不存在的属性"></a>不存在的属性</h3><p>使用一个不存在的属性，并不会报错</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">person.haha</span><br><span class="line">&gt; undefied</span><br></pre></td></tr></table></figure>



<h3 id="动态删减属性"><a href="#动态删减属性" class="headerlink" title="动态删减属性"></a>动态删减属性</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">delete person.name</span><br><span class="line">&gt; <span class="literal">true</span></span><br></pre></td></tr></table></figure>

<p>person对象中的name属性被删除</p>
<h3 id="判存"><a href="#判存" class="headerlink" title="判存"></a>判存</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="string">&#x27;age&#x27;</span> <span class="keyword">in</span> person</span><br><span class="line">&gt; <span class="literal">true</span></span><br><span class="line">//继承</span><br><span class="line"><span class="string">&#x27;toString&#x27;</span> <span class="keyword">in</span> person</span><br><span class="line">&gt; <span class="literal">true</span></span><br></pre></td></tr></table></figure>



<p>判断一个属性是否是自身拥有（不是从父类继承的）</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">person.hasOwnProperty(<span class="string">&#x27;toString&#x27;</span>)</span><br><span class="line">&gt; <span class="literal">false</span></span><br><span class="line">person.hasOwnProperty(<span class="string">&#x27;age&#x27;</span>)</span><br><span class="line">&gt; <span class="literal">true</span></span><br></pre></td></tr></table></figure>



<h2 id="流程控制"><a href="#流程控制" class="headerlink" title="流程控制"></a>流程控制</h2><figure class="highlight js"><table><tr><td class="code"><pre><span class="line">&lt;script&gt;</span><br><span class="line"><span class="meta">    &#x27;use strict&#x27;</span>;</span><br><span class="line">    <span class="keyword">var</span> age = <span class="number">3</span>;</span><br><span class="line">    <span class="keyword">while</span> (age &lt; <span class="number">100</span>) &#123;</span><br><span class="line">        age += <span class="number">1</span>;</span><br><span class="line">        <span class="built_in">console</span>.log(age);</span><br><span class="line">    &#125;</span><br><span class="line">&lt;/script&gt;</span><br></pre></td></tr></table></figure>



<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">for</span> (<span class="keyword">let</span> i = <span class="number">0</span>; i &lt; <span class="number">10</span>; i++) &#123;</span><br><span class="line">    <span class="built_in">console</span>.log(i);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>



<h3 id="foreach遍历数组"><a href="#foreach遍历数组" class="headerlink" title="foreach遍历数组"></a>foreach遍历数组</h3><blockquote>
<p>E5.1引入</p>
</blockquote>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line">&lt;script&gt;</span><br><span class="line">    <span class="keyword">var</span> num = [<span class="number">12</span>,<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>,<span class="number">5</span>,<span class="number">6</span>];</span><br><span class="line">    num.forEach(<span class="function"><span class="keyword">function</span> (<span class="params">value</span>) </span>&#123;</span><br><span class="line">        <span class="built_in">console</span>.log(value);</span><br><span class="line">    &#125;)</span><br><span class="line">&lt;/script&gt;</span><br></pre></td></tr></table></figure>



<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">12</span><br><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td></tr></table></figure>

<h2 id="Map-amp-Set"><a href="#Map-amp-Set" class="headerlink" title="Map &amp; Set"></a>Map &amp; Set</h2><p>Map:</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line">&lt;script&gt;</span><br><span class="line"><span class="meta">    &#x27;use strict&#x27;</span>;</span><br><span class="line">    <span class="keyword">var</span> map = <span class="keyword">new</span> <span class="built_in">Map</span>([[<span class="string">&#x27;tom&#x27;</span>,<span class="number">12</span>],[<span class="string">&#x27;jason&#x27;</span>,<span class="number">4</span>], [<span class="string">&#x27;adam&#x27;</span>,<span class="number">21</span>]]);</span><br><span class="line">    <span class="keyword">var</span> age = map.get(<span class="string">&#x27;tom&#x27;</span>);</span><br><span class="line">    map.set(<span class="string">&#x27;admin&#x27;</span>,<span class="number">123456</span>);</span><br><span class="line">	map.delete(<span class="string">&#x27;tom&#x27;</span>);</span><br><span class="line">    <span class="built_in">console</span>.log(age);</span><br><span class="line">    <span class="built_in">console</span>.log(map)</span><br><span class="line">&lt;/script&gt;</span><br></pre></td></tr></table></figure>



<p>Set:无序不重复集合</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> set = <span class="keyword">new</span> <span class="built_in">Set</span>([<span class="number">1</span>,<span class="number">2</span>,<span class="number">1</span>,<span class="number">1</span>,<span class="number">1</span>,<span class="number">3</span>,<span class="number">4</span>]);</span><br><span class="line">set.add(<span class="number">5</span>);</span><br><span class="line">set.delete(<span class="number">1</span>);</span><br><span class="line"><span class="built_in">console</span>.log(set.has(<span class="number">2</span>));</span><br></pre></td></tr></table></figure>

<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="built_in">Set</span>.prototype.add()</span><br><span class="line"><span class="built_in">Set</span>.prototype.clear()</span><br><span class="line"><span class="built_in">Set</span>.prototype.delete()</span><br><span class="line"><span class="built_in">Set</span>.prototype.entries()</span><br><span class="line"><span class="built_in">Set</span>.prototype.forEach()</span><br><span class="line"><span class="built_in">Set</span>.prototype.has()</span><br><span class="line"><span class="built_in">Set</span>.prototype.values()</span><br><span class="line"><span class="built_in">Set</span>.prototype[@@iterator]()</span><br></pre></td></tr></table></figure>



<h2 id="iterator"><a href="#iterator" class="headerlink" title="iterator"></a>iterator</h2><h4 id="遍历数组"><a href="#遍历数组" class="headerlink" title="遍历数组"></a>遍历数组</h4><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> num = [<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>,<span class="number">5</span>,<span class="number">6</span>];</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">let</span> number <span class="keyword">of</span> num) &#123;</span><br><span class="line">    <span class="built_in">console</span>.log(number);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td></tr></table></figure>

<h4 id="遍历Map"><a href="#遍历Map" class="headerlink" title="遍历Map"></a>遍历Map</h4><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> map = <span class="keyword">new</span> <span class="built_in">Map</span>([[<span class="string">&#x27;jack&#x27;</span>,<span class="number">18</span>], [<span class="string">&#x27;tom&#x27;</span>,<span class="number">12</span>], [<span class="string">&#x27;adam&#x27;</span>,<span class="number">99</span>]]);</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">let</span> mapElement <span class="keyword">of</span> map) &#123;</span><br><span class="line">    <span class="built_in">console</span>.log(mapElement)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">[&#39;jack&#39;, 18]</span><br><span class="line">[&#39;tom&#39;, 12]</span><br><span class="line">[&#39;adam&#39;, 99]</span><br></pre></td></tr></table></figure>

<h4 id="遍历Set"><a href="#遍历Set" class="headerlink" title="遍历Set"></a>遍历Set</h4><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> set = <span class="keyword">new</span> <span class="built_in">Set</span>([<span class="number">1</span>,<span class="number">1</span>,<span class="number">1</span>,<span class="number">1</span>,<span class="number">3</span>,<span class="number">2</span>]); <span class="comment">//不重复无序</span></span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">let</span> number <span class="keyword">of</span> set) &#123;</span><br><span class="line">    <span class="built_in">console</span>.log(number);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">1</span><br><span class="line">3</span><br><span class="line">2</span><br></pre></td></tr></table></figure>



<h1 id="函数及面向对象编程"><a href="#函数及面向对象编程" class="headerlink" title="函数及面向对象编程"></a>函数及面向对象编程</h1><h2 id="函数定义"><a href="#函数定义" class="headerlink" title="函数定义"></a>函数定义</h2><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">abs</span>(<span class="params">x</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (x &gt;= <span class="number">0</span>) &#123;</span><br><span class="line">        <span class="keyword">return</span> x;</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> -x;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<ul>
<li><code>function</code>指出这是一个函数定义；</li>
<li><code>abs</code>是函数的名称；</li>
<li><code>(x)</code>括号内列出函数的参数，多个参数以<code>,</code>分隔；</li>
<li><code>&#123; ... &#125;</code>之间的代码是函数体，可以包含若干语句，甚至可以没有任何语句。</li>
</ul>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> abs = <span class="function"><span class="keyword">function</span> (<span class="params">x</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (x &gt;= <span class="number">0</span>) &#123;</span><br><span class="line">        <span class="keyword">return</span> x;</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> -x;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>

<p>在这种方式下，<code>function (x) &#123; ... &#125;</code>是一个匿名函数，它没有函数名。但是，这个匿名函数赋值给了变量<code>abs</code>，所以，通过变量<code>abs</code>就可以调用该函数。</p>
<p>上述两种定义<em>完全等价</em></p>
<p>注意第二种方式按照完整语法需要在函数体末尾加一个<code>;</code>！！！表示赋值语句结束。</p>
<h3 id="arguments"><a href="#arguments" class="headerlink" title="arguments"></a>arguments</h3><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">foo</span>(<span class="params">x</span>) </span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">&#x27;x = &#x27;</span> + x); <span class="comment">// 10</span></span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">var</span> i=<span class="number">0</span>; i&lt;<span class="built_in">arguments</span>.length; i++) &#123;</span><br><span class="line">        <span class="built_in">console</span>.log(<span class="string">&#x27;arg &#x27;</span> + i + <span class="string">&#x27; = &#x27;</span> + <span class="built_in">arguments</span>[i]); <span class="comment">// 10, 20, 30</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="rest"><a href="#rest" class="headerlink" title="rest"></a>rest</h3><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">foo</span>(<span class="params">a, b, ...rest</span>) </span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">&#x27;a = &#x27;</span> + a);</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">&#x27;b = &#x27;</span> + b);</span><br><span class="line">    <span class="built_in">console</span>.log(rest);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">foo(1, 2, 3, 4, 5);</span><br><span class="line">&#x2F;&#x2F; 结果:</span><br><span class="line">&#x2F;&#x2F; a &#x3D; 1</span><br><span class="line">&#x2F;&#x2F; b &#x3D; 2</span><br><span class="line">&#x2F;&#x2F; Array [ 3, 4, 5 ]</span><br></pre></td></tr></table></figure>

<h2 id="变量作用域"><a href="#变量作用域" class="headerlink" title="变量作用域"></a>变量作用域</h2><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="meta">&#x27;use strict&#x27;</span>;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">foo</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="keyword">var</span> x = <span class="number">1</span>;</span><br><span class="line">    <span class="function"><span class="keyword">function</span> <span class="title">bar</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">        <span class="keyword">var</span> y = x + <span class="number">1</span>; <span class="comment">// bar可以访问foo的变量x!</span></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">var</span> z = y + <span class="number">1</span>; <span class="comment">// ReferenceError! foo不可以访问bar的变量y!</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>内部函数可以访问外部变量，反之则不行</p>
<h3 id="变量提升"><a href="#变量提升" class="headerlink" title="变量提升"></a>变量提升</h3><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="meta">&#x27;use strict&#x27;</span>;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">foo</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="keyword">var</span> x = <span class="string">&#x27;Hello, &#x27;</span> + y;</span><br><span class="line">    <span class="built_in">console</span>.log(x);</span><br><span class="line">    <span class="keyword">var</span> y = <span class="string">&#x27;Bob&#x27;</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">Hello, undefined</span><br></pre></td></tr></table></figure>

<p>意味着js会自动将变量的声明提升到整个代码的顶部，但是注意一点，提升的是声明，具体的定义不会跟着提升</p>
<p>因此在输出 y 时，结果仍然是undefined</p>
<h3 id="全局作用域"><a href="#全局作用域" class="headerlink" title="全局作用域"></a>全局作用域</h3><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="meta">&#x27;use strict&#x27;</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> course = <span class="string">&#x27;Learn JavaScript&#x27;</span>;</span><br><span class="line">alert(course); <span class="comment">// &#x27;Learn JavaScript&#x27;</span></span><br><span class="line">alert(<span class="built_in">window</span>.course); <span class="comment">// &#x27;Learn JavaScript&#x27;</span></span><br></pre></td></tr></table></figure>

<p>使用window关键字，代表引用全局变量</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="meta">&#x27;use strict&#x27;</span>;</span><br><span class="line"></span><br><span class="line"><span class="built_in">window</span>.alert(<span class="string">&#x27;调用window.alert()&#x27;</span>);</span><br><span class="line"><span class="comment">// 把alert保存到另一个变量:</span></span><br><span class="line"><span class="keyword">var</span> old_alert = <span class="built_in">window</span>.alert;</span><br><span class="line"><span class="comment">// 给alert赋一个新函数:</span></span><br><span class="line"><span class="built_in">window</span>.alert = <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 恢复alert:</span></span><br><span class="line"><span class="built_in">window</span>.alert = old_alert;</span><br><span class="line">alert(<span class="string">&#x27;又可以用alert()了!&#x27;</span>);</span><br></pre></td></tr></table></figure>

<p>在修改<code>window.alert</code>方法后，发现函数无法再进行输出</p>
<p>可以把调用的<code>alert()</code>函数看作<code>window</code>的一个变量</p>
<h3 id="名字空间"><a href="#名字空间" class="headerlink" title="名字空间"></a>名字空间</h3><p>全局变量会绑定到<code>window</code>上，不同的JavaScript文件如果使用了相同的全局变量，或者定义了相同名字的顶层函数，都会造成命名冲突，并且很难被发现。</p>
<p>减少冲突的一个方法是把自己的所有变量和函数全部绑定到一个全局变量中。例如：</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 唯一的全局变量MYAPP:</span></span><br><span class="line"><span class="keyword">var</span> MYAPP = &#123;&#125;;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 其他变量:</span></span><br><span class="line">MYAPP.name = <span class="string">&#x27;myapp&#x27;</span>;</span><br><span class="line">MYAPP.version = <span class="number">1.0</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 其他函数:</span></span><br><span class="line">MYAPP.foo = <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="string">&#x27;foo&#x27;</span>;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>

<p>把自己的代码全部放入唯一的名字空间<code>MYAPP</code>中，会大大减少全局变量冲突的可能。</p>
<p>许多著名的JavaScript库都是这么干的：jQuery，YUI，underscore等等。</p>
<h3 id="局部作用域"><a href="#局部作用域" class="headerlink" title="局部作用域"></a>局部作用域</h3><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="meta">&#x27;use strict&#x27;</span>;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">foo</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="keyword">var</span> sum = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">let</span> i=<span class="number">0</span>; i&lt;<span class="number">100</span>; i++) &#123;</span><br><span class="line">        sum += i;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">// SyntaxError:</span></span><br><span class="line">    i += <span class="number">1</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>关键在于let关键字的使用，定义局部变量</p>
<h2 id="方法"><a href="#方法" class="headerlink" title="方法"></a>方法</h2><p>方法可以看作定义在对象里的一个函数 </p>
<p>属性名：function() {</p>
<p>​        函数体</p>
<p>}</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> person = &#123;</span><br><span class="line">        birth: <span class="number">2001</span>,</span><br><span class="line">        name: <span class="string">&#x27;adam&#x27;</span>,</span><br><span class="line">        age: <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">            <span class="keyword">var</span> now = <span class="keyword">new</span> <span class="built_in">Date</span>().getFullYear();</span><br><span class="line">            <span class="keyword">return</span> now - <span class="built_in">this</span>.birth;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure>

<p>另一种写法</p>
<p>属性名： 函数名</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">getAge</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="keyword">var</span> now = <span class="keyword">new</span> <span class="built_in">Date</span>().getFullYear();</span><br><span class="line">    <span class="keyword">return</span> now - <span class="built_in">this</span>.birth;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> person = &#123;</span><br><span class="line">        birth: <span class="number">2001</span>,</span><br><span class="line">        name: <span class="string">&#x27;adam&#x27;</span>,</span><br><span class="line">        age: getAge</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//person.age()  right!!!</span></span><br></pre></td></tr></table></figure>

<h3 id="apply"><a href="#apply" class="headerlink" title="apply"></a>apply</h3><figure class="highlight js"><table><tr><td class="code"><pre><span class="line">getAge.apply(person,[])</span><br></pre></td></tr></table></figure>



<h2 id="闭包"><a href="#闭包" class="headerlink" title="*闭包"></a>*闭包</h2><p>闭包可以理解为函数的嵌套</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">final_sum</span>(<span class="params">arr</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">var</span> sum = <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> arr.reduce(<span class="function"><span class="keyword">function</span> (<span class="params">x, y</span>) </span>&#123;</span><br><span class="line">            <span class="keyword">return</span> x + y;</span><br><span class="line">        &#125;);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> sum;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>在以上的例子中，我们在<code>final_sum(arr)</code>中定义中<code>sum</code>函数，sum函数可以直接使用来自外部函数提供的参数，并且可以将整个内部函数作为返回值返回</p>
<p>当我们调用<code>final_sum()</code>时，返回的并不是求和结果，而是求和函数：</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> f = lazy_sum([<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>]); <span class="comment">// function sum()</span></span><br></pre></td></tr></table></figure>

<p>调用函数<code>f</code>时，才真正计算求和的结果：</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line">f(); <span class="comment">// 6</span></span><br></pre></td></tr></table></figure>



<h2 id="箭头函数"><a href="#箭头函数" class="headerlink" title="箭头函数"></a>箭头函数</h2><p>箭头函数相当于匿名函数，并且简化了函数定义</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line">x =&gt; x*x</span><br></pre></td></tr></table></figure>

<p>等价于</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> (<span class="params">x</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> x * x;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>另一种形式</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line">x =&gt; &#123;</span><br><span class="line">    <span class="keyword">if</span> (x &gt; <span class="number">0</span>) &#123;</span><br><span class="line">        <span class="keyword">return</span> x * x;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">else</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> - x * x;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>



<h2 id="创建对象"><a href="#创建对象" class="headerlink" title="创建对象"></a>创建对象</h2><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> Student = &#123;</span><br><span class="line">    name: <span class="string">&quot;adam&quot;</span>,</span><br><span class="line">    age: <span class="number">3</span>,</span><br><span class="line">    sex: <span class="string">&#x27;男&#x27;</span>,</span><br><span class="line">    run: <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">        <span class="built_in">console</span>.log(<span class="built_in">this</span>.name + <span class="string">&quot; run&quot;</span>)</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>



<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> jack = &#123;</span><br><span class="line">    name: <span class="string">&quot;jack&quot;</span></span><br><span class="line">&#125;</span><br><span class="line">jack.__proto__ = Student;</span><br></pre></td></tr></table></figure>

<p>jack继承自Student类，可以调用Student对象的run方法</p>
<h2 id="class继承"><a href="#class继承" class="headerlink" title="class继承"></a>class继承</h2><p>新的关键字<code>class</code>从ES6开始正式被引入到JavaScript中。<code>class</code>的目的就是让定义类更简单。</p>
<p>比较一下就可以发现，<code>class</code>的定义包含了构造函数<code>constructor</code>和定义在原型对象上的函数<code>hello()</code>（注意没有<code>function</code>关键字）</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line">&lt;script&gt;</span><br><span class="line">    <span class="class"><span class="keyword">class</span> <span class="title">student</span> </span>&#123;</span><br><span class="line">        <span class="function"><span class="title">constructor</span>(<span class="params">name</span>)</span> &#123;</span><br><span class="line">            <span class="built_in">this</span>.name = name;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="function"><span class="title">hello</span>(<span class="params"></span>)</span> &#123;</span><br><span class="line">            alert(<span class="string">&quot;hello&quot;</span>)</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="class"><span class="keyword">class</span> <span class="title">graduate</span> <span class="keyword">extends</span> <span class="title">student</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">        <span class="function"><span class="title">constructor</span>(<span class="params">name, grade</span>)</span> &#123;</span><br><span class="line">            <span class="built_in">super</span>(name);</span><br><span class="line">            <span class="built_in">this</span>.grade = grade;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="function"><span class="title">code</span>(<span class="params"></span>)</span> &#123;</span><br><span class="line">            alert(<span class="string">&quot;I love coding&quot;</span>)</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">var</span> jack = <span class="keyword">new</span> student(<span class="string">&quot;jack&quot;</span>);</span><br><span class="line">    <span class="keyword">var</span> tom = <span class="keyword">new</span> graduate(<span class="string">&quot;tom&quot;</span>,<span class="number">3</span>);</span><br><span class="line">&lt;/script&gt;</span><br></pre></td></tr></table></figure>





<h2 id="原型链继承"><a href="#原型链继承" class="headerlink" title="**原型链继承"></a>**原型链继承</h2><h1 id="常用对象"><a href="#常用对象" class="headerlink" title="常用对象"></a>常用对象</h1><h2 id="date"><a href="#date" class="headerlink" title="date"></a>date</h2><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> date = <span class="keyword">new</span> <span class="built_in">Date</span>();</span><br><span class="line">    date.getFullYear();</span><br><span class="line">    date.getDate();</span><br><span class="line">    date.getDay();</span><br><span class="line">    date.getHours();</span><br><span class="line">    date.getMinutes();</span><br><span class="line">    date.getMonth();</span><br><span class="line">    date.getSeconds();</span><br><span class="line">    date.getTime();</span><br></pre></td></tr></table></figure>



<figure class="highlight js"><table><tr><td class="code"><pre><span class="line">date.toString()</span><br><span class="line">date.toGMTString()</span><br></pre></td></tr></table></figure>



<h2 id="JSON"><a href="#JSON" class="headerlink" title="JSON"></a>JSON</h2><blockquote>
<p>是什么？</p>
</blockquote>
<p><a href="https://baike.baidu.com/item/JSON">JSON</a>(JavaScript Object Notation, JS 对象简谱) 是一种轻量级的数据交换格式。</p>
<p>它基于 <a href="https://baike.baidu.com/item/ECMAScript">ECMAScript</a> (欧洲计算机协会制定的js规范)的一个子集，采用完全独立于编程语言的文本格式来存储和表示数据。</p>
<p>简洁和清晰的<strong>层次结构</strong>使得 JSON 成为理想的数据交换语言。 易于人阅读和编写，同时也易于机器解析和生成，并有效地提升网络传输效率。</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line">&lt;script&gt;</span><br><span class="line">    <span class="keyword">var</span> user = &#123;</span><br><span class="line">        name: <span class="string">&quot;adam&quot;</span>,</span><br><span class="line">        age: <span class="number">3</span>,</span><br><span class="line">        sex: <span class="string">&#x27;男&#x27;</span></span><br><span class="line">    &#125;</span><br><span class="line">&lt;/script&gt;</span><br></pre></td></tr></table></figure>
<p><img src="https://img-blog.csdnimg.cn/e2eba2b6a80c466aa6a344be3be78e7e.png?x-oss-process=image/watermark,type_ZHJvaWRzYW5zZmFsbGJhY2s,shadow_50,text_Q1NETiBAQ29kZVNsb2dhbg==,size_14,color_FFFFFF,t_70,g_se,x_16#pic_center" alt="在这里插入图片描述"></p>
<h3 id="json和js对象"><a href="#json和js对象" class="headerlink" title="json和js对象"></a>json和js对象</h3><p>JSON 是 JS 对象的字符串表示法，它使用文本表示一个 JS 对象的信息，本质是一个字符串。</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> obj = &#123;<span class="attr">name</span>: <span class="string">&#x27;adam&#x27;</span>, <span class="attr">age</span>: <span class="number">3</span>, <span class="attr">sex</span>: <span class="string">&#x27;男&#x27;</span>&#125;;</span><br><span class="line"><span class="keyword">var</span> json = <span class="string">&#x27;&#123;&quot;name&quot;:&quot;adam&quot;,&quot;age&quot;:3,&quot;sex&quot;:&quot;男&quot;&#125;&#x27;</span>;</span><br></pre></td></tr></table></figure>

<p>json格式用单引号<code>&#39;&#39;</code>包含，键值统一用双引号</p>
<h3 id="JSON-和-JS-对象互转"><a href="#JSON-和-JS-对象互转" class="headerlink" title="JSON 和 JS 对象互转"></a>JSON 和 JS 对象互转</h3><p>要实现从JSON字符串转换为JS对象，使用 JSON.parse() 方法：</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> obj = <span class="built_in">JSON</span>.parse(<span class="string">&#x27;&#123;&quot;a&quot;: &quot;Hello&quot;, &quot;b&quot;: &quot;World&quot;&#125;&#x27;</span>); <span class="comment">//结果是 &#123;a: &#x27;Hello&#x27;, b: &#x27;World&#x27;&#125;</span></span><br></pre></td></tr></table></figure>

<p>要实现从JS对象转换为JSON字符串，使用 JSON.stringify() 方法：</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> json = <span class="built_in">JSON</span>.stringify(&#123;<span class="attr">a</span>: <span class="string">&#x27;Hello&#x27;</span>, <span class="attr">b</span>: <span class="string">&#x27;World&#x27;</span>&#125;); <span class="comment">//结果是 &#x27;&#123;&quot;a&quot;: &quot;Hello&quot;, &quot;b&quot;: &quot;World&quot;&#125;&#x27;</span></span><br></pre></td></tr></table></figure>



<h1 id="Dom-重点"><a href="#Dom-重点" class="headerlink" title="Dom(重点)"></a>Dom(重点)</h1><blockquote>
<p>文档对象模型 document object model</p>
</blockquote>
<p>始终记住DOM是一个树形结构。操作一个DOM节点实际上就是这么几个操作：</p>
<ul>
<li>更新：更新该DOM节点的内容，相当于更新了该DOM节点表示的HTML的内容；</li>
<li>遍历：遍历该DOM节点下的子节点，以便进行进一步操作；</li>
<li>添加：在该DOM节点下新增一个子节点，相当于动态增加了一个HTML节点；</li>
<li>删除：将该节点从HTML中删除，相当于删掉了该DOM节点的内容以及它包含的所有子节点。</li>
</ul>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="meta-keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">&quot;en&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">&quot;UTF-8&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>dom结点<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">&quot;father&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">h1</span> <span class="attr">id</span>=<span class="string">&quot;h1&quot;</span>&gt;</span>h1<span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">p</span> <span class="attr">class</span>=<span class="string">&quot;p1&quot;</span>&gt;</span>p1<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">p</span> <span class="attr">id</span>=<span class="string">&quot;p2&quot;</span>&gt;</span>p2<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="javascript">    <span class="keyword">var</span> div1 = <span class="built_in">document</span>.getElementById(<span class="string">&#x27;father&#x27;</span>);</span></span><br><span class="line"><span class="javascript">    <span class="keyword">var</span> h1 = <span class="built_in">document</span>.getElementById(<span class="string">&#x27;h1&#x27;</span>);</span></span><br><span class="line"><span class="javascript">    <span class="keyword">var</span> p1 = <span class="built_in">document</span>.getElementsByClassName(<span class="string">&#x27;p1&#x27;</span>);</span></span><br><span class="line"><span class="javascript">    <span class="keyword">var</span> p2 = <span class="built_in">document</span>.getElementsByName(<span class="string">&#x27;p&#x27;</span>);</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p>最常用的方法是</p>
<p><code>document.getElementById()</code></p>
<p><code>document.getElementsByTagName()</code></p>
<p>以及CSS选择器<code>document.getElementsByClassName()</code>。</p>
<h2 id="插入"><a href="#插入" class="headerlink" title="插入"></a>插入</h2><h3 id="追加"><a href="#追加" class="headerlink" title="追加"></a>追加</h3><p><code>appendChild</code>方法加结点添加至此末尾</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">p</span> <span class="attr">id</span>=<span class="string">&quot;js&quot;</span>&gt;</span>javascript<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">&quot;list&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">p</span> <span class="attr">id</span>=<span class="string">&quot;javase&quot;</span>&gt;</span>javase<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">p</span> <span class="attr">id</span>=<span class="string">&quot;javaee&quot;</span>&gt;</span>javaee<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">p</span> <span class="attr">id</span>=<span class="string">&quot;javame&quot;</span>&gt;</span>javame<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="javascript">    <span class="keyword">var</span> </span></span><br><span class="line"><span class="javascript">    	js = <span class="built_in">document</span>.getElementById(<span class="string">&quot;js&quot;</span>),</span></span><br><span class="line"><span class="javascript">        list = <span class="built_in">document</span>.getElementById(<span class="string">&quot;list&quot;</span>);</span></span><br><span class="line">    list.appendChild(js)</span><br><span class="line"><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p><img src="https://img-blog.csdnimg.cn/5bbefc69448e4254b3c948506672e5ed.png?x-oss-process=image/watermark,type_ZHJvaWRzYW5zZmFsbGJhY2s,shadow_50,text_Q1NETiBAQ29kZVNsb2dhbg==,size_17,color_FFFFFF,t_70,g_se,x_16#pic_center" alt="在这里插入图片描述"></p>
<p>效果</p>
<p><img src="https://img-blog.csdnimg.cn/be271ccf380e49f890c5ee17f048d0e4.png?x-oss-process=image/watermark,type_ZHJvaWRzYW5zZmFsbGJhY2s,shadow_50,text_Q1NETiBAQ29kZVNsb2dhbg==,size_17,color_FFFFFF,t_70,g_se,x_16#pic_center" alt="在这里插入图片描述"></p>
<p>这个节点首先会从原先的位置删除，再插入到新的位置。</p>
<h3 id="从头创建"><a href="#从头创建" class="headerlink" title="从头创建"></a>从头创建</h3><figure class="highlight js"><table><tr><td class="code"><pre><span class="line">&lt;script&gt;</span><br><span class="line">    <span class="keyword">var</span> js = <span class="built_in">document</span>.getElementById(<span class="string">&quot;js&quot;</span>),</span><br><span class="line">        python = <span class="built_in">document</span>.createElement(<span class="string">&#x27;p&#x27;</span>),</span><br><span class="line">        list = <span class="built_in">document</span>.getElementById(<span class="string">&quot;list&quot;</span>);</span><br><span class="line">    python.id = <span class="string">&quot;python&quot;</span>;</span><br><span class="line">    python.innerText = <span class="string">&quot;Python&quot;</span>;</span><br><span class="line">    list.appendChild(python)</span><br><span class="line">    list.appendChild(js)</span><br><span class="line"></span><br><span class="line">&lt;/script&gt;</span><br></pre></td></tr></table></figure>

<p><code>document.createElement(&#39;p&#39;)</code>通过此方法，创建一个p标签</p>
<p><code>python.id</code>  <code>python.innerText</code>分别修改其Id与文本</p>
<p>除了添加标签以外，我们可以利用js的这一特性，来添加css样式表</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> d = <span class="built_in">document</span>.createElement(<span class="string">&#x27;style&#x27;</span>);</span><br><span class="line">d.setAttribute(<span class="string">&#x27;type&#x27;</span>, <span class="string">&#x27;text/css&#x27;</span>);</span><br><span class="line">d.innerHTML = <span class="string">&#x27;p &#123; color: yellow; background: red &#125;&#x27;</span>;</span><br><span class="line"><span class="built_in">document</span>.getElementsByTagName(<span class="string">&#x27;head&#x27;</span>)[<span class="number">0</span>].appendChild(d);</span><br></pre></td></tr></table></figure>

<p><img src="https://img-blog.csdnimg.cn/d7d35b0c445f48caa1c833b0dc78b470.png#pic_center" alt="在这里插入图片描述"></p>
<figure class="highlight"><table><tr><td class="code"><pre><span class="line">&lt;style type=&quot;text/css&quot;&gt;</span><br><span class="line">    <span class="selector-tag">p</span>&#123;</span><br><span class="line">        <span class="attribute">color</span>: yellow;</span><br><span class="line">        <span class="attribute">background</span>: red</span><br><span class="line">    &#125;</span><br><span class="line">&lt;/style&gt;</span><br></pre></td></tr></table></figure>

<p>以上两个操作等价!</p>
<h3 id="insertBefore"><a href="#insertBefore" class="headerlink" title="insertBefore"></a>insertBefore</h3><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span></span><br><span class="line">    list = <span class="built_in">document</span>.getElementById(<span class="string">&quot;list&quot;</span>),</span><br><span class="line">    ee = <span class="built_in">document</span>.getElementById(<span class="string">&quot;javaee&quot;</span>),</span><br><span class="line">    js = <span class="built_in">document</span>.getElementById(<span class="string">&quot;js&quot;</span>);</span><br><span class="line">list.insertBefore(js,ee);</span><br></pre></td></tr></table></figure>

<p>Node.insertBefore<HTMLElement>(     newChild: HTMLElement,     refChild: Node | null): HTMLElement</HTMLElement></p>
<h2 id="更新"><a href="#更新" class="headerlink" title="更新"></a>更新</h2><p>一种是修改<code>innerHTML</code>属性，这个方式非常强大，不但可以修改一个DOM节点的文本内容，还可以直接通过HTML片段修改DOM节点内部的子树：</p>
<p>值得注意的是，innerHTML是属性，而不是方法</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> aa = <span class="built_in">document</span>.getElementById(<span class="string">&#x27;h1&#x27;</span>)</span><br><span class="line">aa.innerHTML=<span class="string">&quot;&lt;strong&gt;123&lt;/strong&gt;&quot;</span></span><br></pre></td></tr></table></figure>

<p>innerHTML里可以使用html标签，会自动转变为相应的格式</p>
<p>第二种是修改<code>innerText</code>或<code>textContent</code>属性，这样可以自动对字符串进行HTML编码，保证无法设置任何HTML标签：</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> aa = <span class="built_in">document</span>.getElementById(<span class="string">&#x27;h1&#x27;</span>)</span><br><span class="line">aa.innerText=<span class="string">&quot;abcdedf&quot;</span></span><br><span class="line">aa.textContent=<span class="string">&quot;aaa&quot;</span></span><br></pre></td></tr></table></figure>

<p>两者的区别在于读取属性时，<code>innerText</code>不返回隐藏元素的文本，而<code>textContent</code>返回所有文本。</p>
<h2 id="删除"><a href="#删除" class="headerlink" title="删除"></a>删除</h2><p>删除结点，首先定位到要删除的文档标签，可以通过id名</p>
<p>获取当前标签的父元素</p>
<p>通过父元素来移除当前标签，从而达到删除的效果</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> self = <span class="built_in">document</span>.getElementById(<span class="string">&quot;p2&quot;</span>)</span><br><span class="line"><span class="keyword">var</span> father = self.parentElement</span><br><span class="line"><span class="keyword">var</span> remove = father.removeChild(self)</span><br><span class="line">remove === self <span class="comment">//true</span></span><br></pre></td></tr></table></figure>

<p>注意到删除后的节点虽然不在文档树中了，但其实它还在内存中，可以随时再次被添加到别的位置。</p>
<p>当你遍历一个父节点的子节点并进行删除操作时，要注意，<code>children</code>属性是一个只读属性，并且它在子节点变化时会实时更新。</p>
<p>也就是说存在一个操作，重复删除第一个结点，就可以达到删除所有结点的效果</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> parent = <span class="built_in">document</span>.getElementById(<span class="string">&#x27;parent&#x27;</span>);</span><br><span class="line">parent.removeChild(parent.children[<span class="number">0</span>]);</span><br><span class="line">parent.removeChild(parent.children[<span class="number">1</span>]); <span class="comment">// &lt;-- 浏览器报错</span></span><br><span class="line">parent.removeChild(parent.children[<span class="number">0</span>]); <span class="comment">//right !!!</span></span><br></pre></td></tr></table></figure>

<h1 id="Bom-重点"><a href="#Bom-重点" class="headerlink" title="Bom(重点)"></a>Bom(重点)</h1><blockquote>
<p>浏览器对象模型</p>
</blockquote>
<h2 id="window"><a href="#window" class="headerlink" title="window"></a>window</h2><p><code>window</code>对象不但充当全局作用域，而且表示<strong>浏览器窗口</strong></p>
<p><code>window</code>对象有<code>innerWidth</code>和<code>innerHeight</code>属性，可以获取浏览器窗口的内部宽度和高度。内部宽高是指除去菜单栏、工具栏、边框等占位元素后，用于显示网页的净宽高</p>
<p>对应的，还有一个<code>outerWidth</code>和<code>outerHeight</code>属性，可以获取浏览器窗口的整个宽高。</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="built_in">console</span>.log(<span class="built_in">window</span>.outerHeight)</span><br><span class="line"><span class="number">701</span></span><br><span class="line"><span class="built_in">console</span>.log(<span class="built_in">window</span>.outerWidth)</span><br><span class="line"><span class="number">865</span></span><br><span class="line"><span class="built_in">console</span>.log(<span class="built_in">window</span>.innerHeight)</span><br><span class="line"><span class="number">578</span></span><br><span class="line"><span class="built_in">console</span>.log(<span class="built_in">window</span>.innerWidth)</span><br><span class="line"><span class="number">150</span></span><br></pre></td></tr></table></figure>



<h2 id="navigator"><a href="#navigator" class="headerlink" title="navigator"></a><del>navigator</del></h2><p><code>navigator</code>对象表示<strong>浏览器信息</strong>，最常用的属性包括：</p>
<ul>
<li><p>navigator.appName：浏览器名称；</p>
<p>Netscape</p>
</li>
<li><p>navigator.appVersion：浏览器版本；</p>
<p>5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/94.0.4606.71 Safari/537.36</p>
</li>
<li><p>navigator.language：浏览器设置的语言；</p>
<p>zh</p>
</li>
<li><p>navigator.platform：操作系统类型；</p>
<p>win32</p>
</li>
<li><p>navigator.userAgent：浏览器设定的<code>User-Agent</code>字符串</p>
<p>Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/94.0.4606.71 Safari/537.36</p>
</li>
</ul>
<p><em>请注意</em>，<code>navigator</code>的信息可以很容易地被用户修改，所以JavaScript读取的值不一定是正确的</p>
<h2 id="screen"><a href="#screen" class="headerlink" title="screen"></a>screen</h2><p><code>screen</code>对象表示<strong>屏幕的信息</strong>，常用的属性有：</p>
<ul>
<li>screen.width：屏幕宽度，以像素为单位；</li>
<li>screen.height：屏幕高度，以像素为单位；</li>
<li>screen.colorDepth：返回颜色位数，如8、16、24</li>
</ul>
<h2 id="location"><a href="#location" class="headerlink" title="location*"></a>location*</h2><p><code>location</code>对象表示当前页面的URL信息。例如，一个完整的URL：</p>
<blockquote>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">http:&#x2F;&#x2F;www.example.com:8080&#x2F;path&#x2F;index.html?a&#x3D;1&amp;b&#x3D;2#TOP</span><br></pre></td></tr></table></figure>
</blockquote>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line">location.protocol; <span class="comment">// &#x27;http&#x27;</span></span><br><span class="line">location.host; <span class="comment">// &#x27;www.example.com&#x27;</span></span><br><span class="line">location.port; <span class="comment">// &#x27;8080&#x27;</span></span><br><span class="line">location.pathname; <span class="comment">// &#x27;/path/index.html&#x27;</span></span><br><span class="line">location.search; <span class="comment">// &#x27;?a=1&amp;b=2&#x27;</span></span><br><span class="line">location.hash; <span class="comment">// &#x27;TOP&#x27;</span></span><br></pre></td></tr></table></figure>



<h2 id="document"><a href="#document" class="headerlink" title="document**"></a>document**</h2><p><code>document</code>对象表示当前页面。由于HTML在浏览器中以DOM形式表示为树形结构，<code>document</code>对象就是整个DOM树的根节点。</p>
<p><code>document</code>的<code>title</code>属性是从HTML文档中的<code>&lt;title&gt;xxx&lt;/title&gt;</code>读取的，但是可以动态改变：</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="built_in">document</span>.title = <span class="string">&#x27;努力学习JavaScript!&#x27;</span>;</span><br></pre></td></tr></table></figure>

<h3 id="cookie"><a href="#cookie" class="headerlink" title="cookie"></a>cookie</h3><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">document.cookie</span><br></pre></td></tr></table></figure>

<p>Cookie是由服务器发送的<code>key-value</code>标示符。因为HTTP协议是无状态的，但是服务器要区分到底是哪个用户发过来的请求，就可以用Cookie来区分。当一个用户成功登录后，服务器发送一个Cookie给浏览器，例如<code>user=ABC123XYZ(加密的字符串)...</code>，此后，浏览器访问该网站时，会在请求头附上这个Cookie，服务器根据Cookie即可区分出用户。</p>
<p>Cookie还可以存储网站的一些设置，例如，页面显示的语言等等</p>
<p>然而cookie的使用存在极大的安全隐患，js可以读取到页面的cookie，而用户的登录信息通常也存在cookie中。</p>
<p>在html中引入第三方的js代码是允许的，如果存在恶意代码，cookie则会被截取</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!-- 当前页面在wwwexample.com --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">&quot;http://www.foo.com/jquery.js&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line">    ...</span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p><code>www.foo.com</code>网站将直接获取到<code>www.example.com</code>网站的用户登录信息</p>
<p>为了确保安全，服务器端在设置Cookie时，应该始终坚持使用<code>httpOnly</code>。</p>
<p>现主流的浏览器都有httpOnly这个选项</p>
<h2 id="history"><a href="#history" class="headerlink" title="history"></a><del>history</del></h2><p><code>history</code>对象保存了浏览器的历史记录，JavaScript可以调用<code>history</code>对象的<code>back()</code>或<code>forward ()</code>，相当于用户点击了浏览器的“后退”或“前进”按钮。</p>
<p>这个对象属于历史遗留对象，对于现代Web页面来说，由于大量使用AJAX和页面交互，简单粗暴地调用<code>history.back()</code>可能会让用户感到非常愤怒。</p>
<p>新手开始设计Web页面时喜欢在登录页登录成功时调用<code>history.back()</code>，试图回到登录前的页面。这是一种错误的方法。</p>
<p>任何情况，你都不应该使用<code>history</code>这个对象了。</p>
<h2 id="操作表单"><a href="#操作表单" class="headerlink" title="操作表单"></a>操作表单</h2><h3 id="html主要表单"><a href="#html主要表单" class="headerlink" title="html主要表单"></a>html主要表单</h3><p>HTML表单的输入控件主要有以下几种：</p>
<ul>
<li>文本框，对应的<code>&lt;input type=&quot;text&quot;&gt;</code>，用于输入文本；</li>
<li>口令框，对应的<code>&lt;input type=&quot;password&quot;&gt;</code>，用于输入口令；</li>
<li>单选框，对应的<code>&lt;input type=&quot;radio&quot;&gt;</code>，用于选择一项；</li>
<li>复选框，对应的<code>&lt;input type=&quot;checkbox&quot;&gt;</code>，用于选择多项；</li>
<li>下拉框，对应的<code>&lt;select&gt;</code>，用于选择一项；</li>
<li>隐藏文本，对应的<code>&lt;input type=&quot;hidden&quot;&gt;</code>，用户不可见，但表单提交时会把隐藏文本发送到服务器。</li>
</ul>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">form</span> <span class="attr">action</span>=<span class="string">&quot;post&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">p</span>&gt;</span><span class="tag">&lt;<span class="name">span</span>&gt;</span>用户名<span class="tag">&lt;/<span class="name">span</span>&gt;</span> <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;text&quot;</span>, <span class="attr">id</span>=<span class="string">&quot;username&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">form</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="javascript">    <span class="keyword">var</span> user_text = <span class="built_in">document</span>.getElementById(<span class="string">&quot;username&quot;</span>);</span></span><br><span class="line"><span class="javascript">    <span class="comment">//user_text.value 得到框中的值</span></span></span><br><span class="line"><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p><img src="https://img-blog.csdnimg.cn/bbdad9f1981f484f81d43b5caf20e377.png?x-oss-process=image/watermark,type_ZHJvaWRzYW5zZmFsbGJhY2s,shadow_50,text_Q1NETiBAQ29kZVNsb2dhbg==,size_20,color_FFFFFF,t_70,g_se,x_16#pic_center" alt="在这里插入图片描述"></p>
<p>这种方式可以应用于<code>text</code>、<code>password</code>、<code>hidden</code>以及<code>select</code>。</p>
<p>至于单选框和多选框需要利用到<code>checked</code>关键字</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">form</span> <span class="attr">method</span>=<span class="string">&quot;post&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">p</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">span</span>&gt;</span>用户名<span class="tag">&lt;/<span class="name">span</span>&gt;</span> <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;text&quot;</span>, <span class="attr">id</span>=<span class="string">&quot;username&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">p</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">span</span>&gt;</span>性别<span class="tag">&lt;/<span class="name">span</span>&gt;</span> <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;radio&quot;</span> <span class="attr">name</span>=<span class="string">&quot;sex&quot;</span> <span class="attr">value</span>=<span class="string">&quot;boy&quot;</span> <span class="attr">id</span>=<span class="string">&quot;boy&quot;</span>&gt;</span>男</span><br><span class="line">                          <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;radio&quot;</span> <span class="attr">name</span>=<span class="string">&quot;sex&quot;</span> <span class="attr">value</span>=<span class="string">&quot;girl&quot;</span> <span class="attr">id</span>=<span class="string">&quot;girl&quot;</span>&gt;</span>女</span><br><span class="line">    <span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">form</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="javascript">    <span class="keyword">var</span></span></span><br><span class="line"><span class="javascript">        user_text = <span class="built_in">document</span>.getElementById(<span class="string">&quot;username&quot;</span>),</span></span><br><span class="line"><span class="javascript">        boy_radio = <span class="built_in">document</span>.getElementById(<span class="string">&quot;boy&quot;</span>),</span></span><br><span class="line"><span class="javascript">        girl_radio = <span class="built_in">document</span>.getElementById(<span class="string">&quot;girl&quot;</span>);</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure>

<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">boy_radio.value</span><br><span class="line">&gt; <span class="string">&#x27;boy&#x27;</span></span><br><span class="line">girl_radio.value</span><br><span class="line">&gt; <span class="string">&#x27;girl&#x27;</span></span><br><span class="line">boy_radio.checked</span><br><span class="line">&gt; <span class="literal">false</span></span><br><span class="line">girl_radio.checked</span><br><span class="line">&gt; <span class="literal">true</span></span><br></pre></td></tr></table></figure>

<h3 id="md5"><a href="#md5" class="headerlink" title="md5"></a>md5</h3><figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="meta-keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">&quot;en&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">&quot;UTF-8&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>submit<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">&quot;https://cdn.bootcdn.net/ajax/libs/blueimp-md5/2.18.0/js/md5.min.js&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">form</span> <span class="attr">action</span>=<span class="string">&quot;#&quot;</span> <span class="attr">method</span>=<span class="string">&quot;post&quot;</span> <span class="attr">onsubmit</span>=<span class="string">&quot;return f()&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">p</span>&gt;</span><span class="tag">&lt;<span class="name">span</span>&gt;</span>用户名：<span class="tag">&lt;/<span class="name">span</span>&gt;</span><span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;text&quot;</span> <span class="attr">name</span>=<span class="string">&quot;username&quot;</span> <span class="attr">id</span>=<span class="string">&quot;username&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">p</span>&gt;</span><span class="tag">&lt;<span class="name">span</span>&gt;</span>密码：<span class="tag">&lt;/<span class="name">span</span>&gt;</span><span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;password&quot;</span>  <span class="attr">id</span>=<span class="string">&quot;input-pwd&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;hidden&quot;</span> <span class="attr">id</span>=<span class="string">&quot;md5-pwd&quot;</span> <span class="attr">name</span>=<span class="string">&quot;password&quot;</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">button</span> <span class="attr">type</span>=<span class="string">&quot;submit&quot;</span>&gt;</span>提交<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">form</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="javascript">    <span class="function"><span class="keyword">function</span> <span class="title">f</span>(<span class="params"></span>) </span>&#123;</span></span><br><span class="line"><span class="javascript">        <span class="keyword">var</span> user_name = <span class="built_in">document</span>.getElementById(<span class="string">&quot;username&quot;</span>);</span></span><br><span class="line"><span class="javascript">        <span class="keyword">var</span> input_pwd = <span class="built_in">document</span>.getElementById(<span class="string">&quot;input-pwd&quot;</span>);</span></span><br><span class="line"><span class="javascript">        <span class="keyword">var</span> md5_pwd = <span class="built_in">document</span>.getElementById(<span class="string">&quot;md5-pwd&quot;</span>);</span></span><br><span class="line"></span><br><span class="line">        md5_pwd.value = md5(input_pwd.value);</span><br><span class="line"><span class="javascript">        <span class="keyword">return</span> <span class="literal">true</span>;</span></span><br><span class="line">    &#125;</span><br><span class="line"><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p>注意到<code>id</code>为<code>md5-pwd</code>的<code>&lt;input&gt;</code>标记了<code>name=&quot;password&quot;</code>，而用户输入的<code>id</code>为<code>input-pwd</code>的<code>&lt;input&gt;</code>没有<code>name</code>属性。没有<code>name</code>属性的<code>&lt;input&gt;</code>的数据不会被提交</p>
<h2 id="操作文件"><a href="#操作文件" class="headerlink" title="操作文件"></a>操作文件</h2><figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;file&quot;</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p><em>注意</em>：当一个表单包含<code>&lt;input type=&quot;file&quot;&gt;</code>时，表单的<code>enctype</code>必须指定为<code>multipart/form-data</code>，<code>method</code>必须指定为<code>post</code>，浏览器才能正确编码并以<code>multipart/form-data</code>格式发送表单的数据。</p>
<h1 id="jQuery"><a href="#jQuery" class="headerlink" title="jQuery"></a>jQuery</h1><h2 id="cdn引入"><a href="#cdn引入" class="headerlink" title="cdn引入"></a>cdn引入</h2><figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="meta-keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">&quot;en&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">&quot;UTF-8&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>Title<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">&quot;https://cdn.bootcdn.net/ajax/libs/jquery/3.6.0/jquery.js&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure>



<h2 id="公式"><a href="#公式" class="headerlink" title="公式"></a>公式</h2><p> <code>$(selector).action()</code></p>
<p>selector即css中的选择器</p>
<h2 id="事件"><a href="#事件" class="headerlink" title="事件"></a>事件</h2><figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">&quot;&quot;</span> <span class="attr">id</span>=<span class="string">&quot;test-jQuery&quot;</span>&gt;</span>here<span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="javascript">    $(<span class="string">&#x27;#test-jQuery&#x27;</span>).click(<span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span></span><br><span class="line"><span class="javascript">        alert(<span class="string">&#x27;hello,jQuery&#x27;</span>)</span></span><br><span class="line">    &#125;)</span><br><span class="line"><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p>jQuery对象类似数组，它的每个元素都是一个引用了DOM节点的对象。</p>
<h3 id="选择器与dom对比"><a href="#选择器与dom对比" class="headerlink" title="选择器与dom对比"></a>选择器与dom对比</h3><table>
<thead>
<tr>
<th align="left">jQuery</th>
<th align="left">dom</th>
</tr>
</thead>
<tbody><tr>
<td align="left">$(‘p’).click()</td>
<td align="left">document.getElementsByTagName()</td>
</tr>
<tr>
<td align="left">$(‘#idname’).click()</td>
<td align="left">document.getElementById()</td>
</tr>
<tr>
<td align="left">$(‘.classname1’).click()</td>
<td align="left">document.getElementsByClassName()</td>
</tr>
</tbody></table>
<p>详细选择器请见 <a href="https://jquery.cuishifeng.cn/">jQuery官方文档</a></p>
<h3 id="鼠标事件"><a href="#鼠标事件" class="headerlink" title="鼠标事件"></a>鼠标事件</h3><p>事件包括鼠标事件、键盘事件</p>
<ul>
<li>click: 鼠标单击时触发；</li>
<li>dblclick：鼠标双击时触发；</li>
<li>mouseenter：鼠标进入时触发；</li>
<li>mouseleave：鼠标移出时触发；</li>
<li>mousemove：鼠标在DOM内部移动时触发；</li>
<li>hover：鼠标进入和退出时触发两个函数，相当于mouseenter加上mouseleave。</li>
</ul>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="meta-keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">&quot;en&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">&quot;UTF-8&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>事件<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">&quot;https://cdn.bootcdn.net/ajax/libs/jquery/3.6.0/jquery.js&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">style</span>&gt;</span></span><br><span class="line"><span class="css">        <span class="selector-id">#divMove</span>&#123;</span></span><br><span class="line">            width: 400px;</span><br><span class="line">            height: 500px;</span><br><span class="line">            border: 1px solid red;</span><br><span class="line">        &#125;</span><br><span class="line">    <span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line"></span><br><span class="line">mouse: <span class="tag">&lt;<span class="name">span</span> <span class="attr">id</span>=<span class="string">&quot;mouseMove&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">span</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">&quot;divMove&quot;</span>&gt;</span></span><br><span class="line">    在这里移动鼠标</span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="javascript">    <span class="comment">//当网页元素加载完毕后，响应事件</span></span></span><br><span class="line"><span class="javascript">    $(<span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span></span><br><span class="line"><span class="javascript">        $(<span class="string">&#x27;#divMove&#x27;</span>).mousemove(<span class="function"><span class="keyword">function</span> (<span class="params">e</span>) </span>&#123;</span></span><br><span class="line"><span class="javascript">            $(<span class="string">&#x27;#mouseMove&#x27;</span>).text(<span class="string">&#x27;x: &#x27;</span> + e.pageX + <span class="string">&#x27; y: &#x27;</span> + e.pageY);</span></span><br><span class="line">        &#125;)</span><br><span class="line">    &#125;);</span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p><code>$(function () &#123;...&#125;)</code>的形式，牢记这是<code>document</code>对象的<code>ready</code>事件处理函数。</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line">  $(<span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;...&#125;) </span><br><span class="line">= $(<span class="built_in">document</span>).ready(<span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">    &#125;);</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure>

<h2 id="操作dom"><a href="#操作dom" class="headerlink" title="操作dom"></a>操作dom</h2><h3 id="修改html和text"><a href="#修改html和text" class="headerlink" title="修改html和text"></a>修改html和text</h3><figure class="highlight js"><table><tr><td class="code"><pre><span class="line">$(<span class="string">&#x27;#test-ul li[class=cpp]&#x27;</span>).text();</span><br><span class="line">$(<span class="string">&#x27;#test-ul li[class=cpp]&#x27;</span>).html();</span><br><span class="line">$(<span class="string">&#x27;#test-ul li[class=cpp]&#x27;</span>).text(<span class="string">&#x27;&#x27;</span>);</span><br><span class="line">$(<span class="string">&#x27;#test-ul li[class=cpp]&#x27;</span>).html(<span class="string">&#x27;&#x27;</span>);</span><br></pre></td></tr></table></figure>

<h3 id="修改css"><a href="#修改css" class="headerlink" title="修改css"></a>修改css</h3><figure class="highlight js"><table><tr><td class="code"><pre><span class="line">$(<span class="string">&#x27;#test-ul li[class=cpp]&#x27;</span>).css(<span class="string">&quot;color&quot;</span>, <span class="string">&quot;red&quot;</span>)</span><br></pre></td></tr></table></figure>

<p><img src="https://img-blog.csdnimg.cn/55ec84eeb903402d87d79ae4df373d12.png?x-oss-process=image/watermark,type_ZHJvaWRzYW5zZmFsbGJhY2s,shadow_50,text_Q1NETiBAQ29kZVNsb2dhbg==,size_20,color_FFFFFF,t_70,g_se,x_16#pic_center" alt="在这里插入图片描述"></p>
<h3 id="dom的显示与隐藏"><a href="#dom的显示与隐藏" class="headerlink" title="dom的显示与隐藏"></a>dom的显示与隐藏</h3><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> a = $(<span class="string">&#x27;a[target=_blank]&#x27;</span>);</span><br><span class="line">a.hide(); <span class="comment">// 隐藏</span></span><br><span class="line">a.show(); <span class="comment">// 显示</span></span><br></pre></td></tr></table></figure>

<p><em>注意</em>，隐藏DOM节点并未改变DOM树的结构，它只影响DOM节点的显示。这和删除DOM节点是不同的。</p>
<h3 id="获取dom信息"><a href="#获取dom信息" class="headerlink" title="获取dom信息"></a>获取dom信息</h3><figure class="highlight js"><table><tr><td class="code"><pre><span class="line">$(<span class="built_in">window</span>).width(); <span class="comment">// 800</span></span><br><span class="line">$(<span class="built_in">window</span>).height(); <span class="comment">// 600</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> div = $(<span class="string">&#x27;#test-div&#x27;</span>);</span><br><span class="line">div.attr(<span class="string">&#x27;name&#x27;</span>); <span class="comment">// &#x27;Test&#x27;</span></span><br><span class="line">div.attr(<span class="string">&#x27;name&#x27;</span>, <span class="string">&#x27;Hello&#x27;</span>); <span class="comment">// div的name属性变为&#x27;Hello&#x27;</span></span><br><span class="line">div.removeAttr(<span class="string">&#x27;name&#x27;</span>); </span><br></pre></td></tr></table></figure>

<ul>
<li>width()</li>
<li>height()</li>
<li>attr()</li>
<li>removeAttr</li>
</ul>
<h2 id="操作表单-1"><a href="#操作表单-1" class="headerlink" title="操作表单"></a>操作表单</h2><p>jQuery提供了<code>val()</code>方法来获取和修改对应的value值 </p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line">input.val(); <span class="comment">// &#x27;test&#x27;</span></span><br><span class="line">input.val(<span class="string">&#x27;abc@163.com&#x27;</span>); <span class="comment">// 文本框的内容已变为abc@example.com</span></span><br></pre></td></tr></table></figure>



<h1 id="参考资料"><a href="#参考资料" class="headerlink" title="参考资料"></a>参考资料</h1><ol>
<li><p><a href="https://www.liaoxuefeng.com/wiki/1022910821149312">廖雪峰JavaScript教程</a></p>
</li>
<li><p><a href="https://www.bilibili.com/video/BV1JJ41177di?p=1">【狂神说Java】JavaScript最新教程通俗易懂</a></p>
</li>
</ol>
]]></content>
      <categories>
        <category>web</category>
      </categories>
      <tags>
        <tag>web</tag>
      </tags>
  </entry>
  <entry>
    <title>2022-Java3D复习</title>
    <url>/2022/01/06/Java3D%E5%B8%B8%E7%94%A8%E7%B1%BB/</url>
    <content><![CDATA[<h1 id="常用类"><a href="#常用类" class="headerlink" title="常用类"></a>常用类</h1><h2 id="VirtualUniverse类、Locale类与HiResCoord类之间的关系"><a href="#VirtualUniverse类、Locale类与HiResCoord类之间的关系" class="headerlink" title="VirtualUniverse类、Locale类与HiResCoord类之间的关系"></a>VirtualUniverse类、Locale类与HiResCoord类之间的关系</h2><p>Virtual Universe 包含 Locale 包含 BranchGroup</p>
<p>每一个Locale对象都具有一个高分辨率大尺度坐标系，每一个Locale对象的高分辨率大尺度坐标系都用3个高分辨率大尺度数来定义其原点的坐标值x,y,z（用HiResCoord类定义）。</p>
<p>VirtualUniverse类定义的对象是包含所有场景图的最高级别的容器。</p>
<h2 id="SimpleUniverse类"><a href="#SimpleUniverse类" class="headerlink" title="SimpleUniverse类"></a>SimpleUniverse类</h2><p>该类可快速地设置一个最小的用户环境，并且很容易使一个Java3D应用程序运行起来。该实用程序类创建了场景图中与观察相关的所有必须对象。该类创建了一个Locale, 一个单独的ViewingPlatform和一个Viewer观察者对象。但此类不适合复杂应用程序。</p>
<p>SimpleUniverse 包含 Locale 包含 BranchGroup 包含 TransformGroup 包含ViewPlatform</p>
<h2 id="Bounds类"><a href="#Bounds类" class="headerlink" title="Bounds类"></a>Bounds类</h2><p>用于限定特定操作的作用范围</p>
<p>用于确定某种动作或行为的范围。</p>
<p>用于确定某种全景操作的应用范围</p>
<h2 id="SharedGroup类"><a href="#SharedGroup类" class="headerlink" title="SharedGroup类"></a>SharedGroup类</h2><p>共享子图。SharedGroup节点作为共享子图的根节点。Link叶子节点链接向该SharedGroup节点，并不是将共享子图集成到当前场景图中。一个SharedGroup节点允许多个Link叶子节点同时通过链接的方式共享该子图。</p>
<h2 id="View类"><a href="#View类" class="headerlink" title="View类"></a>View类</h2><p>观察模型。应用Java3D观察模型编写的应用程序在不修改场景图的情况下，能够将可视化后的图像显示到各种不同的显示设备上</p>
<p>“一次编写到处运行”</p>
<h2 id="ViewPlatform类"><a href="#ViewPlatform类" class="headerlink" title="ViewPlatform类"></a>ViewPlatform类</h2><p>在虚拟世界中的观察平台。一个ViewPlatform叶子节点在虚拟世界中定义了一个坐标系和一个具有相关原点或参考点的参考框架。ViewPlatform作为观察对象的依附点，并且其作为一个可视化器观察的基点。</p>
<h2 id="ViewingPlatform类"><a href="#ViewingPlatform类" class="headerlink" title="ViewingPlatform类"></a>ViewingPlatform类</h2><p>Java3D的三种坐标系：世界坐标系，观察坐标系，显示器坐标系</p>
<p><strong>透视投影</strong>：当给定视点、观察方向与投影平面后，将世界坐标系转换为观察坐标系，对观察坐标系中的三维物体通过比例变换向投影平面投影。</p>
<p><strong>平行投影</strong>：将空间的三维形体分别向3个坐标平面进行平行投影，分别形成主视图、俯视图与侧视图。</p>
<h2 id="Shape3D类"><a href="#Shape3D类" class="headerlink" title="Shape3D类"></a>Shape3D类</h2><p>Shaped3D类定义所有的几何体。它包含几何体与该几何体的外观属性。</p>
<p>几何体部分定义三维空间体的几何形状，外观属性部分定义颜色、材质等属性。</p>
<p>一个Shaped3D类包含一个Geometry几何组件列表和唯一一个Appearance外观组件对象。P55</p>
<h2 id="Appearance类"><a href="#Appearance类" class="headerlink" title="Appearance类"></a>Appearance类</h2><p>定义所有与显示相关的外观状态，这些状态可设置为一个Shaped3D节点的组件对象。</p>
<p>Appearance类包含ColoringAttributes类，PointAttributes类，LineAttributes类，PolygonAttributes类，Rendering Attributes类，Transparency Attributes，Material类， Texture类 </p>
<h2 id="BranchGroup类"><a href="#BranchGroup类" class="headerlink" title="BranchGroup类"></a>BranchGroup类</h2><p>一个BranchGroup作为一个场景图分支的根。</p>
<p>BranchGroup对象是<strong>唯一能插入</strong>到一个Locale对象中的对象。</p>
<p>以BranchGroup节点为根的场景图子图是一个编辑单元。</p>
<h2 id="TransformGroup类"><a href="#TransformGroup类" class="headerlink" title="TransformGroup类"></a>TransformGroup类</h2><p>TransformGroup节点通过Transform3D对象定义了一个唯一的3D空间坐标变换，该变换可对其子节点进行位置、方向及比例变换。</p>
<h2 id="GeometryArray类"><a href="#GeometryArray类" class="headerlink" title="GeometryArray类"></a>GeometryArray类</h2><p>GeometryArray类是PointArray类，LineArray类，TriangleArray类，QuadArray类， GeometryStripArray类，IndexedGeometryArray类的直接父类</p>
<p>GeometryArray类的对象中包含独立的位置坐标数组、颜色数组、法向量数组、纹理坐标数组和顶点属性。</p>
<p>在数组中的所有颜色值必须在[0.0,1.0]范围内。所有法向量必须是模长为1的单位向量。</p>
<h2 id="PointArray类"><a href="#PointArray类" class="headerlink" title="PointArray类"></a>PointArray类</h2><p>PointArray类是组织与定义点的数组类。</p>
<h2 id="PointAttributes类"><a href="#PointAttributes类" class="headerlink" title="PointAttributes类"></a>PointAttributes类</h2><p>PointAttributes类的对象用来定义点的各种属性。</p>
<p>点属性包括：</p>
<p>Size：定义点的大小，以像素为单位</p>
<p>Antialiasing：反走样，使外形接近于一个圆形</p>
<h2 id="IndexedPointArray类"><a href="#IndexedPointArray类" class="headerlink" title="IndexedPointArray类"></a>IndexedPointArray类</h2><p>从定义好的所有点的坐标与颜色数组中选择出一部分点进行显示。</p>
<h2 id="IndexedLineArray类"><a href="#IndexedLineArray类" class="headerlink" title="IndexedLineArray类"></a>IndexedLineArray类</h2><p>从定义好的所有线的坐标与颜色数组中选择出一部分线进行显示。</p>
<h2 id="IndexedTriangleArray类"><a href="#IndexedTriangleArray类" class="headerlink" title="IndexedTriangleArray类"></a>IndexedTriangleArray类</h2><p>从给定的顶点中选择出一定数量的顶点，允许顶点重复，形成若干三角形。</p>
<h2 id="IndexedQuadArray类"><a href="#IndexedQuadArray类" class="headerlink" title="IndexedQuadArray类"></a>IndexedQuadArray类</h2><p>从给定的顶点中选择出一定数量的顶点，允许顶点重复，形成若干四边面。</p>
<h2 id="LineArray类"><a href="#LineArray类" class="headerlink" title="LineArray类"></a>LineArray类</h2><p>LineArray类生成的线段是不连续的，线段的连接方式：0-1，2-3，4-5等，其中，1、2之间与3、4之间不连接。</p>
<h2 id="LineAttributes类"><a href="#LineAttributes类" class="headerlink" title="LineAttributes类"></a>LineAttributes类</h2><p>LineAttributes类定义所有与线的显示相关的属性与状态。</p>
<h2 id="LineStripArray类"><a href="#LineStripArray类" class="headerlink" title="LineStripArray类"></a>LineStripArray类</h2><p>将定义好的数据点分组，然后分别连成几段连续的线段，分成几个组，就连成几条带（几个Strip）。各条带之间互不连接。</p>
<h2 id="PolygonAttributes类"><a href="#PolygonAttributes类" class="headerlink" title="PolygonAttributes类"></a>PolygonAttributes类</h2><p>PolygonAttributes类用来定义多边形显示时的相关属性。这些基本多边形包括三角形、三角形带、三角形扇、四边形。</p>
<p>多边形的三种<strong>显示模式</strong>：以点的方式显示、轮廓线方式显示、填充多边形方式显示</p>
<p>POLYGON_POINT：多边形以顶点方式显示，则只显示所有顶点。</p>
<p>POLYGON_LINE：多边形以线方式显示</p>
<p>POLYGON_FILL：以填充的多边形面的方式显示，这种模式是默认显示模式。</p>
<h2 id="TriangleArray类"><a href="#TriangleArray类" class="headerlink" title="TriangleArray类"></a>TriangleArray类</h2><p>三角面TriangleArray类以一维顶点数组给出顶点的坐标值，从前向后依次以3个顶点形成一个三角形，并且上一个三角形与下一个三角形之间没有公用顶点。</p>
<h2 id="TriangleStripArray类"><a href="#TriangleStripArray类" class="headerlink" title="TriangleStripArray类"></a>TriangleStripArray类</h2><p>三角带。stripVertexCounts数组的大小表示分为几个子三角形Strip带。两个Strip之间没有公用顶点。在同一个三角形Strip内，所有三角形都相互连接在一起的，相邻的三角形之间有公共边。用这种方式生成的曲面具有指向相同侧的法向量。</p>
<h2 id="TriangleFanArray类"><a href="#TriangleFanArray类" class="headerlink" title="TriangleFanArray类"></a>TriangleFanArray类</h2><p>三角扇。在组织三角形时，以第一个顶点为公用顶点，依次与其余顶点分别连接形成三角形。用这种方法生成的一系列三角形公用第一个顶点。其中给定的顶点 数最少为3个。所有三角形具有指向同侧的法向量。</p>
<h2 id="QuadArray类"><a href="#QuadArray类" class="headerlink" title="QuadArray类"></a>QuadArray类</h2><p>四边面。QuadArray类以顶点坐标数组中给出的一维顶点数组，从前向后依次以4个顶点形成一个四边形面，并且相邻两个四边形面之间没有公用顶点。给定的总的顶点数必须是4的倍数。</p>
<h2 id="ColoringAttributes类"><a href="#ColoringAttributes类" class="headerlink" title="ColoringAttributes类"></a>ColoringAttributes类</h2><p>ColoringAttributes类定义所选择的颜色与光照模型（阴影模型）。</p>
<h2 id="Material类"><a href="#Material类" class="headerlink" title="Material类"></a>Material类</h2><p>Material类的对象定义一个三维物体在光照情况下的外观。</p>
<p>如果在一个Appearance类的对象中的Material类的对象一项为null，则光照效果对所有包含该Appearance类的对象的节点不起作用。</p>
<p>包含于Appearance类</p>
<p>环境光颜色Ambient color</p>
<p>散射光颜色Diffuse color</p>
<p>镜面反射光颜色Specular color</p>
<p>物体放射的光颜色Emissive color</p>
<p>物体的发亮特性Shininess</p>
<p>颜色靶子Color target</p>
<h2 id="TransparencyAttributes类"><a href="#TransparencyAttributes类" class="headerlink" title="TransparencyAttributes类"></a>TransparencyAttributes类</h2><p>TransparencyAttributes类的对象定义所有几何体透明度的属性。</p>
<h2 id="Light类"><a href="#Light类" class="headerlink" title="Light类"></a>Light类</h2><p>该类为抽象类，其中定义的一组参数属性所有类型的光。这些参数包括光颜色、光照开关标志和一个光的作用范围</p>
<p>光源的类型包括平行光源、点光源、环境光</p>
<h2 id="PointLight类"><a href="#PointLight类" class="headerlink" title="PointLight类"></a>PointLight类</h2><p>点光源PointLight类在三维空间的一个<strong>固定点</strong>上定义一种<strong>衰减</strong>的光源，该类光源从光发出点出发，在所有方向的辐射是相等的。</p>
<p>一个点光源通过其衰减系数反映其衰减，该衰减随着距光源中心距离的增加而增加。</p>
<p>点光源的衰减系数：固定衰减、线性衰减、二次方衰减</p>
<h2 id="DirectionalLight类"><a href="#DirectionalLight类" class="headerlink" title="DirectionalLight类"></a>DirectionalLight类</h2><p>平行光源。DirectionalLight类定义了一种光源在<strong>无限远处有方向</strong>的光</p>
<h2 id="AmbientLight类"><a href="#AmbientLight类" class="headerlink" title="AmbientLight类"></a>AmbientLight类</h2><p>环境光源。环境光源是指来自于<strong>所有方向</strong>的一种光源。</p>
<h2 id="Vector3f类"><a href="#Vector3f类" class="headerlink" title="Vector3f类"></a>Vector3f类</h2><p>Vector3f类是一个包含有3个单精度浮点元素x,y,z的向量。如果该向量表示一个法向量，则该向量应该单位化为一个单位向量。</p>
<h2 id="Transform3D类"><a href="#Transform3D类" class="headerlink" title="Transform3D类"></a>Transform3D类</h2><p>Transform3D类的对象是一种内部表达为4x4的双精度类型的矩阵，该矩阵是以行的方式存放的。一个Transform3D类的对象用来执行平移、旋转、变比例等坐标变换。</p>
<h2 id="TransformGroup类及其与Transform3D类之间的关系"><a href="#TransformGroup类及其与Transform3D类之间的关系" class="headerlink" title="TransformGroup类及其与Transform3D类之间的关系"></a>TransformGroup类及其与Transform3D类之间的关系</h2><p>多个Transform3D对象的组合形成一个总的坐标变换矩阵。</p>
<p>所有表示各种几何变换的Transform3D类的对象必须包含在一个TransformGroup类的对象中，表示对在该TransformGroup类的对象中的三维图形所进行的坐标变换。</p>
<ol>
<li><p>如果表示一种几何变换的Transform3D对象没有加入到该TransformGroup类的对象中，则该变换对在该TransformGroup类的对象中的三维图形不起作用。</p>
</li>
<li><p>可以一次定义一个总的坐标变换矩阵，并以此创建一个Transform3D对象，将该Transform3D对象加入到TransformGroup类的对象中。</p>
</li>
<li><p> 也可以分步定义多个不同类型的坐标变换矩阵，然后依次创建多个Transform3D对象，每个Transform3D对象表示一种坐标变换，将这些Transform3D对象依次加入到一个TransformGroup类的对象中，则以Transform3D对象的加入次序，依次对三维图形进行变换，Java 3D系统形成最后总的坐标变换。</p>
</li>
<li><p>如果在一个TransformGroup节点中没有定义任何的坐标变换，也就是没有加入任何的Transform3D对象，则该TransformGroup节点拥有一个缺省的4*4坐标变换矩阵，但该矩阵为单位矩阵，表示对几何体不进行任何几何变换。</p>
</li>
</ol>
<hr>
<h1 id="基础概念"><a href="#基础概念" class="headerlink" title="基础概念"></a>基础概念</h1><p><strong>线架模型</strong>(Wire Frame)：以<code>线段</code>、<code>圆弧</code>和<code>一些简单的曲线</code>来表示一个三维模型。</p>
<p><strong>Brep边界面模型</strong>(Boundary Representation)：将一个封闭的几何体模型所使用的多边形面称为该几何体的Brep边界面。所有的多面体模型都是一种Brep边界面模型。</p>
<p><strong>非均匀有理B样条曲面</strong>Non Uniform Rational B-Spline(NURBS)</p>
<p>曲面几何模型的特点是光滑的曲面表示，现在多数曲面几何模型以非均匀有理B样条曲面为基础</p>
<p>在Brep边界面表示中最常用的数据结构：<code>翼边数据结构</code>、<code>半边数据结构</code></p>
<p><strong>Solid实体</strong> </p>
<p>Solid实体几何模型主要通过组成该几何体的边界面所形成的半空间来表示一个物体。物体内部的所有属性都是相同的。</p>
<p><strong>CSG构造实体几何</strong>(Constructive Solid Geometry)</p>
<p>通过简单实体(如立方体﹑圆柱体、球体﹑圆锥体、扫描表示法产生的体等)之间的正则布尔运算生成比较复杂的体。其用一种二叉树结构来表示相关实体以及相关的并、交、差布尔运算操作。</p>
<p>CSG树只反映了物体的构造过程与方式，并不反映实体的面、边、顶点等几何信息及其之间关系。因此，这种表示又称为实体的隐式模型或过程模型</p>
<p><strong>VOXEL体素模型</strong>(Volume Element)</p>
<p><em>三维图形显示的最小单元</em></p>
<p>规则体素空间是将一个立方体分别沿x、y、z轴进行等间距均匀分割所形成的，每一个体素都是一个小立方体。小立方体的中心点称为立方体的格点。</p>
<p>体素与体素之间的连接关系有3种：6连通、18连通、26连通</p>
<p><strong>DEXEL深度元素模型</strong>(Depth Element)</p>
<p>DEXEL模型就是用一射线与一个几何体的Brep边界面模型求交，两交点之间属于几何体内部的这段线段称为DEXEL。对于DEXEL模型,通常用一组群到三组群的射线组与几何体的交点来表示一个几何体。</p>
<p><strong>优点</strong>：只需要存储射线组群的交点坐标，可以大大压缩存储空间，并且布尔运算是DEXEL线段间的线性运算，运算速度快、精度高。</p>
<p><strong>缺点</strong>：失去了每个体素的所拥有的属性信息。</p>
<p>因此DEXEL模型和VOXEL模型之间可相互转换。</p>
<h2 id="Java3D高分辨率大尺度坐标系"><a href="#Java3D高分辨率大尺度坐标系" class="headerlink" title="Java3D高分辨率大尺度坐标系"></a>Java3D高分辨率大尺度坐标系</h2><p>32个字节，即<code>256</code>个二进制位的定点数来表示一个数</p>
<h2 id="默认情况下Java3D的坐标系"><a href="#默认情况下Java3D的坐标系" class="headerlink" title="默认情况下Java3D的坐标系"></a>默认情况下Java3D的坐标系</h2><p>默认情况下，Java 3D坐标系采用右手坐标系统，坐标系原点在显示器的中心，x轴水平向右，y轴垂直向上，z轴指向观察者。默认情况下，坐标单位为米。</p>
<p>如图所示：</p>
<p><img src="/2022/01/06/Java3D%E5%B8%B8%E7%94%A8%E7%B1%BB/clip_image002.jpg" alt="https://img-blog.csdnimg.cn/20210105211825780.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQ2MDIwNjQ4,size_16,color_FFFFFF,t_70"></p>
<h2 id="P34页的图"><a href="#P34页的图" class="headerlink" title="P34页的图"></a>P34页的图</h2><p>包含谁，谁能加到谁里面？</p>
<p><img src="/2022/01/06/Java3D%E5%B8%B8%E7%94%A8%E7%B1%BB/clip_image004.png" alt="https://img-blog.csdnimg.cn/20210102185034190.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQ2MDIwNjQ4,size_16,color_FFFFFF,t_70"></p>
<h2 id="多边形可视化填充算法"><a href="#多边形可视化填充算法" class="headerlink" title="多边形可视化填充算法"></a>多边形可视化填充算法</h2><h3 id="种子填色算法"><a href="#种子填色算法" class="headerlink" title="种子填色算法"></a>种子填色算法</h3><p>种子填色算法首先在要填充的多边形区域内选择一个填色种子点( Seed Point)，然后以该种子点为基础，通过与多边形边界的像素点相比较进行填色。</p>
<p>种子填色算法主要有<code>四邻法</code>（如左图）和<code>八邻法</code>（如右图）：</p>
<p><img src="/2022/01/06/Java3D%E5%B8%B8%E7%94%A8%E7%B1%BB/clip_image006.jpg" alt="img"></p>
<p>四邻法所走的填充路线为：上、下、左、右。在填充时要判断当前填充象素点与</p>
<p>边界象素点之间的关系。如果要填充的象素点在多边形的边界之内，则进⾏填充；</p>
<p>如果要填充的象素点在多边形的边界之外，则不填充；如果要填充的象素点正好</p>
<p>在多边形的边界上，则保留边界象素点颜色。</p>
<p>八邻法所⾛的填充路线为：上、下、左、右、左上、左下、右上、右下。在填充</p>
<p>时要判断当前填充象素点与边界象素点之间的关系</p>
<h3 id="扫描线填色算法-Scan-Line-Filling"><a href="#扫描线填色算法-Scan-Line-Filling" class="headerlink" title="扫描线填色算法(Scan-Line Filling)"></a>扫描线填色算法(Scan-Line Filling)</h3><p>每一条扫描线从上向下以一个像素单位为间隔逐次向下扫描。对每一条扫描线与多边形求交。将交点按x值从小到大排序。用<strong>奇偶计数法</strong>判断多边形内部的点对。</p>
<p><img src="/2022/01/06/Java3D%E5%B8%B8%E7%94%A8%E7%B1%BB/clip_image007.png" alt="img"></p>
<p>出现点重合时采取的处理方法：</p>
<p>1首先按照多边形顶点顺时针方向标明：A、B、C、D、E、F、G</p>
<p>2扫描线6：扫描到3个顶点，G点处两点重合，按奇偶计数法会出现错误。于是将入线FG的G点的y轴坐标向下移动1个像素单位（我理解为逆时针方向）。</p>
<p>3扫描线7：扫描到3个顶点，D点处两点重合，按奇偶计数法会出现错误。于是将入线CD的D点的y轴坐标向上移动1个像素单位（我理解为逆时针方向）。</p>
<p>如果判断出多边形中有水平边，则将该水平边首先画出，不用求该边与扫描线的交点。</p>
<h2 id="三次Bezier曲线及其性质"><a href="#三次Bezier曲线及其性质" class="headerlink" title="三次Bezier曲线及其性质"></a>三次Bezier曲线及其性质</h2><ol>
<li>端点性质</li>
</ol>
<p>C(0)=P0,  C(1)=Pn</p>
<p>该性质说明一段Bezier曲线通过其首与末控制顶点</p>
<ol start="2">
<li><p>端点的切线矢量（详细见书）</p>
</li>
<li><p>Bezier曲线的端点曲率 （详细见书）</p>
</li>
<li><p>对称性</p>
</li>
</ol>
<p>对于一段Bezier曲线及其控制顶点，若保持原全部控制顶点的位置不变，只把控制顶点次序编号颠倒过来，则新生成的这段Bezier曲线形状不变，但参数的增长方向相反。</p>
<ol start="5">
<li>凸包性</li>
</ol>
<p>一段Bezier曲线严格地位于其控制多边形形成的凸包之内。</p>
<ol start="6">
<li>变差缩减性</li>
</ol>
<p>对于一段平面Bezier曲线C(u)，平面内任意一条直线与其交点的个数不多于该直线与其控制多边形的交点个数。</p>
<h2 id="Bezier曲线、曲面拼接的连续性"><a href="#Bezier曲线、曲面拼接的连续性" class="headerlink" title="Bezier曲线、曲面拼接的连续性"></a>Bezier曲线、曲面拼接的连续性</h2><p>（1）C0连续：0阶参数连续，第一段曲线的终点与第二段曲线的起点位置重合。</p>
<p>（2）C1连续：一阶参数连续，两相拼接的曲线在拼接点处重合，拼接处有相同的一阶导数。</p>
<p>（3）C2连续：二阶参数连续，两相拼接的曲线在拼接点处重合，拼接处有相同的一阶导数和二阶导数。</p>
<p>（4）G0连续：0阶几何连续，第一段曲线的终点与第二段曲线的起点位置重合，称为G0连续，同时也是C0连续。</p>
<p>（5）G1连续：1阶几何连续，两相拼接的曲线在拼接点处重合，切线方向相同，但大小不等。</p>
<p>（6）G2连续：2阶几何连续，两相拼接的曲线段在拼接点处重合，在拼接点处C0连续、C1连续，在拼接点处二阶导数方向相同，但大小不等。</p>
<p>曲线、曲面的G0（或C0）拼接可保证曲线、曲面在拼接点处是<strong>连接</strong>在一起的。</p>
<p>曲线、曲面的G1（或C1）拼接可保证曲线、曲面在拼接点处是<strong>光顺</strong>的。</p>
<h2 id="Bezier曲面的性质-F"><a href="#Bezier曲面的性质-F" class="headerlink" title="Bezier曲面的性质-F"></a>Bezier曲面的性质-F</h2><p>（1）端点性质</p>
<p>Bezier曲面的4个角点与控制多边形网格的4个角控制顶点重合。</p>
<p>（2）边界线</p>
<p>Bezier曲面S(u,v)的4条边界线S(0,v)、S(1,v)、S(u,0)、S(u,1)分别由对应的控制网格的4条边界控制多边形形成。</p>
<p>（3）曲面端点的切平面</p>
<p>由通过该端点的两个控制多边形的边所形成的平面和Bezier曲面在该端点的切平面重合。例如，对于曲面角点S(0,0)，切平面为控制顶点P0，0、P0，1、P1，0所形成的平面。</p>
<p>（4）凸包性</p>
<p>Bezier曲面位于其控制网格所形成的凸包之内。</p>
<p>（5）变差递减性</p>
<p>空间任意条直线与Bezier曲面交点的个数不多于该直线与其控制多边形网格的交点个数。</p>
<h2 id="隐藏线、隐藏面消除算法"><a href="#隐藏线、隐藏面消除算法" class="headerlink" title="隐藏线、隐藏面消除算法"></a>隐藏线、隐藏面消除算法</h2><p>通常面向视点的所有边都是可见的，将这些边画出来。被前面的可见面隐藏的所有边都是不可见的，不用将这些画出来，或者画成虚线形式。以这种方式显示 的形体和用眼睛看到的三维物品相同。将这种消除所有隐藏边的算法称为隐藏线消除算法。</p>
<p>当给定视点与观察方向后，对视点来讲，并不是所有的面都可见，可见面是由视点与观察方向及面的法向量决定。只需显示可见的面，无须显示隐藏的面，这种算法叫做隐藏面消除算法。</p>
<p>隐藏面的消除与隐藏线消除有时是相互关联的。由隐藏线所围成的面是隐藏面，两个隐藏面所共有的线为隐藏线。</p>
<h2 id="Z-Buffer隐藏面消除算法"><a href="#Z-Buffer隐藏面消除算法" class="headerlink" title="Z Buffer隐藏面消除算法"></a>Z Buffer隐藏面消除算法</h2><p>在显示器的像素点阵建立两种缓冲存储单元阵列：Z Buffer 和C Buffer阵列。</p>
<p>从视点出发通过每个像素点发出一条射线，Z Buffer阵列存储距离视点最近的多边形与射线交点z坐标，C Buffer阵列存储对应的交点所在面颜色。</p>
<h2 id="区域排序消隐算法"><a href="#区域排序消隐算法" class="headerlink" title="区域排序消隐算法"></a>区域排序消隐算法</h2><p>区域排序消隐算法就是在图像空间中，将组成几何体的所有多边形按照z坐标深度值从小到大排序，然后用前面的可见多边形去切割后面的多边形，将后面的多边形切割为可见与不可见两部分，最后将所有可见多边形显示出来，就为几何体消隐后的图像。</p>
<h2 id="最小包围矩形、最小包围圆"><a href="#最小包围矩形、最小包围圆" class="headerlink" title="最小包围矩形、最小包围圆"></a>最小包围矩形、最小包围圆</h2><p>用对边分别平行于两个坐标轴的边形成一个最小包围矩形</p>
<p>求法如下：求所有几何数据点的最小x、y值与最大x、y值，则由这两点定义的平行于两坐标轴的矩形就是最小包围矩形</p>
<h2 id="最小包围盒、最小包围球"><a href="#最小包围盒、最小包围球" class="headerlink" title="最小包围盒、最小包围球"></a>最小包围盒、最小包围球</h2><p>最小包围盒指用三对分别平行于坐标平面的最小六面体（长方体）包围一个三维几何体。最小包围盒是指该六面体正好包围该三维几何体，在所有包围该三维几何体的六面体中，它是最小的。</p>
<h2 id="同一平面内点与多边形的包含判定算法-F"><a href="#同一平面内点与多边形的包含判定算法-F" class="headerlink" title="同一平面内点与多边形的包含判定算法-F"></a>同一平面内点与多边形的包含判定算法-F</h2><h3 id="凸多边形的叉积判断法"><a href="#凸多边形的叉积判断法" class="headerlink" title="凸多边形的叉积判断法"></a>凸多边形的叉积判断法</h3><p>首先假定按逆时针方向计算的叉积为正，则按顺时针⽅向计算的叉积为负。从给定的一个点向多边形的各个顶点做向量。然后，按顶点顺序逐个计算每相邻两向量之间的叉积。如果所有的叉积符号相同，说明点在多边形内；反之，则在多边形外。（右手螺旋定则：逆正顺反）</p>
<p>补充：</p>
<p>叉积的一个重要性质是可以通过它的符号判断两矢量相互之间的顺逆时针关系：</p>
<p>若 P × Q &gt; 0 , 则P在Q的顺时针方向</p>
<p>若 P × Q &lt; 0 , 则P在Q的逆时针方向</p>
<p>若 P × Q = 0 , 则P与Q共线，但可能同向也可能反向）</p>
<h3 id="夹角之和检验法"><a href="#夹角之和检验法" class="headerlink" title="夹角之和检验法"></a>夹角之和检验法</h3><p>首先将要判断的点与多边形的各个顶点依次连接形成一系列向量，然后按照顶点 顺序求相邻两向量之间的夹角。假定按逆时针方向计算的角度为正，按顺时针方向计算的角度为负。如果所有的夹角符号相同（或和为360度），说明点在多边形内；反之，则在多边形外。</p>
<h3 id="交点计数检验法"><a href="#交点计数检验法" class="headerlink" title="交点计数检验法"></a>交点计数检验法</h3><p>从要判断的点向右做一条射线，求出射线与多边形交点的个数。如果交点的个数是奇数，则点在多边形内；反之，则在多边形外。（奇内偶外，同2异1）</p>
<h2 id="局部光照明计算模型"><a href="#局部光照明计算模型" class="headerlink" title="局部光照明计算模型"></a>局部光照明计算模型</h2><h3 id="环境光部分计算"><a href="#环境光部分计算" class="headerlink" title="环境光部分计算"></a>环境光部分计算</h3><p><img src="/2022/01/06/Java3D%E5%B8%B8%E7%94%A8%E7%B1%BB/clip_image009.png" alt="img"></p>
<p>Ed表示P点所反射的环境光的强度</p>
<p>R为P点的漫反射系数（介于0和1之间）</p>
<p>Id为照射在P点的入射环境光的强度</p>
<h3 id="直射光强度计算"><a href="#直射光强度计算" class="headerlink" title="直射光强度计算"></a>直射光强度计算</h3><p><img src="/2022/01/06/Java3D%E5%B8%B8%E7%94%A8%E7%B1%BB/clip_image011.png" alt="img"></p>
<p>Es表示直射光反射的总光强</p>
<p>Is为直射光的入射光强</p>
<p>R为P点的漫反射系数（介于0和1之间）</p>
<p>W为P点的镜面反射系数，介于0和1之间</p>
<p>i为直射光在P点与法向量的夹角</p>
<p>n为控制高光聚散的系数，它与P点的材料有关</p>
<h3 id="透射光强度计算"><a href="#透射光强度计算" class="headerlink" title="透射光强度计算"></a>透射光强度计算</h3><p><img src="/2022/01/06/Java3D%E5%B8%B8%E7%94%A8%E7%B1%BB/clip_image013.png" alt="img"></p>
<p>Et为从几何体内部经几何体表面P点处透射出的光强度</p>
<p>T为P点的透射系数（取值介于0到1之间）</p>
<p>Ib为从物体内部到达几何体表面P点处的入射光强度</p>
<h3 id="P点处总的光强度计算"><a href="#P点处总的光强度计算" class="headerlink" title="P点处总的光强度计算"></a>P点处总的光强度计算</h3><p><img src="/2022/01/06/Java3D%E5%B8%B8%E7%94%A8%E7%B1%BB/clip_image015.png" alt="img"></p>
<h2 id="Gouraud算法和Phong算法及区别-F"><a href="#Gouraud算法和Phong算法及区别-F" class="headerlink" title="Gouraud算法和Phong算法及区别-F"></a>Gouraud算法和Phong算法及区别-F</h2><h3 id="Gouraud算法"><a href="#Gouraud算法" class="headerlink" title="Gouraud算法"></a>Gouraud算法</h3><p>首先计算各个平⾯多边形的法向量，由该法向量确定各个多边形顶点处的单位法向量，再由每个顶点的单位法向量通过<strong>向量合成方式</strong>计算各公共顶点的单位法向量；然后应用<strong>局部光照明模型</strong>计算各多边形顶点处的光颜色、光强度值，通过对各多边形顶点的光颜⾊、光强度值的<strong>线性插值</strong>求出多边形边及内部所有点的光颜色、光强度值。</p>
<p>Gouraud 算法的优点是计算量小。</p>
<p>Gouraud 算法的缺点：高光区域有时会出现异常；当对曲面用不同的多边形进行分割时会产生不同的显示效果；Gouraud明暗处理会造成表面上出现过亮或过暗的条纹，称为马赫带（Mach_band）效应。</p>
<h3 id="Phong-算法"><a href="#Phong-算法" class="headerlink" title="Phong 算法"></a>Phong 算法</h3><p>首先计算各个平面多边形的法向量，由该法向量确定各个多边形顶点处的单位法向量，再由每个顶点的单位法向量通过向量合成方式计算各公共顶点的单位法向量；通过对平面多边形各顶点的法向量进行<strong>双线性插值</strong>，计算出平面多边形内部各点的法向量；再由所有这些点的法向量，通过<strong>局部光照模型</strong>计算平面多边形内部所有点的光颜色与光强度值。</p>
<p>Phone 算法的优点：Phong 算法显示的图形比Gouraud 算法更真实，能够产生正确的高光区域；</p>
<p>缺点：由于是先计算出平面上各点的法向量，然后再计算各点的光强度，所以 Phong 算法计算量远大于 Gouraud 算法；针对某些多边形分割的曲面，Phong 算法不如 Gouraud 算法好</p>
<h2 id="Whitted整体光照明模型"><a href="#Whitted整体光照明模型" class="headerlink" title="Whitted整体光照明模型"></a>Whitted整体光照明模型</h2><p>计算公式及各参数的含义</p>
<p><img src="/2022/01/06/Java3D%E5%B8%B8%E7%94%A8%E7%B1%BB/clip_image017.png" alt="img"></p>
<p>Ic：通过局部光照明模型计算出的光强度，也可采⽤ Phong 模型计算。</p>
<p>Is：为来⾃于其它⼏何体的镜⾯反射⽅向的⼊射光强度。</p>
<p>kS：为镜⾯反射系数，为 0～1 之间⼀个常数。</p>
<p>It：为来⾃于其它⼏何体的折射⽅向光强。</p>
<p>kt：为透射系数，是 0～1 之间的常数。</p>
<p>Whitted 光照模型是⼀个递归的计算模型。</p>
<h2 id="光线追踪算法"><a href="#光线追踪算法" class="headerlink" title="光线追踪算法"></a>光线追踪算法</h2><p>光线追踪算法是一种在由多光源与多个几何体组成的场景中，对几何体进行消隐与整体光强度计算的算法。光线追踪算法沿着到达视点的光线的反方向进行跟踪，经过屏幕上每一个像素点，找出所跟踪的光线与几何体的交点，在该交点处分别沿反射方向与折射方向再进行跟踪，找出影响该点光强度的所有光源，通过迭代、累加计算跟踪点的光颜色与光强度。</p>
<hr>
<p>私聊博主获取打印版，<code>^_^</code></p>
<h1 id="参考资源"><a href="#参考资源" class="headerlink" title="参考资源"></a>参考资源</h1><p>《Java3D与计算机三维动态图形网络编程设计》高新瑞著，清华大学出版社</p>
]]></content>
      <categories>
        <category>Java</category>
      </categories>
      <tags>
        <tag>计算机图形学</tag>
      </tags>
  </entry>
  <entry>
    <title>Java3D设计作品入门级教程</title>
    <url>/2021/11/25/Java3D%E8%AE%BE%E8%AE%A1%E4%BD%9C%E5%93%81%E5%85%A5%E9%97%A8%E7%BA%A7%E6%95%99%E7%A8%8B/</url>
    <content><![CDATA[<h1 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h1><p>鉴于许多同学对计算机图形学设计作品无法下手，特此推出Java3D设计作品入门级教程，可以给予毫无头绪的你一点思路。本文仅起到抛砖引玉的作用，并不提供现成的作品。</p>
<h1 id="坐标对应关系"><a href="#坐标对应关系" class="headerlink" title="坐标对应关系"></a>坐标对应关系</h1><p>首先我们要理解java3d中的坐标轴，这个坐标轴与我们平常摆的位置的不太一样，所以要做下区分</p>
<p><img src="https://img-blog.csdnimg.cn/b1d3ece6f28d418baf1af466d49f3d43.png?x-oss-process=image/watermark,type_ZHJvaWRzYW5zZmFsbGJhY2s,shadow_50,text_Q1NETiBAQ29kZVNsb2dhbg==,size_20,color_FFFFFF,t_70,g_se,x_16" alt="在这里插入图片描述"></p>
<p>然后我们把这个坐标轴代入到我们真实的环境中，代码及运行结果如下：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.test.demo01;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.applet.Applet;</span><br><span class="line"><span class="keyword">import</span> java.awt.*;</span><br><span class="line"><span class="keyword">import</span> com.sun.j3d.utils.applet.MainFrame;</span><br><span class="line"><span class="keyword">import</span> com.sun.j3d.utils.geometry.*;</span><br><span class="line"><span class="keyword">import</span> com.sun.j3d.utils.universe.*;</span><br><span class="line"><span class="keyword">import</span> javax.media.j3d.*;</span><br><span class="line"><span class="keyword">import</span> javax.vecmath.*;</span><br><span class="line"><span class="keyword">import</span> com.sun.j3d.utils.behaviors.mouse.*;</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">BezierSurfaceMerging</span> <span class="keyword">extends</span> <span class="title">Applet</span></span></span><br><span class="line"><span class="class"></span>&#123;<span class="function"><span class="keyword">public</span> BranchGroup <span class="title">createBranchGroupSceneGraph</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;BranchGroup BranchGroupRoot =<span class="keyword">new</span> BranchGroup();</span><br><span class="line">    BoundingSphere bounds=<span class="keyword">new</span> BoundingSphere(<span class="keyword">new</span> Point3d(<span class="number">0.0</span>,<span class="number">0.0</span>,<span class="number">0.0</span>),<span class="number">100.0</span>);</span><br><span class="line">    Color3f bgColor=<span class="keyword">new</span> Color3f(<span class="number">0f</span>,<span class="number">1.0f</span>,<span class="number">1.0f</span>);</span><br><span class="line">    Background bg=<span class="keyword">new</span> Background(bgColor);</span><br><span class="line">    bg.setApplicationBounds(bounds);</span><br><span class="line">    BranchGroupRoot.addChild(bg);</span><br><span class="line">    Color3f directionalColor=<span class="keyword">new</span> Color3f(<span class="number">1.f</span>,<span class="number">0.f</span>,<span class="number">0.f</span>);</span><br><span class="line">    Vector3f vec=<span class="keyword">new</span> Vector3f(<span class="number">0.f</span>,<span class="number">0.f</span>,-<span class="number">1.0f</span>);</span><br><span class="line">    DirectionalLight directionalLight=<span class="keyword">new</span> DirectionalLight(directionalColor,vec);</span><br><span class="line">    directionalLight.setInfluencingBounds(bounds);</span><br><span class="line">    BranchGroupRoot.addChild(directionalLight);</span><br><span class="line">    Transform3D tr=<span class="keyword">new</span> Transform3D();</span><br><span class="line">    tr.setScale(<span class="number">0.85</span>);</span><br><span class="line">    TransformGroup transformgroup=<span class="keyword">new</span> TransformGroup(tr);</span><br><span class="line">    transformgroup.setCapability(TransformGroup.ALLOW_TRANSFORM_WRITE);</span><br><span class="line">    transformgroup.setCapability(TransformGroup.ALLOW_TRANSFORM_READ);</span><br><span class="line">    BranchGroupRoot.addChild(transformgroup);</span><br><span class="line">    MouseRotate mouserotate = <span class="keyword">new</span> MouseRotate();</span><br><span class="line">    mouserotate.setTransformGroup(transformgroup);</span><br><span class="line">    BranchGroupRoot.addChild(mouserotate);</span><br><span class="line">    mouserotate.setSchedulingBounds(bounds);</span><br><span class="line">    MouseZoom mousezoom = <span class="keyword">new</span> MouseZoom();</span><br><span class="line">    mousezoom.setTransformGroup(transformgroup);</span><br><span class="line">    BranchGroupRoot.addChild(mousezoom);</span><br><span class="line">    mousezoom.setSchedulingBounds(bounds);</span><br><span class="line">    MouseTranslate mousetranslate = <span class="keyword">new</span> MouseTranslate();</span><br><span class="line">    mousetranslate.setTransformGroup(transformgroup);</span><br><span class="line">    BranchGroupRoot.addChild(mousetranslate);</span><br><span class="line">    mousetranslate.setSchedulingBounds(bounds);</span><br><span class="line"><span class="comment">//定义第一个Bezier曲面的16个控制顶点</span></span><br><span class="line">    <span class="keyword">float</span>[][][] P1=&#123;&#123;&#123;-<span class="number">0.8f</span>,<span class="number">0.9f</span>,-<span class="number">0.4f</span>,<span class="number">1.f</span>&#125;,</span><br><span class="line">            &#123;-<span class="number">0.2f</span>,<span class="number">0.8f</span>,-<span class="number">0.5f</span>,<span class="number">1.f</span>&#125;,</span><br><span class="line">            &#123;<span class="number">0.2f</span>,<span class="number">0.9f</span>,-<span class="number">0.4f</span>,<span class="number">1.f</span>&#125;,</span><br><span class="line">            &#123;<span class="number">0.8f</span>,<span class="number">0.8f</span>,-<span class="number">0.5f</span>,<span class="number">1.f</span>&#125;  &#125;,</span><br><span class="line">            &#123; &#123;-<span class="number">0.8f</span>,<span class="number">0.7f</span>,-<span class="number">0.4f</span>,<span class="number">1.f</span>&#125;,</span><br><span class="line">                    &#123;-<span class="number">0.2f</span>,<span class="number">0.6f</span>,<span class="number">0.9f</span>,<span class="number">1.f</span>&#125;,</span><br><span class="line">                    &#123;<span class="number">0.2f</span>,<span class="number">0.7f</span>,<span class="number">0.8f</span>,<span class="number">1.f</span>&#125;,</span><br><span class="line">                    &#123;<span class="number">0.8f</span>,<span class="number">0.6f</span>,-<span class="number">0.4f</span>,<span class="number">1.f</span>&#125; &#125;,</span><br><span class="line">            &#123;&#123;-<span class="number">0.8f</span>,<span class="number">0.4f</span>,-<span class="number">0.4f</span>,<span class="number">1.f</span>&#125;,</span><br><span class="line">                    &#123;-<span class="number">0.2f</span>,<span class="number">0.5f</span>,<span class="number">0.8f</span>,<span class="number">1.f</span>&#125;,</span><br><span class="line">                    &#123;<span class="number">0.2f</span>,<span class="number">0.3f</span>,<span class="number">0.7f</span>,<span class="number">1.f</span>&#125;,</span><br><span class="line">                    &#123;<span class="number">0.8f</span>,<span class="number">0.4f</span>,-<span class="number">0.5f</span>,<span class="number">1.f</span>&#125;   &#125;,</span><br><span class="line">            &#123; &#123;-<span class="number">0.8f</span>,<span class="number">0.f</span>,-<span class="number">0.8f</span>,<span class="number">1.f</span>&#125;,</span><br><span class="line">                    &#123;-<span class="number">0.2f</span>,<span class="number">0.1f</span>,<span class="number">0.9f</span>,<span class="number">1.f</span>&#125;,</span><br><span class="line">                    &#123;<span class="number">0.2f</span>,<span class="number">0.f</span>,-<span class="number">0.8f</span>,<span class="number">1.f</span>&#125;,</span><br><span class="line">                    &#123;<span class="number">0.8f</span>,<span class="number">0.1f</span>,<span class="number">0.9f</span>,<span class="number">1.f</span>&#125; &#125; &#125;;</span><br><span class="line"><span class="comment">//定义第一个Bezier曲面外观属性</span></span><br><span class="line">    Appearance app1 = <span class="keyword">new</span> Appearance();</span><br><span class="line">    PolygonAttributes polygona1=<span class="keyword">new</span> PolygonAttributes();</span><br><span class="line">    polygona1.setBackFaceNormalFlip(<span class="keyword">true</span>);</span><br><span class="line">    polygona1.setCullFace(PolygonAttributes.CULL_NONE);</span><br><span class="line"><span class="comment">//    polygona1.setPolygonMode(PolygonAttributes.POLYGON_LINE);</span></span><br><span class="line">    app1.setPolygonAttributes(polygona1);</span><br><span class="line">    ColoringAttributes color1=<span class="keyword">new</span> ColoringAttributes();</span><br><span class="line">    color1.setColor(<span class="number">1.f</span>,<span class="number">0.f</span>,<span class="number">0.f</span>);</span><br><span class="line">    app1.setColoringAttributes(color1);</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    Shape3D BezierSurfaceface1=<span class="keyword">new</span> BezierThreeOrderSurfaceface(P1,app1);</span><br><span class="line">    transformgroup.addChild(BezierSurfaceface1);</span><br><span class="line">    BranchGroupRoot.compile();</span><br><span class="line">    <span class="keyword">return</span> BranchGroupRoot;</span><br><span class="line">&#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">BezierSurfaceMerging</span><span class="params">()</span></span></span><br><span class="line"><span class="function">    </span>&#123;setLayout(<span class="keyword">new</span> BorderLayout());</span><br><span class="line">        GraphicsConfiguration gc = SimpleUniverse.getPreferredConfiguration();</span><br><span class="line">        Canvas3D c=<span class="keyword">new</span> Canvas3D(gc);</span><br><span class="line">        add(<span class="string">&quot;Center&quot;</span>,c);</span><br><span class="line">        BranchGroup BranchGroupScene=createBranchGroupSceneGraph();</span><br><span class="line">        SimpleUniverse u=<span class="keyword">new</span> SimpleUniverse(c);</span><br><span class="line">        u.getViewingPlatform().setNominalViewingTransform();</span><br><span class="line">        u.addBranchGraph(BranchGroupScene);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span></span></span><br><span class="line"><span class="function">    </span>&#123;<span class="keyword">new</span> MainFrame(<span class="keyword">new</span> BezierSurfaceMerging(),<span class="number">400</span>,<span class="number">400</span>); &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="class"><span class="keyword">class</span>  <span class="title">BezierThreeOrderSurfaceface</span> <span class="keyword">extends</span> <span class="title">Shape3D</span></span></span><br><span class="line"><span class="class"></span>&#123;<span class="function"><span class="keyword">public</span> <span class="title">BezierThreeOrderSurfaceface</span><span class="params">(<span class="keyword">float</span>[][][] P,Appearance app)</span></span></span><br><span class="line"><span class="function"></span>&#123;<span class="keyword">int</span> i,j,k;</span><br><span class="line">    <span class="keyword">int</span> n0;<span class="comment">//定义对参数u、v在[0，1]区间的等分点数</span></span><br><span class="line">    <span class="keyword">float</span> division;<span class="comment">//参数u在[0，1]区间的等分线段长度</span></span><br><span class="line">    n0=<span class="number">50</span>;division=<span class="number">1.f</span>/n0;</span><br><span class="line"><span class="comment">//分别定义存放控制顶点x、y、z坐标与第四维坐标的数组</span></span><br><span class="line">    <span class="keyword">float</span>[][] PX=<span class="keyword">new</span> <span class="keyword">float</span>[<span class="number">4</span>][<span class="number">4</span>];</span><br><span class="line">    <span class="keyword">float</span>[][] PY=<span class="keyword">new</span> <span class="keyword">float</span>[<span class="number">4</span>][<span class="number">4</span>];</span><br><span class="line">    <span class="keyword">float</span>[][] PZ=<span class="keyword">new</span> <span class="keyword">float</span>[<span class="number">4</span>][<span class="number">4</span>];</span><br><span class="line">    <span class="keyword">float</span>[][] P4=<span class="keyword">new</span> <span class="keyword">float</span>[<span class="number">4</span>][<span class="number">4</span>];</span><br><span class="line"><span class="comment">//定义系数矩阵及其转置矩阵</span></span><br><span class="line">    <span class="keyword">float</span>[][] M1=&#123;&#123;<span class="number">1.f</span>,<span class="number">0.f</span>,<span class="number">0.f</span>,<span class="number">0.f</span>&#125;,</span><br><span class="line">            &#123;-<span class="number">3.f</span>,<span class="number">3.f</span>,<span class="number">0.f</span>,<span class="number">0.f</span>&#125;,</span><br><span class="line">            &#123;<span class="number">3.f</span>,-<span class="number">6.f</span>,<span class="number">3.f</span>,<span class="number">0.f</span>&#125;,</span><br><span class="line">            &#123;-<span class="number">1.f</span>,<span class="number">3.f</span>,-<span class="number">3.f</span>,<span class="number">1.f</span>&#125;&#125;;</span><br><span class="line">    <span class="keyword">float</span>[][] M2=&#123;&#123;<span class="number">1.f</span>,-<span class="number">3.f</span>,<span class="number">3.f</span>,-<span class="number">1.f</span>&#125;,</span><br><span class="line">            &#123;<span class="number">0.f</span>,<span class="number">3.f</span>,-<span class="number">6.f</span>,<span class="number">3.f</span>&#125;,</span><br><span class="line">            &#123;<span class="number">0.f</span>,<span class="number">0.f</span>,<span class="number">3.f</span>,-<span class="number">3.f</span>&#125;,</span><br><span class="line">            &#123;<span class="number">0.f</span>,<span class="number">0.f</span>,<span class="number">0.f</span>,<span class="number">1.f</span>&#125;&#125;;</span><br><span class="line"><span class="comment">//定义Bezier曲面的u、v参数分割点坐标数组</span></span><br><span class="line">    <span class="keyword">float</span>[][][] UV=<span class="keyword">new</span> <span class="keyword">float</span>[n0+<span class="number">1</span>][n0+<span class="number">1</span>][<span class="number">2</span>];</span><br><span class="line"><span class="comment">//定义U、V矩阵数组</span></span><br><span class="line">    <span class="keyword">float</span>[][] UU=<span class="keyword">new</span> <span class="keyword">float</span>[<span class="number">1</span>][<span class="number">4</span>];</span><br><span class="line">    <span class="keyword">float</span>[][] VV=<span class="keyword">new</span> <span class="keyword">float</span>[<span class="number">4</span>][<span class="number">1</span>];</span><br><span class="line"><span class="comment">//定义存放曲面上点的坐标的数组</span></span><br><span class="line">    <span class="keyword">float</span>[][][] SurfaceXYZ=<span class="keyword">new</span> <span class="keyword">float</span>[n0+<span class="number">1</span>][n0+<span class="number">1</span>][<span class="number">4</span>];</span><br><span class="line">    <span class="keyword">for</span>(i=<span class="number">0</span>;i&lt;n0+<span class="number">1</span>;i++)</span><br><span class="line">        <span class="keyword">for</span>(j=<span class="number">0</span>;j&lt;n0+<span class="number">1</span>;j++)</span><br><span class="line">        &#123; 	UV[i][j][<span class="number">0</span>]=i*division;</span><br><span class="line">            UV[i][j][<span class="number">1</span>]=j*division;   &#125;</span><br><span class="line">    <span class="keyword">for</span>(i=<span class="number">0</span>;i&lt;<span class="number">4</span>;i++)</span><br><span class="line">        <span class="keyword">for</span>(j=<span class="number">0</span>;j&lt;<span class="number">4</span>;j++)</span><br><span class="line">        &#123; PX[i][j]=P[i][j][<span class="number">0</span>];</span><br><span class="line">            PY[i][j]=P[i][j][<span class="number">1</span>];</span><br><span class="line">            PZ[i][j]=P[i][j][<span class="number">2</span>];</span><br><span class="line">            P4[i][j]=P[i][j][<span class="number">3</span>]; &#125;</span><br><span class="line"><span class="comment">//计算曲面上点的坐标值</span></span><br><span class="line">    <span class="keyword">for</span>(i=<span class="number">0</span>;i&lt;n0+<span class="number">1</span>;i++)</span><br><span class="line">        <span class="keyword">for</span>(j=<span class="number">0</span>;j&lt;n0+<span class="number">1</span>;j++)</span><br><span class="line">        &#123;   UU[<span class="number">0</span>][<span class="number">0</span>]=<span class="number">1.f</span>;</span><br><span class="line">            UU[<span class="number">0</span>][<span class="number">1</span>]=UV[i][j][<span class="number">0</span>];</span><br><span class="line">            UU[<span class="number">0</span>][<span class="number">2</span>]=UV[i][j][<span class="number">0</span>]*UV[i][j][<span class="number">0</span>];</span><br><span class="line">            UU[<span class="number">0</span>][<span class="number">3</span>]=UV[i][j][<span class="number">0</span>]*UV[i][j][<span class="number">0</span>]*UV[i][j][<span class="number">0</span>];</span><br><span class="line">            VV[<span class="number">0</span>][<span class="number">0</span>]=<span class="number">1.f</span>;</span><br><span class="line">            VV[<span class="number">1</span>][<span class="number">0</span>]=UV[i][j][<span class="number">1</span>];</span><br><span class="line">            VV[<span class="number">2</span>][<span class="number">0</span>]=UV[i][j][<span class="number">1</span>]*UV[i][j][<span class="number">1</span>];</span><br><span class="line">            VV[<span class="number">3</span>][<span class="number">0</span>]=UV[i][j][<span class="number">1</span>]*UV[i][j][<span class="number">1</span>]*UV[i][j][<span class="number">1</span>];</span><br><span class="line">            <span class="comment">//计算一点的x坐标</span></span><br><span class="line">            matrixm g0=<span class="keyword">new</span> matrixm(<span class="number">1</span>,<span class="number">4</span>,<span class="number">4</span>,UU,M1);</span><br><span class="line">            matrixm g1=<span class="keyword">new</span> matrixm(<span class="number">1</span>,<span class="number">4</span>,<span class="number">4</span>,g0.CC,PX);</span><br><span class="line">            matrixm g2=<span class="keyword">new</span> matrixm(<span class="number">1</span>,<span class="number">4</span>,<span class="number">4</span>,g1.CC,M2);</span><br><span class="line">            matrixm g3=<span class="keyword">new</span> matrixm(<span class="number">1</span>,<span class="number">4</span>,<span class="number">1</span>,g2.CC,VV);</span><br><span class="line">            SurfaceXYZ[i][j][<span class="number">0</span>]=g3.CC[<span class="number">0</span>][<span class="number">0</span>];</span><br><span class="line">            <span class="comment">//计算一点的y坐标</span></span><br><span class="line">            matrixm g4=<span class="keyword">new</span> matrixm(<span class="number">1</span>,<span class="number">4</span>,<span class="number">4</span>,UU,M1);</span><br><span class="line">            matrixm g5=<span class="keyword">new</span> matrixm(<span class="number">1</span>,<span class="number">4</span>,<span class="number">4</span>,g4.CC,PY);</span><br><span class="line">            matrixm g6=<span class="keyword">new</span> matrixm(<span class="number">1</span>,<span class="number">4</span>,<span class="number">4</span>,g5.CC,M2);</span><br><span class="line">            matrixm g7=<span class="keyword">new</span> matrixm(<span class="number">1</span>,<span class="number">4</span>,<span class="number">1</span>,g6.CC,VV);</span><br><span class="line">            SurfaceXYZ[i][j][<span class="number">1</span>]=g7.CC[<span class="number">0</span>][<span class="number">0</span>];</span><br><span class="line">            <span class="comment">//计算一点的z坐标</span></span><br><span class="line">            matrixm g8=<span class="keyword">new</span> matrixm(<span class="number">1</span>,<span class="number">4</span>,<span class="number">4</span>,UU,M1);</span><br><span class="line">            matrixm g9=<span class="keyword">new</span> matrixm(<span class="number">1</span>,<span class="number">4</span>,<span class="number">4</span>,g8.CC,PZ);</span><br><span class="line">            matrixm g10=<span class="keyword">new</span> matrixm(<span class="number">1</span>,<span class="number">4</span>,<span class="number">4</span>,g9.CC,M2);</span><br><span class="line">            matrixm g11=<span class="keyword">new</span> matrixm(<span class="number">1</span>,<span class="number">4</span>,<span class="number">1</span>,g10.CC,VV);</span><br><span class="line">            SurfaceXYZ[i][j][<span class="number">2</span>]=g11.CC[<span class="number">0</span>][<span class="number">0</span>];</span><br><span class="line">            <span class="comment">//计算一点的第4维坐标</span></span><br><span class="line">            matrixm g12=<span class="keyword">new</span> matrixm(<span class="number">1</span>,<span class="number">4</span>,<span class="number">4</span>,UU,M1);</span><br><span class="line">            matrixm g13=<span class="keyword">new</span> matrixm(<span class="number">1</span>,<span class="number">4</span>,<span class="number">4</span>,g12.CC,P4);</span><br><span class="line">            matrixm g14=<span class="keyword">new</span> matrixm(<span class="number">1</span>,<span class="number">4</span>,<span class="number">4</span>,g13.CC,M2);</span><br><span class="line">            matrixm g15=<span class="keyword">new</span> matrixm(<span class="number">1</span>,<span class="number">4</span>,<span class="number">1</span>,g14.CC,VV);</span><br><span class="line">            SurfaceXYZ[i][j][<span class="number">3</span>]=g15.CC[<span class="number">0</span>][<span class="number">0</span>];</span><br><span class="line">            <span class="comment">//将齐次坐标转换为三维坐标系坐标，如果第4维为1，则不用除第4维</span></span><br><span class="line">            SurfaceXYZ[i][j][<span class="number">0</span>]=SurfaceXYZ[i][j][<span class="number">0</span>]/SurfaceXYZ[i][j][<span class="number">3</span>];</span><br><span class="line">            SurfaceXYZ[i][j][<span class="number">1</span>]=SurfaceXYZ[i][j][<span class="number">1</span>]/SurfaceXYZ[i][j][<span class="number">3</span>];</span><br><span class="line">            SurfaceXYZ[i][j][<span class="number">2</span>]=SurfaceXYZ[i][j][<span class="number">2</span>]/SurfaceXYZ[i][j][<span class="number">3</span>];</span><br><span class="line">        &#125;</span><br><span class="line">    QuadArray BezierQuadsurfaceface = <span class="keyword">new</span> QuadArray(n0*n0*<span class="number">4</span>,</span><br><span class="line">            GeometryArray.COORDINATES|GeometryArray.NORMALS);</span><br><span class="line">    <span class="keyword">int</span> c=<span class="number">0</span>;<span class="comment">//以顶点数累加的方式设置顶点的序号</span></span><br><span class="line">    <span class="keyword">for</span>(i=<span class="number">0</span>;i&lt;n0;i++)</span><br><span class="line">    &#123;<span class="keyword">for</span>(j=<span class="number">0</span>;j&lt;n0;j++)</span><br><span class="line">    &#123;<span class="comment">//设置一个平面上的4个点</span></span><br><span class="line">        Point3f A=<span class="keyword">new</span> Point3f(SurfaceXYZ[i][j][<span class="number">0</span>],SurfaceXYZ[i][j][<span class="number">1</span>],</span><br><span class="line">                SurfaceXYZ[i][j][<span class="number">2</span>]);</span><br><span class="line">        Point3f B=<span class="keyword">new</span> Point3f(SurfaceXYZ[i][j+<span class="number">1</span>][<span class="number">0</span>],SurfaceXYZ[i][j+<span class="number">1</span>][<span class="number">1</span>],</span><br><span class="line">                SurfaceXYZ[i][j+<span class="number">1</span>][<span class="number">2</span>]);</span><br><span class="line">        Point3f C=<span class="keyword">new</span> Point3f(SurfaceXYZ[i+<span class="number">1</span>][j+<span class="number">1</span>][<span class="number">0</span>],SurfaceXYZ[i+<span class="number">1</span>][j+<span class="number">1</span>][<span class="number">1</span>],</span><br><span class="line">                SurfaceXYZ[i+<span class="number">1</span>][j+<span class="number">1</span>][<span class="number">2</span>]);</span><br><span class="line">        Point3f D=<span class="keyword">new</span> Point3f(SurfaceXYZ[i+<span class="number">1</span>][j][<span class="number">0</span>],SurfaceXYZ[i+<span class="number">1</span>][j][<span class="number">1</span>],</span><br><span class="line">                SurfaceXYZ[i+<span class="number">1</span>][j][<span class="number">2</span>]);</span><br><span class="line"><span class="comment">//计算由四个点形成的平面的法向量</span></span><br><span class="line">        Vector3f a = <span class="keyword">new</span> Vector3f(A.x - B.x, A.y - B.y, A.z - B.z);</span><br><span class="line">        Vector3f b = <span class="keyword">new</span> Vector3f(C.x - B.x, C.y - B.y, C.z - B.z);</span><br><span class="line">        Vector3f n = <span class="keyword">new</span> Vector3f();</span><br><span class="line">        n.cross(b, a);</span><br><span class="line">        n.normalize();</span><br><span class="line"><span class="comment">//设置点的序号</span></span><br><span class="line">        BezierQuadsurfaceface.setCoordinate(c, A);</span><br><span class="line">        BezierQuadsurfaceface.setCoordinate(c+<span class="number">1</span>, B);</span><br><span class="line">        BezierQuadsurfaceface.setCoordinate(c+<span class="number">2</span>, C);</span><br><span class="line">        BezierQuadsurfaceface.setCoordinate(c+<span class="number">3</span>, D);</span><br><span class="line"><span class="comment">//设置点的法向量</span></span><br><span class="line">        BezierQuadsurfaceface.setNormal(c, n);</span><br><span class="line">        BezierQuadsurfaceface.setNormal(c+<span class="number">1</span>, n);</span><br><span class="line">        BezierQuadsurfaceface.setNormal(c+<span class="number">2</span>, n);</span><br><span class="line">        BezierQuadsurfaceface.setNormal(c+<span class="number">3</span>, n);</span><br><span class="line">        c=c+<span class="number">4</span>;</span><br><span class="line">    &#125;&#125;</span><br><span class="line">    <span class="keyword">this</span>.addGeometry(BezierQuadsurfaceface);</span><br><span class="line">    <span class="keyword">this</span>.setAppearance(app);</span><br><span class="line">&#125;&#125;</span><br><span class="line"><span class="class"><span class="keyword">class</span>  <span class="title">BezierSurfaceControlPoints</span> <span class="keyword">extends</span> <span class="title">Shape3D</span></span></span><br><span class="line"><span class="class"></span>&#123;<span class="function"><span class="keyword">public</span> <span class="title">BezierSurfaceControlPoints</span><span class="params">(<span class="keyword">float</span>[][][] P,Appearance app)</span></span></span><br><span class="line"><span class="function"></span>&#123;<span class="keyword">int</span> i,j,k;</span><br><span class="line">    QuadArray BeziersurfacecontrolPointsNet =<span class="keyword">new</span> QuadArray(<span class="number">3</span>*<span class="number">3</span>*<span class="number">4</span>,</span><br><span class="line">            GeometryArray.COORDINATES|GeometryArray.NORMALS);</span><br><span class="line">    <span class="keyword">int</span> c=<span class="number">0</span>;</span><br><span class="line">    <span class="keyword">for</span>(i=<span class="number">0</span>;i&lt;<span class="number">3</span>;i++)</span><br><span class="line">    &#123;<span class="keyword">for</span>(j=<span class="number">0</span>;j&lt;<span class="number">3</span>;j++)</span><br><span class="line">    &#123;Point3f A=<span class="keyword">new</span> Point3f(P[i][j][<span class="number">0</span>],P[i][j][<span class="number">1</span>],P[i][j][<span class="number">2</span>]);</span><br><span class="line">        Point3f B=<span class="keyword">new</span> Point3f(P[i][j+<span class="number">1</span>][<span class="number">0</span>],P[i][j+<span class="number">1</span>][<span class="number">1</span>],P[i][j+<span class="number">1</span>][<span class="number">2</span>]);</span><br><span class="line">        Point3f C=<span class="keyword">new</span> Point3f(P[i+<span class="number">1</span>][j+<span class="number">1</span>][<span class="number">0</span>],P[i+<span class="number">1</span>][j+<span class="number">1</span>][<span class="number">1</span>],P[i+<span class="number">1</span>][j+<span class="number">1</span>][<span class="number">2</span>]);</span><br><span class="line">        Point3f D=<span class="keyword">new</span> Point3f(P[i+<span class="number">1</span>][j][<span class="number">0</span>],P[i+<span class="number">1</span>][j][<span class="number">1</span>],P[i+<span class="number">1</span>][j][<span class="number">2</span>]);</span><br><span class="line">        Vector3f a = <span class="keyword">new</span> Vector3f(A.x - B.x, A.y - B.y, A.z - B.z);</span><br><span class="line">        Vector3f b = <span class="keyword">new</span> Vector3f(C.x - B.x, C.y - B.y, C.z - B.z);</span><br><span class="line">        Vector3f n = <span class="keyword">new</span> Vector3f();</span><br><span class="line">        n.cross(b, a);</span><br><span class="line">        n.normalize();</span><br><span class="line">        BeziersurfacecontrolPointsNet.setCoordinate(c, A);</span><br><span class="line">        BeziersurfacecontrolPointsNet.setCoordinate(c+<span class="number">1</span>, B);</span><br><span class="line">        BeziersurfacecontrolPointsNet.setCoordinate(c+<span class="number">2</span>, C);</span><br><span class="line">        BeziersurfacecontrolPointsNet.setCoordinate(c+<span class="number">3</span>, D);</span><br><span class="line">        BeziersurfacecontrolPointsNet.setNormal(c, n);</span><br><span class="line">        BeziersurfacecontrolPointsNet.setNormal(c+<span class="number">1</span>, n);</span><br><span class="line">        BeziersurfacecontrolPointsNet.setNormal(c+<span class="number">2</span>, n);</span><br><span class="line">        BeziersurfacecontrolPointsNet.setNormal(c+<span class="number">3</span>, n);</span><br><span class="line">        c=c+<span class="number">4</span>;</span><br><span class="line">    &#125;&#125;</span><br><span class="line">    <span class="keyword">this</span>.addGeometry(BeziersurfacecontrolPointsNet);</span><br><span class="line">    <span class="keyword">this</span>.setAppearance(app);</span><br><span class="line">&#125;&#125;</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">matrixm</span></span></span><br><span class="line"><span class="class"></span>&#123;<span class="keyword">public</span> <span class="keyword">float</span> CC[][]= <span class="keyword">new</span> <span class="keyword">float</span>[<span class="number">4</span>][<span class="number">4</span>];</span><br><span class="line">    <span class="keyword">int</span> ll,mm,kk;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">matrixm</span><span class="params">(<span class="keyword">int</span> mmm, <span class="keyword">int</span> kkk, <span class="keyword">int</span> nnn,<span class="keyword">float</span> a[][],<span class="keyword">float</span> b[][])</span></span></span><br><span class="line"><span class="function">    </span>&#123;<span class="keyword">for</span>(ll=<span class="number">0</span>;ll&lt;mmm;ll++)</span><br><span class="line">        <span class="keyword">for</span>(mm=<span class="number">0</span>;mm&lt;nnn;mm++)&#123;CC[ll][mm]=<span class="number">0.f</span>;&#125;</span><br><span class="line">        <span class="keyword">for</span>(ll=<span class="number">0</span>;ll&lt;mmm;ll++)</span><br><span class="line">            <span class="keyword">for</span>(mm=<span class="number">0</span>;mm&lt;nnn;mm++)</span><br><span class="line">            &#123;<span class="keyword">for</span>(kk=<span class="number">0</span>;kk&lt;kkk;kk++) CC[ll][mm]=CC[ll][mm]+a[ll][kk]*b[kk][mm];&#125;</span><br><span class="line">    &#125;&#125;</span><br><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure>
<p><img src="https://img-blog.csdnimg.cn/1a0686e2a51d4a3395b3dc3f9bd3cae3.png?x-oss-process=image/watermark,type_ZHJvaWRzYW5zZmFsbGJhY2s,shadow_50,text_Q1NETiBAQ29kZVNsb2dhbg==,size_20,color_FFFFFF,t_70,g_se,x_16" alt="在这里插入图片描述"><br>在这一长段代码中，只有P1的这16个点是我们要改动的地方，这16个的点共同组成了一个曲面。每个点包含了4个坐标，但其中的<code>1.f</code>我们是不需要去动的，因此真正有用的是前三个<br>**{X, Y, Z, 1.f}**<br>这里的XYZ就分别对应到上述提到的坐标轴中，那么理解了坐标是怎么使用后，还要将坐标对应到曲面中。</p>
<p>为了方便演示，我们将P1中的坐标改成如下：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">float</span>[][][] P1=&#123;</span><br><span class="line">            &#123;&#123;-<span class="number">0.8f</span>, -<span class="number">1.2f</span>, -<span class="number">0.8f</span>, <span class="number">1.f</span>&#125;, &#123;-<span class="number">0.2f</span>, <span class="number">0.2f</span>, -<span class="number">0.5f</span>, <span class="number">1.f</span>&#125;,</span><br><span class="line">                    &#123;<span class="number">0.2f</span>, <span class="number">0.3f</span>, -<span class="number">0.5f</span>, <span class="number">1.f</span>&#125;, &#123;<span class="number">0.8f</span>, -<span class="number">1.2f</span>, -<span class="number">0.8f</span>, <span class="number">1.f</span>&#125;&#125;,</span><br><span class="line"></span><br><span class="line">            &#123;&#123;-<span class="number">0.8f</span>, -<span class="number">0.1f</span>, -<span class="number">0.2f</span>, <span class="number">1.f</span>&#125;, &#123;-<span class="number">0.2f</span>, <span class="number">0.9f</span>, -<span class="number">0.2f</span>, <span class="number">1.f</span>&#125;,</span><br><span class="line">                    &#123;<span class="number">0.2f</span>, <span class="number">0.9f</span>, -<span class="number">0.2f</span>, <span class="number">1.f</span>&#125;, &#123;<span class="number">0.8f</span>, -<span class="number">0.1f</span>, -<span class="number">0.2f</span>, <span class="number">1.f</span>&#125;&#125;,</span><br><span class="line"></span><br><span class="line">            &#123;&#123;-<span class="number">0.8f</span>, -<span class="number">0.1f</span>, <span class="number">0.2f</span>, <span class="number">1.f</span>&#125;, &#123;-<span class="number">0.2f</span>, <span class="number">0.9f</span>, <span class="number">0.2f</span>, <span class="number">1.f</span>&#125;,</span><br><span class="line">                    &#123;<span class="number">0.2f</span>, <span class="number">0.9f</span>, <span class="number">0.2f</span>, <span class="number">1.f</span>&#125;, &#123;<span class="number">0.8f</span>, -<span class="number">0.1f</span>, <span class="number">0.2f</span>, <span class="number">1.f</span>&#125;&#125;,</span><br><span class="line"></span><br><span class="line">            &#123;&#123;-<span class="number">0.6f</span>, -<span class="number">0.6f</span>, <span class="number">0.9f</span>, <span class="number">1.f</span>&#125;, &#123;-<span class="number">0.2f</span>, <span class="number">0.2f</span>, <span class="number">0.5f</span>, <span class="number">1.f</span>&#125;,</span><br><span class="line">                    &#123;<span class="number">0.2f</span>, <span class="number">0.3f</span>, <span class="number">0.5f</span>, <span class="number">1.f</span>&#125;, &#123;<span class="number">0.6f</span>, -<span class="number">0.65f</span>, <span class="number">0.8f</span>, <span class="number">1.f</span>&#125;&#125;&#125;;</span><br></pre></td></tr></table></figure>
<p>运行我们的代码，得到如下结果：<br><img src="https://img-blog.csdnimg.cn/d03e8c9f6cf84eb19c329853f8a0627e.png?x-oss-process=image/watermark,type_ZHJvaWRzYW5zZmFsbGJhY2s,shadow_50,text_Q1NETiBAQ29kZVNsb2dhbg==,size_18,color_FFFFFF,t_70,g_se,x_16" alt="在这里插入图片描述"><br>到这步后，我们要把最前面提到的坐标轴，与这张图相结合。这里注意一下，为了避免把自己搞混乱，运行出结果后就不要随便去转动它！！！第一印象很重要。<br><img src="https://img-blog.csdnimg.cn/c453a93d15a4466486a9f432246a40e4.png?x-oss-process=image/watermark,type_ZHJvaWRzYW5zZmFsbGJhY2s,shadow_50,text_Q1NETiBAQ29kZVNsb2dhbg==,size_18,color_FFFFFF,t_70,g_se,x_16" alt="在这里插入图片描述"><br>这就是在这张图中代表的坐标系（上下位置不一定准确）<br>我们的重头戏要来了，这16个点分别代表图中的哪个位置，因为这个图像凹凸有致，我们很容易想到去调整它的Y坐标，来得到最佳的观察效果。<br>我们将这里的坐标分别4组，从上至下，从左至右，依次记为1，2，3……16<br><img src="https://img-blog.csdnimg.cn/80442cf4d5dd4f7c92174c0feed953da.png?x-oss-process=image/watermark,type_ZHJvaWRzYW5zZmFsbGJhY2s,shadow_50,text_Q1NETiBAQ29kZVNsb2dhbg==,size_20,color_FFFFFF,t_70,g_se,x_16" alt="在这里插入图片描述"><br>首先我们将第一个点的Y坐标改为0，观察效果<br><img src="https://img-blog.csdnimg.cn/fe4c220a78ec44a998d4078eb028c566.png?x-oss-process=image/watermark,type_ZHJvaWRzYW5zZmFsbGJhY2s,shadow_50,text_Q1NETiBAQ29kZVNsb2dhbg==,size_18,color_FFFFFF,t_70,g_se,x_16" alt="在这里插入图片描述"><br>可以看到已经有了一定的变化，随后我们转动图像，以俯视的视角，也就是想象自己飞到了图像的上方。<br><img src="https://img-blog.csdnimg.cn/488559409c8c4472979ffc97212a49c0.png?x-oss-process=image/watermark,type_ZHJvaWRzYW5zZmFsbGJhY2s,shadow_50,text_Q1NETiBAQ29kZVNsb2dhbg==,size_18,color_FFFFFF,t_70,g_se,x_16" alt="在这里插入图片描述"><br>可以看到图形的这一角比较特别，相比较原先有点翘起，归根结底就是我们把第一个点的纵坐标由-1.2f变为了0f，产生了这个效果。有兴趣的同学可以再把它改成-1.2f，就会得到如下 结果：<br><img src="https://img-blog.csdnimg.cn/41a93061cdd14876a268a0f71fbc3e7a.png?x-oss-process=image/watermark,type_ZHJvaWRzYW5zZmFsbGJhY2s,shadow_50,text_Q1NETiBAQ29kZVNsb2dhbg==,size_18,color_FFFFFF,t_70,g_se,x_16" alt="在这里插入图片描述"><br>我们依葫芦画瓢，把这16个点都改一遍，也就是只把它们的Y坐标改为0，分别会得到以下结果（均采用了俯视的视角）：</p>
<p><img src="https://img-blog.csdnimg.cn/774cf49021b44709aade718a4f571741.png?x-oss-process=image/watermark,type_ZHJvaWRzYW5zZmFsbGJhY2s,shadow_50,text_Q1NETiBAQ29kZVNsb2dhbg==,size_18,color_FFFFFF,t_70,g_se,x_16" alt="在这里插入图片描述"><br><img src="https://img-blog.csdnimg.cn/d4f6e98aeddf4bfe9001b56333727db0.png?x-oss-process=image/watermark,type_ZHJvaWRzYW5zZmFsbGJhY2s,shadow_50,text_Q1NETiBAQ29kZVNsb2dhbg==,size_18,color_FFFFFF,t_70,g_se,x_16" alt="在这里插入图片描述"><br><img src="https://img-blog.csdnimg.cn/71b11ca459e54d779303b095883d7839.png?x-oss-process=image/watermark,type_ZHJvaWRzYW5zZmFsbGJhY2s,shadow_50,text_Q1NETiBAQ29kZVNsb2dhbg==,size_18,color_FFFFFF,t_70,g_se,x_16" alt="在这里插入图片描述"><br>到这里，我们第一组的坐标全部测试完毕了，相信大家一定对坐标和曲面之间的对应关系有了一定的了解。现在我们再测一下每组的第一个点，同样修改其Y坐标<br><img src="https://img-blog.csdnimg.cn/7e7d6099058c4e0092904de6f8ea4e0d.png?x-oss-process=image/watermark,type_ZHJvaWRzYW5zZmFsbGJhY2s,shadow_50,text_Q1NETiBAQ29kZVNsb2dhbg==,size_18,color_FFFFFF,t_70,g_se,x_16" alt="在这里插入图片描述"></p>
<p><img src="https://img-blog.csdnimg.cn/59929134c01a464f80cf04c2ef88e055.png?x-oss-process=image/watermark,type_ZHJvaWRzYW5zZmFsbGJhY2s,shadow_50,text_Q1NETiBAQ29kZVNsb2dhbg==,size_18,color_FFFFFF,t_70,g_se,x_16" alt="在这里插入图片描述"><br><img src="https://img-blog.csdnimg.cn/30a566848c7e4a24be7f7e6cc3f60211.png?x-oss-process=image/watermark,type_ZHJvaWRzYW5zZmFsbGJhY2s,shadow_50,text_Q1NETiBAQ29kZVNsb2dhbg==,size_18,color_FFFFFF,t_70,g_se,x_16" alt="在这里插入图片描述"><br>自己都试一遍印象才能深刻噢！</p>
<p>接着我们看看把全部的Y坐标归0的结果<br><img src="https://img-blog.csdnimg.cn/02338e9a09814c6daa22404843bcd8fa.png?x-oss-process=image/watermark,type_ZHJvaWRzYW5zZmFsbGJhY2s,shadow_50,text_Q1NETiBAQ29kZVNsb2dhbg==,size_18,color_FFFFFF,t_70,g_se,x_16" alt="在这里插入图片描述"><br>可以看到打开的时候已经变成了一个平面了，不再是曲面，这也给了 我们一个构造平面的思路，也就是把16个的坐标的XYZ任意一个全部设置为0，就可以得到平面。</p>
<p>当然学到这里，你已经掌握了一个曲面是如何运转的，然而我们的作品肯定不是只由一个曲面就能完成，除非你看开了。</p>
<h1 id="加一个面"><a href="#加一个面" class="headerlink" title="加一个面"></a>加一个面</h1><p>接下来我们将详细分析一下，自己如何再加一个曲面</p>
<p>添加如下代码， 这里的P2是由P1的Y坐标修改为0.5f得来，也就是把整个面往上抬了0.5f的距离，可以先在脑海中想想会是什么样子再往下滑，建立空间感</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">float</span>[][][] P2=&#123;</span><br><span class="line">            &#123;&#123;-<span class="number">0.8f</span>, <span class="number">0.5f</span>, -<span class="number">0.8f</span>, <span class="number">1.f</span>&#125;, &#123;-<span class="number">0.2f</span>, <span class="number">0.5f</span>, -<span class="number">0.5f</span>, <span class="number">1.f</span>&#125;,</span><br><span class="line">                    &#123;<span class="number">0.2f</span>, <span class="number">0.5f</span>, -<span class="number">0.5f</span>, <span class="number">1.f</span>&#125;, &#123;<span class="number">0.8f</span>, <span class="number">0.5f</span>, -<span class="number">0.8f</span>, <span class="number">1.f</span>&#125;&#125;,</span><br><span class="line"></span><br><span class="line">            &#123;&#123;-<span class="number">0.8f</span>, <span class="number">0.5f</span>, -<span class="number">0.2f</span>, <span class="number">1.f</span>&#125;, &#123;-<span class="number">0.2f</span>, <span class="number">0.5f</span>, -<span class="number">0.2f</span>, <span class="number">1.f</span>&#125;,</span><br><span class="line">                    &#123;<span class="number">0.2f</span>, <span class="number">0.5f</span>, -<span class="number">0.2f</span>, <span class="number">1.f</span>&#125;, &#123;<span class="number">0.8f</span>, <span class="number">0.5f</span>, -<span class="number">0.2f</span>, <span class="number">1.f</span>&#125;&#125;,</span><br><span class="line"></span><br><span class="line">            &#123;&#123;-<span class="number">0.8f</span>, <span class="number">0.5f</span>, <span class="number">0.2f</span>, <span class="number">1.f</span>&#125;, &#123;-<span class="number">0.2f</span>, <span class="number">0.5f</span>, <span class="number">0.2f</span>, <span class="number">1.f</span>&#125;,</span><br><span class="line">                    &#123;<span class="number">0.2f</span>, <span class="number">0.5f</span>, <span class="number">0.2f</span>, <span class="number">1.f</span>&#125;, &#123;<span class="number">0.8f</span>, <span class="number">0.5f</span>, <span class="number">0.2f</span>, <span class="number">1.f</span>&#125;&#125;,</span><br><span class="line"></span><br><span class="line">            &#123;&#123;-<span class="number">0.6f</span>, <span class="number">0.5f</span>, <span class="number">0.9f</span>, <span class="number">1.f</span>&#125;, &#123;-<span class="number">0.2f</span>, <span class="number">0.5f</span>, <span class="number">0.5f</span>, <span class="number">1.f</span>&#125;,</span><br><span class="line">                    &#123;<span class="number">0.2f</span>, <span class="number">0.5f</span>, <span class="number">0.5f</span>, <span class="number">1.f</span>&#125;, &#123;<span class="number">0.6f</span>, <span class="number">0.5f</span>, <span class="number">0.8f</span>, <span class="number">1.f</span>&#125;&#125;&#125;;</span><br><span class="line"><span class="comment">//定义第一个Bezier曲面外观属性</span></span><br><span class="line">    Appearance app2 = <span class="keyword">new</span> Appearance();</span><br><span class="line">    PolygonAttributes polygona2=<span class="keyword">new</span> PolygonAttributes();</span><br><span class="line">    polygona2.setBackFaceNormalFlip(<span class="keyword">true</span>);</span><br><span class="line">    polygona2.setCullFace(PolygonAttributes.CULL_NONE);</span><br><span class="line">    polygona2.setPolygonMode(PolygonAttributes.POLYGON_LINE);</span><br><span class="line">    app2.setPolygonAttributes(polygona2);</span><br><span class="line">    ColoringAttributes color2=<span class="keyword">new</span> ColoringAttributes();</span><br><span class="line">    color2.setColor(<span class="number">0.8f</span>,<span class="number">0.f</span>,<span class="number">0.f</span>);</span><br><span class="line">    app2.setColoringAttributes(color2);</span><br><span class="line">    Shape3D BezierSurfaceface2=<span class="keyword">new</span> BezierThreeOrderSurfaceface(P2,app2);</span><br><span class="line">    transformgroup.addChild(BezierSurfaceface2);</span><br></pre></td></tr></table></figure>
<p>说说要改的地方，P2 app2 polygona2 color2 BezierSurfaceface2<br>这里都由原先的1改为了2，要是想添加3个，4个，10个，100个，也是以此类推。<br>效果如下：<br><img src="https://img-blog.csdnimg.cn/67c55e9b1f8d4e22996852c3209de225.png?x-oss-process=image/watermark,type_ZHJvaWRzYW5zZmFsbGJhY2s,shadow_50,text_Q1NETiBAQ29kZVNsb2dhbg==,size_18,color_FFFFFF,t_70,g_se,x_16" alt="在这里插入图片描述"><br>看到这里，相信你一定已经会意了<br>小练习：可以先动手试试如何用6个曲面拼成一个方块<br>本次教程就到这里了，快去完成自己的设计作品吧！<br>4班冲！</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.test.demo01;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.applet.Applet;</span><br><span class="line"><span class="keyword">import</span> java.awt.*;</span><br><span class="line"><span class="keyword">import</span> com.sun.j3d.utils.applet.MainFrame;</span><br><span class="line"><span class="keyword">import</span> com.sun.j3d.utils.geometry.*;</span><br><span class="line"><span class="keyword">import</span> com.sun.j3d.utils.universe.*;</span><br><span class="line"><span class="keyword">import</span> javax.media.j3d.*;</span><br><span class="line"><span class="keyword">import</span> javax.vecmath.*;</span><br><span class="line"><span class="keyword">import</span> com.sun.j3d.utils.behaviors.mouse.*;</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">BezierSurfaceMerging</span> <span class="keyword">extends</span> <span class="title">Applet</span></span></span><br><span class="line"><span class="class"></span>&#123;<span class="function"><span class="keyword">public</span> BranchGroup <span class="title">createBranchGroupSceneGraph</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;BranchGroup BranchGroupRoot =<span class="keyword">new</span> BranchGroup();</span><br><span class="line">    BoundingSphere bounds=<span class="keyword">new</span> BoundingSphere(<span class="keyword">new</span> Point3d(<span class="number">0.0</span>,<span class="number">0.0</span>,<span class="number">0.0</span>),<span class="number">100.0</span>);</span><br><span class="line">    Color3f bgColor=<span class="keyword">new</span> Color3f(<span class="number">0f</span>,<span class="number">1.0f</span>,<span class="number">1.0f</span>);</span><br><span class="line">    Background bg=<span class="keyword">new</span> Background(bgColor);</span><br><span class="line">    bg.setApplicationBounds(bounds);</span><br><span class="line">    BranchGroupRoot.addChild(bg);</span><br><span class="line">    Color3f directionalColor=<span class="keyword">new</span> Color3f(<span class="number">1.f</span>,<span class="number">0.f</span>,<span class="number">0.f</span>);</span><br><span class="line">    Vector3f vec=<span class="keyword">new</span> Vector3f(<span class="number">0.f</span>,<span class="number">0.f</span>,-<span class="number">1.0f</span>);</span><br><span class="line">    DirectionalLight directionalLight=<span class="keyword">new</span> DirectionalLight(directionalColor,vec);</span><br><span class="line">    directionalLight.setInfluencingBounds(bounds);</span><br><span class="line">    BranchGroupRoot.addChild(directionalLight);</span><br><span class="line">    Transform3D tr=<span class="keyword">new</span> Transform3D();</span><br><span class="line">    tr.setScale(<span class="number">0.85</span>);</span><br><span class="line">    TransformGroup transformgroup=<span class="keyword">new</span> TransformGroup(tr);</span><br><span class="line">    transformgroup.setCapability(TransformGroup.ALLOW_TRANSFORM_WRITE);</span><br><span class="line">    transformgroup.setCapability(TransformGroup.ALLOW_TRANSFORM_READ);</span><br><span class="line">    BranchGroupRoot.addChild(transformgroup);</span><br><span class="line">    MouseRotate mouserotate = <span class="keyword">new</span> MouseRotate();</span><br><span class="line">    mouserotate.setTransformGroup(transformgroup);</span><br><span class="line">    BranchGroupRoot.addChild(mouserotate);</span><br><span class="line">    mouserotate.setSchedulingBounds(bounds);</span><br><span class="line">    MouseZoom mousezoom = <span class="keyword">new</span> MouseZoom();</span><br><span class="line">    mousezoom.setTransformGroup(transformgroup);</span><br><span class="line">    BranchGroupRoot.addChild(mousezoom);</span><br><span class="line">    mousezoom.setSchedulingBounds(bounds);</span><br><span class="line">    MouseTranslate mousetranslate = <span class="keyword">new</span> MouseTranslate();</span><br><span class="line">    mousetranslate.setTransformGroup(transformgroup);</span><br><span class="line">    BranchGroupRoot.addChild(mousetranslate);</span><br><span class="line">    mousetranslate.setSchedulingBounds(bounds);</span><br><span class="line"><span class="comment">//定义第一个Bezier曲面的16个控制顶点</span></span><br><span class="line">    <span class="keyword">float</span>[][][] P1=&#123;</span><br><span class="line">            &#123;&#123;-<span class="number">0.8f</span>, <span class="number">0f</span>, -<span class="number">0.8f</span>, <span class="number">1.f</span>&#125;, &#123;-<span class="number">0.2f</span>, <span class="number">0f</span>, -<span class="number">0.5f</span>, <span class="number">1.f</span>&#125;,</span><br><span class="line">                    &#123;<span class="number">0.2f</span>, <span class="number">0f</span>, -<span class="number">0.5f</span>, <span class="number">1.f</span>&#125;, &#123;<span class="number">0.8f</span>, <span class="number">0f</span>, -<span class="number">0.8f</span>, <span class="number">1.f</span>&#125;&#125;,</span><br><span class="line"></span><br><span class="line">            &#123;&#123;-<span class="number">0.8f</span>, <span class="number">0f</span>, -<span class="number">0.2f</span>, <span class="number">1.f</span>&#125;, &#123;-<span class="number">0.2f</span>, <span class="number">0f</span>, -<span class="number">0.2f</span>, <span class="number">1.f</span>&#125;,</span><br><span class="line">                    &#123;<span class="number">0.2f</span>, <span class="number">0f</span>, -<span class="number">0.2f</span>, <span class="number">1.f</span>&#125;, &#123;<span class="number">0.8f</span>, <span class="number">0f</span>, -<span class="number">0.2f</span>, <span class="number">1.f</span>&#125;&#125;,</span><br><span class="line"></span><br><span class="line">            &#123;&#123;-<span class="number">0.8f</span>, <span class="number">0f</span>, <span class="number">0.2f</span>, <span class="number">1.f</span>&#125;, &#123;-<span class="number">0.2f</span>, <span class="number">0f</span>, <span class="number">0.2f</span>, <span class="number">1.f</span>&#125;,</span><br><span class="line">                    &#123;<span class="number">0.2f</span>, <span class="number">0f</span>, <span class="number">0.2f</span>, <span class="number">1.f</span>&#125;, &#123;<span class="number">0.8f</span>, <span class="number">0f</span>, <span class="number">0.2f</span>, <span class="number">1.f</span>&#125;&#125;,</span><br><span class="line"></span><br><span class="line">            &#123;&#123;-<span class="number">0.6f</span>, <span class="number">0f</span>, <span class="number">0.9f</span>, <span class="number">1.f</span>&#125;, &#123;-<span class="number">0.2f</span>, <span class="number">0f</span>, <span class="number">0.5f</span>, <span class="number">1.f</span>&#125;,</span><br><span class="line">                    &#123;<span class="number">0.2f</span>, <span class="number">0f</span>, <span class="number">0.5f</span>, <span class="number">1.f</span>&#125;, &#123;<span class="number">0.6f</span>, <span class="number">0f</span>, <span class="number">0.8f</span>, <span class="number">1.f</span>&#125;&#125;&#125;;</span><br><span class="line"><span class="comment">//定义第一个Bezier曲面外观属性</span></span><br><span class="line">    Appearance app1 = <span class="keyword">new</span> Appearance();</span><br><span class="line">    PolygonAttributes polygona1=<span class="keyword">new</span> PolygonAttributes();</span><br><span class="line">    polygona1.setBackFaceNormalFlip(<span class="keyword">true</span>);</span><br><span class="line">    polygona1.setCullFace(PolygonAttributes.CULL_NONE);</span><br><span class="line">    polygona1.setPolygonMode(PolygonAttributes.POLYGON_LINE);</span><br><span class="line">    app1.setPolygonAttributes(polygona1);</span><br><span class="line">    ColoringAttributes color1=<span class="keyword">new</span> ColoringAttributes();</span><br><span class="line">    color1.setColor(<span class="number">0.8f</span>,<span class="number">0.f</span>,<span class="number">0.f</span>);</span><br><span class="line">    app1.setColoringAttributes(color1);</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="keyword">float</span>[][][] P2=&#123;</span><br><span class="line">            &#123;&#123;-<span class="number">0.8f</span>, <span class="number">0.5f</span>, -<span class="number">0.8f</span>, <span class="number">1.f</span>&#125;, &#123;-<span class="number">0.2f</span>, <span class="number">0.5f</span>, -<span class="number">0.5f</span>, <span class="number">1.f</span>&#125;,</span><br><span class="line">                    &#123;<span class="number">0.2f</span>, <span class="number">0.5f</span>, -<span class="number">0.5f</span>, <span class="number">1.f</span>&#125;, &#123;<span class="number">0.8f</span>, <span class="number">0.5f</span>, -<span class="number">0.8f</span>, <span class="number">1.f</span>&#125;&#125;,</span><br><span class="line"></span><br><span class="line">            &#123;&#123;-<span class="number">0.8f</span>, <span class="number">0.5f</span>, -<span class="number">0.2f</span>, <span class="number">1.f</span>&#125;, &#123;-<span class="number">0.2f</span>, <span class="number">0.5f</span>, -<span class="number">0.2f</span>, <span class="number">1.f</span>&#125;,</span><br><span class="line">                    &#123;<span class="number">0.2f</span>, <span class="number">0.5f</span>, -<span class="number">0.2f</span>, <span class="number">1.f</span>&#125;, &#123;<span class="number">0.8f</span>, <span class="number">0.5f</span>, -<span class="number">0.2f</span>, <span class="number">1.f</span>&#125;&#125;,</span><br><span class="line"></span><br><span class="line">            &#123;&#123;-<span class="number">0.8f</span>, <span class="number">0.5f</span>, <span class="number">0.2f</span>, <span class="number">1.f</span>&#125;, &#123;-<span class="number">0.2f</span>, <span class="number">0.5f</span>, <span class="number">0.2f</span>, <span class="number">1.f</span>&#125;,</span><br><span class="line">                    &#123;<span class="number">0.2f</span>, <span class="number">0.5f</span>, <span class="number">0.2f</span>, <span class="number">1.f</span>&#125;, &#123;<span class="number">0.8f</span>, <span class="number">0.5f</span>, <span class="number">0.2f</span>, <span class="number">1.f</span>&#125;&#125;,</span><br><span class="line"></span><br><span class="line">            &#123;&#123;-<span class="number">0.6f</span>, <span class="number">0.5f</span>, <span class="number">0.9f</span>, <span class="number">1.f</span>&#125;, &#123;-<span class="number">0.2f</span>, <span class="number">0.5f</span>, <span class="number">0.5f</span>, <span class="number">1.f</span>&#125;,</span><br><span class="line">                    &#123;<span class="number">0.2f</span>, <span class="number">0.5f</span>, <span class="number">0.5f</span>, <span class="number">1.f</span>&#125;, &#123;<span class="number">0.6f</span>, <span class="number">0.5f</span>, <span class="number">0.8f</span>, <span class="number">1.f</span>&#125;&#125;&#125;;</span><br><span class="line"><span class="comment">//定义第一个Bezier曲面外观属性</span></span><br><span class="line">    Appearance app2 = <span class="keyword">new</span> Appearance();</span><br><span class="line">    PolygonAttributes polygona2=<span class="keyword">new</span> PolygonAttributes();</span><br><span class="line">    polygona2.setBackFaceNormalFlip(<span class="keyword">true</span>);</span><br><span class="line">    polygona2.setCullFace(PolygonAttributes.CULL_NONE);</span><br><span class="line">    polygona2.setPolygonMode(PolygonAttributes.POLYGON_LINE);</span><br><span class="line">    app2.setPolygonAttributes(polygona2);</span><br><span class="line">    ColoringAttributes color2=<span class="keyword">new</span> ColoringAttributes();</span><br><span class="line">    color2.setColor(<span class="number">0.8f</span>,<span class="number">0.f</span>,<span class="number">0.f</span>);</span><br><span class="line">    app2.setColoringAttributes(color2);</span><br><span class="line">    Shape3D BezierSurfaceface2=<span class="keyword">new</span> BezierThreeOrderSurfaceface(P2,app2);</span><br><span class="line">    transformgroup.addChild(BezierSurfaceface2);</span><br><span class="line"></span><br><span class="line">    Shape3D BezierSurfaceface1=<span class="keyword">new</span> BezierThreeOrderSurfaceface(P1,app1);</span><br><span class="line">    transformgroup.addChild(BezierSurfaceface1);</span><br><span class="line">    BranchGroupRoot.compile();</span><br><span class="line">    <span class="keyword">return</span> BranchGroupRoot;</span><br><span class="line">&#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">BezierSurfaceMerging</span><span class="params">()</span></span></span><br><span class="line"><span class="function">    </span>&#123;setLayout(<span class="keyword">new</span> BorderLayout());</span><br><span class="line">        GraphicsConfiguration gc = SimpleUniverse.getPreferredConfiguration();</span><br><span class="line">        Canvas3D c=<span class="keyword">new</span> Canvas3D(gc);</span><br><span class="line">        add(<span class="string">&quot;Center&quot;</span>,c);</span><br><span class="line">        BranchGroup BranchGroupScene=createBranchGroupSceneGraph();</span><br><span class="line">        SimpleUniverse u=<span class="keyword">new</span> SimpleUniverse(c);</span><br><span class="line">        u.getViewingPlatform().setNominalViewingTransform();</span><br><span class="line">        u.addBranchGraph(BranchGroupScene);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span></span></span><br><span class="line"><span class="function">    </span>&#123;<span class="keyword">new</span> MainFrame(<span class="keyword">new</span> BezierSurfaceMerging(),<span class="number">400</span>,<span class="number">400</span>); &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="class"><span class="keyword">class</span>  <span class="title">BezierThreeOrderSurfaceface</span> <span class="keyword">extends</span> <span class="title">Shape3D</span></span></span><br><span class="line"><span class="class"></span>&#123;<span class="function"><span class="keyword">public</span> <span class="title">BezierThreeOrderSurfaceface</span><span class="params">(<span class="keyword">float</span>[][][] P,Appearance app)</span></span></span><br><span class="line"><span class="function"></span>&#123;<span class="keyword">int</span> i,j,k;</span><br><span class="line">    <span class="keyword">int</span> n0;<span class="comment">//定义对参数u、v在[0，1]区间的等分点数</span></span><br><span class="line">    <span class="keyword">float</span> division;<span class="comment">//参数u在[0，1]区间的等分线段长度</span></span><br><span class="line">    n0=<span class="number">50</span>;division=<span class="number">1.f</span>/n0;</span><br><span class="line"><span class="comment">//分别定义存放控制顶点x、y、z坐标与第四维坐标的数组</span></span><br><span class="line">    <span class="keyword">float</span>[][] PX=<span class="keyword">new</span> <span class="keyword">float</span>[<span class="number">4</span>][<span class="number">4</span>];</span><br><span class="line">    <span class="keyword">float</span>[][] PY=<span class="keyword">new</span> <span class="keyword">float</span>[<span class="number">4</span>][<span class="number">4</span>];</span><br><span class="line">    <span class="keyword">float</span>[][] PZ=<span class="keyword">new</span> <span class="keyword">float</span>[<span class="number">4</span>][<span class="number">4</span>];</span><br><span class="line">    <span class="keyword">float</span>[][] P4=<span class="keyword">new</span> <span class="keyword">float</span>[<span class="number">4</span>][<span class="number">4</span>];</span><br><span class="line"><span class="comment">//定义系数矩阵及其转置矩阵</span></span><br><span class="line">    <span class="keyword">float</span>[][] M1=&#123;&#123;<span class="number">1.f</span>,<span class="number">0.f</span>,<span class="number">0.f</span>,<span class="number">0.f</span>&#125;,</span><br><span class="line">            &#123;-<span class="number">3.f</span>,<span class="number">3.f</span>,<span class="number">0.f</span>,<span class="number">0.f</span>&#125;,</span><br><span class="line">            &#123;<span class="number">3.f</span>,-<span class="number">6.f</span>,<span class="number">3.f</span>,<span class="number">0.f</span>&#125;,</span><br><span class="line">            &#123;-<span class="number">1.f</span>,<span class="number">3.f</span>,-<span class="number">3.f</span>,<span class="number">1.f</span>&#125;&#125;;</span><br><span class="line">    <span class="keyword">float</span>[][] M2=&#123;&#123;<span class="number">1.f</span>,-<span class="number">3.f</span>,<span class="number">3.f</span>,-<span class="number">1.f</span>&#125;,</span><br><span class="line">            &#123;<span class="number">0.f</span>,<span class="number">3.f</span>,-<span class="number">6.f</span>,<span class="number">3.f</span>&#125;,</span><br><span class="line">            &#123;<span class="number">0.f</span>,<span class="number">0.f</span>,<span class="number">3.f</span>,-<span class="number">3.f</span>&#125;,</span><br><span class="line">            &#123;<span class="number">0.f</span>,<span class="number">0.f</span>,<span class="number">0.f</span>,<span class="number">1.f</span>&#125;&#125;;</span><br><span class="line"><span class="comment">//定义Bezier曲面的u、v参数分割点坐标数组</span></span><br><span class="line">    <span class="keyword">float</span>[][][] UV=<span class="keyword">new</span> <span class="keyword">float</span>[n0+<span class="number">1</span>][n0+<span class="number">1</span>][<span class="number">2</span>];</span><br><span class="line"><span class="comment">//定义U、V矩阵数组</span></span><br><span class="line">    <span class="keyword">float</span>[][] UU=<span class="keyword">new</span> <span class="keyword">float</span>[<span class="number">1</span>][<span class="number">4</span>];</span><br><span class="line">    <span class="keyword">float</span>[][] VV=<span class="keyword">new</span> <span class="keyword">float</span>[<span class="number">4</span>][<span class="number">1</span>];</span><br><span class="line"><span class="comment">//定义存放曲面上点的坐标的数组</span></span><br><span class="line">    <span class="keyword">float</span>[][][] SurfaceXYZ=<span class="keyword">new</span> <span class="keyword">float</span>[n0+<span class="number">1</span>][n0+<span class="number">1</span>][<span class="number">4</span>];</span><br><span class="line">    <span class="keyword">for</span>(i=<span class="number">0</span>;i&lt;n0+<span class="number">1</span>;i++)</span><br><span class="line">        <span class="keyword">for</span>(j=<span class="number">0</span>;j&lt;n0+<span class="number">1</span>;j++)</span><br><span class="line">        &#123; 	UV[i][j][<span class="number">0</span>]=i*division;</span><br><span class="line">            UV[i][j][<span class="number">1</span>]=j*division;   &#125;</span><br><span class="line">    <span class="keyword">for</span>(i=<span class="number">0</span>;i&lt;<span class="number">4</span>;i++)</span><br><span class="line">        <span class="keyword">for</span>(j=<span class="number">0</span>;j&lt;<span class="number">4</span>;j++)</span><br><span class="line">        &#123; PX[i][j]=P[i][j][<span class="number">0</span>];</span><br><span class="line">            PY[i][j]=P[i][j][<span class="number">1</span>];</span><br><span class="line">            PZ[i][j]=P[i][j][<span class="number">2</span>];</span><br><span class="line">            P4[i][j]=P[i][j][<span class="number">3</span>]; &#125;</span><br><span class="line"><span class="comment">//计算曲面上点的坐标值</span></span><br><span class="line">    <span class="keyword">for</span>(i=<span class="number">0</span>;i&lt;n0+<span class="number">1</span>;i++)</span><br><span class="line">        <span class="keyword">for</span>(j=<span class="number">0</span>;j&lt;n0+<span class="number">1</span>;j++)</span><br><span class="line">        &#123;   UU[<span class="number">0</span>][<span class="number">0</span>]=<span class="number">1.f</span>;</span><br><span class="line">            UU[<span class="number">0</span>][<span class="number">1</span>]=UV[i][j][<span class="number">0</span>];</span><br><span class="line">            UU[<span class="number">0</span>][<span class="number">2</span>]=UV[i][j][<span class="number">0</span>]*UV[i][j][<span class="number">0</span>];</span><br><span class="line">            UU[<span class="number">0</span>][<span class="number">3</span>]=UV[i][j][<span class="number">0</span>]*UV[i][j][<span class="number">0</span>]*UV[i][j][<span class="number">0</span>];</span><br><span class="line">            VV[<span class="number">0</span>][<span class="number">0</span>]=<span class="number">1.f</span>;</span><br><span class="line">            VV[<span class="number">1</span>][<span class="number">0</span>]=UV[i][j][<span class="number">1</span>];</span><br><span class="line">            VV[<span class="number">2</span>][<span class="number">0</span>]=UV[i][j][<span class="number">1</span>]*UV[i][j][<span class="number">1</span>];</span><br><span class="line">            VV[<span class="number">3</span>][<span class="number">0</span>]=UV[i][j][<span class="number">1</span>]*UV[i][j][<span class="number">1</span>]*UV[i][j][<span class="number">1</span>];</span><br><span class="line">            <span class="comment">//计算一点的x坐标</span></span><br><span class="line">            matrixm g0=<span class="keyword">new</span> matrixm(<span class="number">1</span>,<span class="number">4</span>,<span class="number">4</span>,UU,M1);</span><br><span class="line">            matrixm g1=<span class="keyword">new</span> matrixm(<span class="number">1</span>,<span class="number">4</span>,<span class="number">4</span>,g0.CC,PX);</span><br><span class="line">            matrixm g2=<span class="keyword">new</span> matrixm(<span class="number">1</span>,<span class="number">4</span>,<span class="number">4</span>,g1.CC,M2);</span><br><span class="line">            matrixm g3=<span class="keyword">new</span> matrixm(<span class="number">1</span>,<span class="number">4</span>,<span class="number">1</span>,g2.CC,VV);</span><br><span class="line">            SurfaceXYZ[i][j][<span class="number">0</span>]=g3.CC[<span class="number">0</span>][<span class="number">0</span>];</span><br><span class="line">            <span class="comment">//计算一点的y坐标</span></span><br><span class="line">            matrixm g4=<span class="keyword">new</span> matrixm(<span class="number">1</span>,<span class="number">4</span>,<span class="number">4</span>,UU,M1);</span><br><span class="line">            matrixm g5=<span class="keyword">new</span> matrixm(<span class="number">1</span>,<span class="number">4</span>,<span class="number">4</span>,g4.CC,PY);</span><br><span class="line">            matrixm g6=<span class="keyword">new</span> matrixm(<span class="number">1</span>,<span class="number">4</span>,<span class="number">4</span>,g5.CC,M2);</span><br><span class="line">            matrixm g7=<span class="keyword">new</span> matrixm(<span class="number">1</span>,<span class="number">4</span>,<span class="number">1</span>,g6.CC,VV);</span><br><span class="line">            SurfaceXYZ[i][j][<span class="number">1</span>]=g7.CC[<span class="number">0</span>][<span class="number">0</span>];</span><br><span class="line">            <span class="comment">//计算一点的z坐标</span></span><br><span class="line">            matrixm g8=<span class="keyword">new</span> matrixm(<span class="number">1</span>,<span class="number">4</span>,<span class="number">4</span>,UU,M1);</span><br><span class="line">            matrixm g9=<span class="keyword">new</span> matrixm(<span class="number">1</span>,<span class="number">4</span>,<span class="number">4</span>,g8.CC,PZ);</span><br><span class="line">            matrixm g10=<span class="keyword">new</span> matrixm(<span class="number">1</span>,<span class="number">4</span>,<span class="number">4</span>,g9.CC,M2);</span><br><span class="line">            matrixm g11=<span class="keyword">new</span> matrixm(<span class="number">1</span>,<span class="number">4</span>,<span class="number">1</span>,g10.CC,VV);</span><br><span class="line">            SurfaceXYZ[i][j][<span class="number">2</span>]=g11.CC[<span class="number">0</span>][<span class="number">0</span>];</span><br><span class="line">            <span class="comment">//计算一点的第4维坐标</span></span><br><span class="line">            matrixm g12=<span class="keyword">new</span> matrixm(<span class="number">1</span>,<span class="number">4</span>,<span class="number">4</span>,UU,M1);</span><br><span class="line">            matrixm g13=<span class="keyword">new</span> matrixm(<span class="number">1</span>,<span class="number">4</span>,<span class="number">4</span>,g12.CC,P4);</span><br><span class="line">            matrixm g14=<span class="keyword">new</span> matrixm(<span class="number">1</span>,<span class="number">4</span>,<span class="number">4</span>,g13.CC,M2);</span><br><span class="line">            matrixm g15=<span class="keyword">new</span> matrixm(<span class="number">1</span>,<span class="number">4</span>,<span class="number">1</span>,g14.CC,VV);</span><br><span class="line">            SurfaceXYZ[i][j][<span class="number">3</span>]=g15.CC[<span class="number">0</span>][<span class="number">0</span>];</span><br><span class="line">            <span class="comment">//将齐次坐标转换为三维坐标系坐标，如果第4维为1，则不用除第4维</span></span><br><span class="line">            SurfaceXYZ[i][j][<span class="number">0</span>]=SurfaceXYZ[i][j][<span class="number">0</span>]/SurfaceXYZ[i][j][<span class="number">3</span>];</span><br><span class="line">            SurfaceXYZ[i][j][<span class="number">1</span>]=SurfaceXYZ[i][j][<span class="number">1</span>]/SurfaceXYZ[i][j][<span class="number">3</span>];</span><br><span class="line">            SurfaceXYZ[i][j][<span class="number">2</span>]=SurfaceXYZ[i][j][<span class="number">2</span>]/SurfaceXYZ[i][j][<span class="number">3</span>];</span><br><span class="line">        &#125;</span><br><span class="line">    QuadArray BezierQuadsurfaceface = <span class="keyword">new</span> QuadArray(n0*n0*<span class="number">4</span>,</span><br><span class="line">            GeometryArray.COORDINATES|GeometryArray.NORMALS);</span><br><span class="line">    <span class="keyword">int</span> c=<span class="number">0</span>;<span class="comment">//以顶点数累加的方式设置顶点的序号</span></span><br><span class="line">    <span class="keyword">for</span>(i=<span class="number">0</span>;i&lt;n0;i++)</span><br><span class="line">    &#123;<span class="keyword">for</span>(j=<span class="number">0</span>;j&lt;n0;j++)</span><br><span class="line">    &#123;<span class="comment">//设置一个平面上的4个点</span></span><br><span class="line">        Point3f A=<span class="keyword">new</span> Point3f(SurfaceXYZ[i][j][<span class="number">0</span>],SurfaceXYZ[i][j][<span class="number">1</span>],</span><br><span class="line">                SurfaceXYZ[i][j][<span class="number">2</span>]);</span><br><span class="line">        Point3f B=<span class="keyword">new</span> Point3f(SurfaceXYZ[i][j+<span class="number">1</span>][<span class="number">0</span>],SurfaceXYZ[i][j+<span class="number">1</span>][<span class="number">1</span>],</span><br><span class="line">                SurfaceXYZ[i][j+<span class="number">1</span>][<span class="number">2</span>]);</span><br><span class="line">        Point3f C=<span class="keyword">new</span> Point3f(SurfaceXYZ[i+<span class="number">1</span>][j+<span class="number">1</span>][<span class="number">0</span>],SurfaceXYZ[i+<span class="number">1</span>][j+<span class="number">1</span>][<span class="number">1</span>],</span><br><span class="line">                SurfaceXYZ[i+<span class="number">1</span>][j+<span class="number">1</span>][<span class="number">2</span>]);</span><br><span class="line">        Point3f D=<span class="keyword">new</span> Point3f(SurfaceXYZ[i+<span class="number">1</span>][j][<span class="number">0</span>],SurfaceXYZ[i+<span class="number">1</span>][j][<span class="number">1</span>],</span><br><span class="line">                SurfaceXYZ[i+<span class="number">1</span>][j][<span class="number">2</span>]);</span><br><span class="line"><span class="comment">//计算由四个点形成的平面的法向量</span></span><br><span class="line">        Vector3f a = <span class="keyword">new</span> Vector3f(A.x - B.x, A.y - B.y, A.z - B.z);</span><br><span class="line">        Vector3f b = <span class="keyword">new</span> Vector3f(C.x - B.x, C.y - B.y, C.z - B.z);</span><br><span class="line">        Vector3f n = <span class="keyword">new</span> Vector3f();</span><br><span class="line">        n.cross(b, a);</span><br><span class="line">        n.normalize();</span><br><span class="line"><span class="comment">//设置点的序号</span></span><br><span class="line">        BezierQuadsurfaceface.setCoordinate(c, A);</span><br><span class="line">        BezierQuadsurfaceface.setCoordinate(c+<span class="number">1</span>, B);</span><br><span class="line">        BezierQuadsurfaceface.setCoordinate(c+<span class="number">2</span>, C);</span><br><span class="line">        BezierQuadsurfaceface.setCoordinate(c+<span class="number">3</span>, D);</span><br><span class="line"><span class="comment">//设置点的法向量</span></span><br><span class="line">        BezierQuadsurfaceface.setNormal(c, n);</span><br><span class="line">        BezierQuadsurfaceface.setNormal(c+<span class="number">1</span>, n);</span><br><span class="line">        BezierQuadsurfaceface.setNormal(c+<span class="number">2</span>, n);</span><br><span class="line">        BezierQuadsurfaceface.setNormal(c+<span class="number">3</span>, n);</span><br><span class="line">        c=c+<span class="number">4</span>;</span><br><span class="line">    &#125;&#125;</span><br><span class="line">    <span class="keyword">this</span>.addGeometry(BezierQuadsurfaceface);</span><br><span class="line">    <span class="keyword">this</span>.setAppearance(app);</span><br><span class="line">&#125;&#125;</span><br><span class="line"><span class="class"><span class="keyword">class</span>  <span class="title">BezierSurfaceControlPoints</span> <span class="keyword">extends</span> <span class="title">Shape3D</span></span></span><br><span class="line"><span class="class"></span>&#123;<span class="function"><span class="keyword">public</span> <span class="title">BezierSurfaceControlPoints</span><span class="params">(<span class="keyword">float</span>[][][] P,Appearance app)</span></span></span><br><span class="line"><span class="function"></span>&#123;<span class="keyword">int</span> i,j,k;</span><br><span class="line">    QuadArray BeziersurfacecontrolPointsNet =<span class="keyword">new</span> QuadArray(<span class="number">3</span>*<span class="number">3</span>*<span class="number">4</span>,</span><br><span class="line">            GeometryArray.COORDINATES|GeometryArray.NORMALS);</span><br><span class="line">    <span class="keyword">int</span> c=<span class="number">0</span>;</span><br><span class="line">    <span class="keyword">for</span>(i=<span class="number">0</span>;i&lt;<span class="number">3</span>;i++)</span><br><span class="line">    &#123;<span class="keyword">for</span>(j=<span class="number">0</span>;j&lt;<span class="number">3</span>;j++)</span><br><span class="line">    &#123;Point3f A=<span class="keyword">new</span> Point3f(P[i][j][<span class="number">0</span>],P[i][j][<span class="number">1</span>],P[i][j][<span class="number">2</span>]);</span><br><span class="line">        Point3f B=<span class="keyword">new</span> Point3f(P[i][j+<span class="number">1</span>][<span class="number">0</span>],P[i][j+<span class="number">1</span>][<span class="number">1</span>],P[i][j+<span class="number">1</span>][<span class="number">2</span>]);</span><br><span class="line">        Point3f C=<span class="keyword">new</span> Point3f(P[i+<span class="number">1</span>][j+<span class="number">1</span>][<span class="number">0</span>],P[i+<span class="number">1</span>][j+<span class="number">1</span>][<span class="number">1</span>],P[i+<span class="number">1</span>][j+<span class="number">1</span>][<span class="number">2</span>]);</span><br><span class="line">        Point3f D=<span class="keyword">new</span> Point3f(P[i+<span class="number">1</span>][j][<span class="number">0</span>],P[i+<span class="number">1</span>][j][<span class="number">1</span>],P[i+<span class="number">1</span>][j][<span class="number">2</span>]);</span><br><span class="line">        Vector3f a = <span class="keyword">new</span> Vector3f(A.x - B.x, A.y - B.y, A.z - B.z);</span><br><span class="line">        Vector3f b = <span class="keyword">new</span> Vector3f(C.x - B.x, C.y - B.y, C.z - B.z);</span><br><span class="line">        Vector3f n = <span class="keyword">new</span> Vector3f();</span><br><span class="line">        n.cross(b, a);</span><br><span class="line">        n.normalize();</span><br><span class="line">        BeziersurfacecontrolPointsNet.setCoordinate(c, A);</span><br><span class="line">        BeziersurfacecontrolPointsNet.setCoordinate(c+<span class="number">1</span>, B);</span><br><span class="line">        BeziersurfacecontrolPointsNet.setCoordinate(c+<span class="number">2</span>, C);</span><br><span class="line">        BeziersurfacecontrolPointsNet.setCoordinate(c+<span class="number">3</span>, D);</span><br><span class="line">        BeziersurfacecontrolPointsNet.setNormal(c, n);</span><br><span class="line">        BeziersurfacecontrolPointsNet.setNormal(c+<span class="number">1</span>, n);</span><br><span class="line">        BeziersurfacecontrolPointsNet.setNormal(c+<span class="number">2</span>, n);</span><br><span class="line">        BeziersurfacecontrolPointsNet.setNormal(c+<span class="number">3</span>, n);</span><br><span class="line">        c=c+<span class="number">4</span>;</span><br><span class="line">    &#125;&#125;</span><br><span class="line">    <span class="keyword">this</span>.addGeometry(BeziersurfacecontrolPointsNet);</span><br><span class="line">    <span class="keyword">this</span>.setAppearance(app);</span><br><span class="line">&#125;&#125;</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">matrixm</span></span></span><br><span class="line"><span class="class"></span>&#123;<span class="keyword">public</span> <span class="keyword">float</span> CC[][]= <span class="keyword">new</span> <span class="keyword">float</span>[<span class="number">4</span>][<span class="number">4</span>];</span><br><span class="line">    <span class="keyword">int</span> ll,mm,kk;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">matrixm</span><span class="params">(<span class="keyword">int</span> mmm, <span class="keyword">int</span> kkk, <span class="keyword">int</span> nnn,<span class="keyword">float</span> a[][],<span class="keyword">float</span> b[][])</span></span></span><br><span class="line"><span class="function">    </span>&#123;<span class="keyword">for</span>(ll=<span class="number">0</span>;ll&lt;mmm;ll++)</span><br><span class="line">        <span class="keyword">for</span>(mm=<span class="number">0</span>;mm&lt;nnn;mm++)&#123;CC[ll][mm]=<span class="number">0.f</span>;&#125;</span><br><span class="line">        <span class="keyword">for</span>(ll=<span class="number">0</span>;ll&lt;mmm;ll++)</span><br><span class="line">            <span class="keyword">for</span>(mm=<span class="number">0</span>;mm&lt;nnn;mm++)</span><br><span class="line">            &#123;<span class="keyword">for</span>(kk=<span class="number">0</span>;kk&lt;kkk;kk++) CC[ll][mm]=CC[ll][mm]+a[ll][kk]*b[kk][mm];&#125;</span><br><span class="line">    &#125;&#125;</span><br><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure>

]]></content>
      <categories>
        <category>Java</category>
      </categories>
      <tags>
        <tag>Java</tag>
        <tag>计算机图形学</tag>
      </tags>
  </entry>
  <entry>
    <title>CSS笔记</title>
    <url>/2021/10/02/Summary%20of%20CSS/</url>
    <content><![CDATA[<p>﻿</p>
<h1 id="知识框架图"><a href="#知识框架图" class="headerlink" title="知识框架图"></a>知识框架图</h1><p><img src="https://img-blog.csdnimg.cn/6ab937ad234c4010b37de412ad364c66.png?x-oss-process=image/watermark,type_ZHJvaWRzYW5zZmFsbGJhY2s,shadow_50,text_Q1NETiBAQ29kZVNsb2dhbg==,size_20,color_FFFFFF,t_70,g_se,x_16#pic_center" alt="在这里插入图片描述"></p>
<h1 id="1-CSS"><a href="#1-CSS" class="headerlink" title="1. CSS"></a>1. CSS</h1><ul>
<li><em>CSS</em> 指的是层叠样式表 (<em>C</em>ascading <em>S</em>tyle <em>S</em>heets)</li>
<li>CSS 描述了如何在屏幕、纸张或其他媒体上显示 HTML 元素</li>
<li>CSS 节省了大量工作，它可以同时控制多张网页的布局</li>
<li>外部样式表存储在 <em>CSS 文件</em>中</li>
</ul>
<p>层叠（级联）样式表。</p>
<h1 id="2-CSS3种导入方法"><a href="#2-CSS3种导入方法" class="headerlink" title="2. CSS3种导入方法"></a>2. CSS3种导入方法</h1><h2 id="行内"><a href="#行内" class="headerlink" title="行内"></a>行内</h2><figure class="highlight"><table><tr><td class="code"><pre><span class="line">&lt;h1 style=&quot;color: aqua&quot;&gt;一级标题&lt;/h1&gt;</span><br></pre></td></tr></table></figure>

<h2 id="内部"><a href="#内部" class="headerlink" title="内部"></a>内部</h2><figure class="highlight"><table><tr><td class="code"><pre><span class="line">&lt;<span class="selector-tag">style</span>&gt;</span><br><span class="line">    <span class="selector-tag">h1</span>&#123;</span><br><span class="line">        <span class="attribute">color</span>:red;</span><br><span class="line">    &#125;</span><br><span class="line">&lt;/style&gt;</span><br></pre></td></tr></table></figure>

<p>位置html文件的<code>head</code>标签内</p>
<h2 id="外部"><a href="#外部" class="headerlink" title="外部"></a>外部</h2><figure class="highlight"><table><tr><td class="code"><pre><span class="line">&lt;link rel=&quot;stylesheet&quot; href=&quot;css/style.css&quot;&gt;</span><br></pre></td></tr></table></figure>

<p>通过以上链接的方面，同时运行html和css文件</p>
<h1 id="3-选择器"><a href="#3-选择器" class="headerlink" title="3. 选择器"></a>3. 选择器</h1><h2 id="3-1-三种基本选择器"><a href="#3-1-三种基本选择器" class="headerlink" title="3.1 *三种基本选择器"></a>3.1 *三种基本选择器</h2><h3 id="标签选择器"><a href="#标签选择器" class="headerlink" title="标签选择器"></a>标签选择器</h3><figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="meta-keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">&quot;en&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">&quot;UTF-8&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>标签选择器<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">style</span>&gt;</span></span><br><span class="line">        h1&#123;</span><br><span class="line"><span class="css">            <span class="selector-tag">color</span>: <span class="selector-tag">rgba</span>(16, 94, 160, 0<span class="selector-class">.27</span>);</span></span><br><span class="line">        &#125;</span><br><span class="line">        p&#123;</span><br><span class="line">            font-size: xxx-large;</span><br><span class="line">        &#125;</span><br><span class="line">    <span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">h1</span>&gt;</span>JavaWeb<span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">h1</span>&gt;</span>CSS<span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">p</span>&gt;</span>during learning of CSS<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p>直接以标签作为<code>style</code>里的名称</p>
<h3 id="类选择器"><a href="#类选择器" class="headerlink" title="类选择器"></a>类选择器</h3><figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="meta-keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">&quot;en&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">&quot;UTF-8&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>类选择器<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!--可复用--&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">style</span>&gt;</span></span><br><span class="line"><span class="css">        <span class="selector-class">.title</span>&#123;</span></span><br><span class="line"><span class="css">            <span class="selector-tag">color</span>: <span class="selector-id">#e05673</span>;</span></span><br><span class="line">        &#125;</span><br><span class="line"><span class="css">        <span class="selector-class">.code</span>&#123;</span></span><br><span class="line">            font-size: 3px;</span><br><span class="line">        &#125;</span><br><span class="line">    <span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">h1</span> <span class="attr">class</span>=<span class="string">&quot;title&quot;</span>&gt;</span>JavaWeb<span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">h1</span> <span class="attr">class</span>=<span class="string">&quot;code&quot;</span>&gt;</span>CSS<span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">p</span> <span class="attr">class</span>=<span class="string">&quot;title&quot;</span>&gt;</span>during learning of CSS<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure>

<ul>
<li>以<code>.类名</code>的形式使用选择器</li>
<li>可在不同标签中复用，呈现相同的样式</li>
<li>较常见</li>
</ul>
<h3 id="id选择器"><a href="#id选择器" class="headerlink" title="id选择器"></a>id选择器</h3><figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="meta-keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">&quot;en&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">&quot;UTF-8&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>id选择器<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!--    不可复用--&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">style</span>&gt;</span></span><br><span class="line"><span class="css">        <span class="selector-id">#buttons-hbox</span>&#123;</span></span><br><span class="line">            color: aquamarine;</span><br><span class="line">        &#125;</span><br><span class="line"><span class="css">        <span class="selector-id">#buttons</span>&#123;</span></span><br><span class="line">            color: chartreuse;</span><br><span class="line">        &#125;</span><br><span class="line">    <span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">h1</span> <span class="attr">id</span>=<span class="string">&quot;buttons-hbox&quot;</span>&gt;</span>JavaWeb<span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">h1</span> <span class="attr">id</span>=<span class="string">&quot;buttons&quot;</span>&gt;</span>CSS<span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">p</span>&gt;</span>during learning of CSS<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure>

<ul>
<li>以<code>#id名</code>的方式使用</li>
<li>具有唯一性</li>
</ul>
<h2 id="3-2-层次选择器"><a href="#3-2-层次选择器" class="headerlink" title="3.2 层次选择器"></a>3.2 层次选择器</h2><h3 id="后代选择器"><a href="#后代选择器" class="headerlink" title="后代选择器"></a>后代选择器</h3><figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="selector-tag">body</span> <span class="selector-tag">p</span>&#123;</span><br><span class="line">            <span class="attribute">color</span>: <span class="number">#e05673</span>;</span><br><span class="line">        &#125;</span><br></pre></td></tr></table></figure>

<p>对body往后所有p结点均生效</p>
<h3 id="子选择器"><a href="#子选择器" class="headerlink" title="子选择器"></a>子选择器</h3><figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="comment">/*子选择器*/</span></span><br><span class="line">        <span class="selector-tag">body</span>&gt;<span class="selector-tag">p</span>&#123;</span><br><span class="line">            <span class="attribute">color</span>: chartreuse;</span><br><span class="line">        &#125;</span><br></pre></td></tr></table></figure>

<p><code>&gt;</code>只对下一代的p有效 </p>
<h3 id="下兄弟选择器"><a href="#下兄弟选择器" class="headerlink" title="下兄弟选择器"></a>下兄弟选择器</h3><figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="selector-class">.active</span> + <span class="selector-tag">p</span>&#123;</span><br><span class="line">            <span class="attribute">color</span>: aquamarine;</span><br><span class="line">        &#125;</span><br></pre></td></tr></table></figure>

<p>只对当前位置下一位有效，不包括现标签</p>
<h3 id="通用选择器"><a href="#通用选择器" class="headerlink" title="通用选择器"></a>通用选择器</h3><figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="selector-class">.active</span>~<span class="selector-tag">p</span>&#123;</span><br><span class="line">            <span class="attribute">color</span>: blueviolet;</span><br><span class="line">        &#125;</span><br></pre></td></tr></table></figure>

<p>对当前位置以下所有对应标签有效，不包括当前</p>
<h2 id="3-3-结构伪类选择器"><a href="#3-3-结构伪类选择器" class="headerlink" title="3.3 结构伪类选择器"></a>3.3 结构伪类选择器</h2><figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="comment">/*定位到父元素，选择第二个子元素，若为p标签才修改颜色*/</span></span><br><span class="line"><span class="selector-tag">p</span><span class="selector-pseudo">:nth-child(2)</span>&#123;</span><br><span class="line">    <span class="attribute">color</span>: red;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>定位到父元素，选择第二个子元素，若为p标签才修改颜色</p>
<figure class="highlight css"><table><tr><td class="code"><pre><span class="line"> <span class="comment">/*定位到父元素 第二个p标签，以标签类型顺序*/</span></span><br><span class="line"><span class="selector-tag">p</span><span class="selector-pseudo">:nth-of-type(2)</span>&#123;</span><br><span class="line">   <span class="attribute">color</span>: blue;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>定位到父元素 第二个p标签，以标签类型顺序</p>
<figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="comment">/*ul的第一个元素*/</span></span><br><span class="line"><span class="selector-tag">ul</span> <span class="selector-tag">li</span><span class="selector-pseudo">:first-child</span> &#123;</span><br><span class="line">   <span class="attribute">background</span>: <span class="number">#e05673</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>第一个孩子</p>
<figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="comment">/*ul的最后一个元素*/</span></span><br><span class="line"><span class="selector-tag">ul</span> <span class="selector-tag">li</span><span class="selector-pseudo">:last-child</span>&#123;</span><br><span class="line">   <span class="attribute">background</span>: yellow;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>最后一个孩子</p>
<figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="comment">/*触发a标签的停等效果*/</span></span><br><span class="line"><span class="selector-tag">a</span><span class="selector-pseudo">:hover</span> &#123;</span><br><span class="line">           <span class="attribute">background</span>: aqua;</span><br><span class="line">       &#125;</span><br></pre></td></tr></table></figure>

<h2 id="3-4-属性选择器"><a href="#3-4-属性选择器" class="headerlink" title="3.4 属性选择器"></a>3.4 属性选择器</h2><h3 id="基础语法"><a href="#基础语法" class="headerlink" title="基础语法"></a>基础语法</h3><table>
<thead>
<tr>
<th align="center">符号</th>
<th>含义</th>
</tr>
</thead>
<tbody><tr>
<td align="center">=</td>
<td>绝对等于</td>
</tr>
<tr>
<td align="center">*=</td>
<td>模糊等于</td>
</tr>
<tr>
<td align="center">^=</td>
<td>以此开关</td>
</tr>
<tr>
<td align="center">$=</td>
<td>以此结尾</td>
</tr>
</tbody></table>
<h3 id="body"><a href="#body" class="headerlink" title="body"></a>body</h3><figure class="highlight"><table><tr><td class="code"><pre><span class="line">&lt;p class=&quot;demo&quot;&gt;</span><br><span class="line">    &lt;a href=&quot;https://www.baidu.com&quot; class=&quot;links item first&quot; id=&quot;first&quot;&gt;1&lt;/a&gt;</span><br><span class="line">    &lt;a href=&quot;&quot; class=&quot;links item active&quot; target=&quot;_blank&quot; title=&quot;test&quot;&gt;2&lt;/a&gt;</span><br><span class="line">    &lt;a href=&quot;image/123.html&quot; class=&quot;links item&quot;&gt;3&lt;/a&gt;</span><br><span class="line">    &lt;a href=&quot;image/123.png&quot; class=&quot;links item&quot;&gt;4&lt;/a&gt;</span><br><span class="line">    &lt;a href=&quot;image/123.jpg&quot; class=&quot;links item&quot;&gt;5&lt;/a&gt;</span><br><span class="line">    &lt;a href=&quot;abc&quot; class=&quot;links item&quot;&gt;6&lt;/a&gt;</span><br><span class="line">    &lt;a href=&quot;/a.pdf&quot; class=&quot;links item&quot;&gt;7&lt;/a&gt;</span><br><span class="line">    &lt;a href=&quot;/abc.pdf&quot; class=&quot;links item&quot;&gt;8&lt;/a&gt;</span><br><span class="line">    &lt;a href=&quot;abc.doc&quot; class=&quot;links item&quot;&gt;9&lt;/a&gt;</span><br><span class="line">    &lt;a href=&quot;abcd.doc&quot; class=&quot;links item last&quot;&gt;10&lt;/a&gt;</span><br><span class="line">&lt;/p&gt;</span><br></pre></td></tr></table></figure>



<h3 id="基础style"><a href="#基础style" class="headerlink" title="基础style"></a>基础style</h3><figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="selector-class">.demo</span> <span class="selector-tag">a</span>&#123;</span><br><span class="line">            <span class="attribute">float</span>: left;</span><br><span class="line">            <span class="attribute">display</span>: block;</span><br><span class="line">            <span class="attribute">height</span>: <span class="number">50px</span>;</span><br><span class="line">            <span class="attribute">width</span>: <span class="number">50px</span>;</span><br><span class="line">            <span class="attribute">border-radius</span>: <span class="number">10px</span>;</span><br><span class="line">            <span class="attribute">background</span>: <span class="number">#2700ff</span>;</span><br><span class="line">            <span class="attribute">text-align</span>: center;</span><br><span class="line">            <span class="attribute">color</span>: gainsboro;</span><br><span class="line">            <span class="attribute">text-decoration</span>: none;</span><br><span class="line">            <span class="attribute">margin-right</span>: <span class="number">5px</span>;</span><br><span class="line">            <span class="attribute">font</span>: bold <span class="number">20px</span>/<span class="number">50px</span> Arial;</span><br><span class="line">        &#125;</span><br></pre></td></tr></table></figure>

<p>设置demo类下所有的标签</p>
<p><img src="https://img-blog.csdnimg.cn/466e1ac005764213875bbb642f29a8db.png#pic_center" alt="在这里插入图片描述"></p>
<h3 id="属性选择"><a href="#属性选择" class="headerlink" title="属性选择"></a>属性选择</h3><figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="comment">/*a标签中有id属性的*/</span></span><br><span class="line"><span class="selector-tag">a</span><span class="selector-attr">[id]</span>&#123;</span><br><span class="line">    <span class="attribute">background</span>: yellow;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>



<h3 id="绝对等于"><a href="#绝对等于" class="headerlink" title="绝对等于"></a>绝对等于</h3><figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="comment">/*a标签中id属性为first*/</span></span><br><span class="line"><span class="selector-tag">a</span><span class="selector-attr">[id=<span class="string">&quot;first&quot;</span>]</span>&#123;</span><br><span class="line">    <span class="attribute">background</span>: yellow;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>



<h3 id="模糊等于"><a href="#模糊等于" class="headerlink" title="模糊等于"></a>模糊等于</h3><figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="comment">/*选中a标签类中有links*/</span></span><br><span class="line"><span class="selector-tag">a</span><span class="selector-attr">[class*=<span class="string">&quot;links&quot;</span>]</span>&#123;</span><br><span class="line">    <span class="attribute">background</span>: greenyellow;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>



<h3 id="以开头"><a href="#以开头" class="headerlink" title="以开头"></a>以开头</h3><figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="comment">/*选中a标签href中以image开头的*/</span></span><br><span class="line"><span class="selector-tag">a</span><span class="selector-attr">[href^=<span class="string">&quot;image&quot;</span>]</span>&#123;</span><br><span class="line">    <span class="attribute">background</span>: rebeccapurple;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>



<h3 id="以结尾"><a href="#以结尾" class="headerlink" title="以结尾"></a>以结尾</h3><figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="comment">/*选中a标签href中以doc结尾的*/</span></span><br><span class="line"><span class="selector-tag">a</span><span class="selector-attr">[href$=<span class="string">&quot;doc&quot;</span>]</span>&#123;</span><br><span class="line">    <span class="attribute">background</span>: aqua;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>



<h1 id="4-美化网页元素"><a href="#4-美化网页元素" class="headerlink" title="4. 美化网页元素"></a>4. 美化网页元素</h1><h2 id="4-1-为什么要美化网页"><a href="#4-1-为什么要美化网页" class="headerlink" title="4.1 为什么要美化网页"></a>4.1 为什么要美化网页</h2><ul>
<li>有效传递页面的信息</li>
<li>美化网页，页面漂亮，才能吸引用户</li>
<li>突显用户页面的主题</li>
<li>提高用户的体验</li>
</ul>
<h2 id="4-2-字体样式"><a href="#4-2-字体样式" class="headerlink" title="4.2 字体样式"></a>4.2 字体样式</h2><h3 id="span关键字"><a href="#span关键字" class="headerlink" title="span关键字"></a>span关键字</h3><figure class="highlight"><table><tr><td class="code"><pre><span class="line">&lt;!<span class="selector-tag">DOCTYPE</span> <span class="selector-tag">html</span>&gt;</span><br><span class="line">&lt;html lang=&quot;en&quot;&gt;</span><br><span class="line">&lt;<span class="selector-tag">head</span>&gt;</span><br><span class="line">    &lt;meta charset=&quot;UTF-8&quot;&gt;</span><br><span class="line">    &lt;title&gt;Title&lt;/title&gt;</span><br><span class="line"></span><br><span class="line">    &lt;<span class="selector-tag">style</span>&gt;</span><br><span class="line">        <span class="selector-tag">span</span>&#123;</span><br><span class="line">            <span class="attribute">font-size</span>: xx-large;</span><br><span class="line">        &#125;</span><br><span class="line">    &lt;/style&gt;</span><br><span class="line">&lt;/head&gt;</span><br><span class="line">&lt;<span class="selector-tag">body</span>&gt;</span><br><span class="line"></span><br><span class="line">&lt;<span class="selector-tag">p</span>&gt;</span><br><span class="line">    &lt;span&gt;Java&lt;/span&gt;学习中</span><br><span class="line">&lt;/p&gt;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">&lt;/body&gt;</span><br><span class="line">&lt;/html&gt;</span><br></pre></td></tr></table></figure>


<p><img src="https://img-blog.csdnimg.cn/b16a4f3f8e7b40e4b470a2dfc43605d0.png#pic_center" alt="在这里插入图片描述"></p>
<h3 id="字体"><a href="#字体" class="headerlink" title="字体"></a>字体</h3><figure class="highlight"><table><tr><td class="code"><pre><span class="line">&lt;<span class="selector-tag">style</span>&gt;</span><br><span class="line">    <span class="selector-tag">body</span>&#123;</span><br><span class="line">        <span class="attribute">font-family</span>: 仿宋_GB2312;</span><br><span class="line">        <span class="attribute">font-size</span>: x-large;</span><br><span class="line">        <span class="attribute">font-weight</span>: bolder;</span><br><span class="line">        <span class="attribute">color</span>: gainsboro;</span><br><span class="line">        <span class="attribute">background</span>: black;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="selector-tag">h1</span>&#123;</span><br><span class="line">        <span class="attribute">font-size</span>: xxx-large;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="selector-class">.title</span>&#123;</span><br><span class="line">        <span class="attribute">font-weight</span>: inherit;</span><br><span class="line">    &#125;</span><br><span class="line">&lt;/style&gt;</span><br></pre></td></tr></table></figure>

<h2 id="4-3-文本样式"><a href="#4-3-文本样式" class="headerlink" title="4.3 文本样式"></a>4.3 文本样式</h2><h3 id="颜色"><a href="#颜色" class="headerlink" title="颜色"></a>颜色</h3><p>color rgb rgba</p>
<figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="selector-tag">h1</span>&#123;</span><br><span class="line">    <span class="attribute">color</span>: <span class="built_in">rgba</span>(<span class="number">0</span>, <span class="number">255</span>,<span class="number">255</span>,<span class="number">0.9</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>



<h3 id="对齐方式"><a href="#对齐方式" class="headerlink" title="对齐方式"></a>对齐方式</h3><figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="selector-tag">h1</span>&#123;</span><br><span class="line">    <span class="attribute">text-align</span>: center;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>



<h3 id="首行缩进"><a href="#首行缩进" class="headerlink" title="首行缩进"></a>首行缩进</h3><figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="selector-class">.p1</span>&#123;</span><br><span class="line">    <span class="attribute">text-indent</span>: <span class="number">2em</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="行高"><a href="#行高" class="headerlink" title="行高"></a>行高</h3><p>line-height = height</p>
<figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="selector-class">.p3</span>&#123;</span><br><span class="line">    <span class="attribute">background</span>: purple;</span><br><span class="line">    <span class="attribute">height</span>: <span class="number">50px</span>;</span><br><span class="line">    <span class="attribute">line-height</span>: <span class="number">50px</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>行高与块的高度一致时，可以实现上下居中 </p>
<h3 id="装饰"><a href="#装饰" class="headerlink" title="装饰"></a>装饰</h3><figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="comment">/*下划线*/</span></span><br><span class="line"><span class="selector-class">.l1</span>&#123;</span><br><span class="line">    <span class="attribute">text-decoration</span>: underline;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">/*中划线*/</span></span><br><span class="line"><span class="selector-class">.l2</span>&#123;</span><br><span class="line">    <span class="attribute">text-decoration</span>: line-through;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/*上划线*/</span></span><br><span class="line"><span class="selector-class">.l3</span>&#123;</span><br><span class="line">    <span class="attribute">text-decoration</span>: overline;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>



<h2 id="4-4-阴影"><a href="#4-4-阴影" class="headerlink" title="4.4 阴影"></a>4.4 阴影</h2><figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="comment">/*text-shadow: 阴影颜色 水平偏移 垂直偏移 阴影半径*/</span></span><br><span class="line"><span class="selector-id">#price</span>&#123;</span><br><span class="line">    <span class="attribute">text-shadow</span>: <span class="number">#e05673</span> <span class="number">2px</span> <span class="number">5px</span> <span class="number">5px</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>



<h2 id="4-5-超链接伪类"><a href="#4-5-超链接伪类" class="headerlink" title="4.5 超链接伪类"></a>4.5 超链接伪类</h2><p><code>a:hover</code> 重点记忆使用</p>
<figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="comment">/*鼠标悬浮状态*/</span></span><br><span class="line"><span class="selector-tag">a</span><span class="selector-pseudo">:hover</span>&#123;</span><br><span class="line">    <span class="attribute">color</span>: aqua;</span><br><span class="line">    <span class="attribute">font-size</span>: xxx-large;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">/*鼠标点击*/</span></span><br><span class="line"><span class="selector-tag">a</span><span class="selector-pseudo">:active</span>&#123;</span><br><span class="line">    <span class="attribute">color</span>: greenyellow;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>



<h2 id="4-6-列表"><a href="#4-6-列表" class="headerlink" title="4.6 列表"></a>4.6 列表</h2><figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">&quot;nav&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">h2</span> <span class="attr">class</span>=<span class="string">&quot;title&quot;</span>&gt;</span>全部商品分类<span class="tag">&lt;/<span class="name">h2</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">ul</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">li</span>&gt;</span><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">&quot;#&quot;</span>&gt;</span>图书<span class="tag">&lt;/<span class="name">a</span>&gt;</span><span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">li</span>&gt;</span><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">&quot;#&quot;</span>&gt;</span>家用电器<span class="tag">&lt;/<span class="name">a</span>&gt;</span><span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">li</span>&gt;</span><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">&quot;#&quot;</span>&gt;</span>电脑<span class="tag">&lt;/<span class="name">a</span>&gt;</span><span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">li</span>&gt;</span><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">&quot;#&quot;</span>&gt;</span>家居<span class="tag">&lt;/<span class="name">a</span>&gt;</span><span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">li</span>&gt;</span><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">&quot;#&quot;</span>&gt;</span>服饰鞋帽<span class="tag">&lt;/<span class="name">a</span>&gt;</span><span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">li</span>&gt;</span><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">&quot;#&quot;</span>&gt;</span>彩票<span class="tag">&lt;/<span class="name">a</span>&gt;</span><span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">li</span>&gt;</span><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">&quot;#&quot;</span>&gt;</span>食品饮料<span class="tag">&lt;/<span class="name">a</span>&gt;</span><span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">ul</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure>



<figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="selector-tag">ul</span> <span class="selector-tag">li</span>&#123;</span><br><span class="line">    <span class="attribute">list-style</span>: none; <span class="comment">/*去除圆点*/</span></span><br><span class="line">    <span class="attribute">height</span>: <span class="number">30px</span>;</span><br><span class="line">    <span class="attribute">text-indent</span>: <span class="number">1em</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>



<h2 id="4-7-背景"><a href="#4-7-背景" class="headerlink" title="4.7 背景"></a>4.7 背景</h2><figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="comment">/*颜色，图片，图片位置，平铺方式*/</span></span><br><span class="line"><span class="selector-tag">background</span>: <span class="selector-tag">red</span> <span class="selector-tag">url</span>(&quot;&quot;) 270<span class="selector-tag">px</span> 10<span class="selector-tag">px</span> <span class="selector-tag">no-repeat</span>;</span><br></pre></td></tr></table></figure>



<figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="selector-tag">background-image</span>: <span class="selector-tag">url</span>(&quot;&quot;);</span><br><span class="line">background-repeat: repeat-x/repeat-y/no-repeat;</span><br><span class="line"><span class="selector-tag">background-position</span>: 200<span class="selector-tag">px</span> 20<span class="selector-tag">px</span>;</span><br></pre></td></tr></table></figure>

<h2 id="4-8-渐变"><a href="#4-8-渐变" class="headerlink" title="4.8 渐变"></a>4.8 渐变</h2><p>[<a href="https://www.grabient.com/]">https://www.grabient.com/]</a>: </p>
<h3 id="圆角边框"><a href="#圆角边框" class="headerlink" title="圆角边框"></a>圆角边框</h3><figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="selector-tag">div</span>&#123;</span><br><span class="line">    <span class="attribute">width</span>: <span class="number">100px</span>;</span><br><span class="line">    <span class="attribute">height</span>: <span class="number">100px</span>;</span><br><span class="line">    <span class="attribute">border</span>: <span class="number">10px</span> solid red;</span><br><span class="line">    <span class="attribute">border-radius</span>: <span class="number">50px</span>; <span class="comment">/*圆角*/</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p><code>border-radius</code>可修改矩阵角，当值为长宽的一半时，可呈现圆形</p>
<h3 id="盒子阴影"><a href="#盒子阴影" class="headerlink" title="盒子阴影"></a>盒子阴影</h3><figure class="highlight"><table><tr><td class="code"><pre><span class="line"><span class="comment">/*居中 margin: 0 auto*/</span></span><br><span class="line">&lt;div style=&quot;width: 800px; display: block; text-align: center&quot;&gt;</span><br><span class="line">    &lt;div style=&quot;margin: 0 auto&quot;&gt;</span><br><span class="line">        &lt;img src=&quot;images/1.bmp&quot; alt=&quot;&quot;&gt;</span><br><span class="line">    &lt;/div&gt;</span><br><span class="line">&lt;/div&gt;</span><br></pre></td></tr></table></figure>



<h1 id="5-浮动"><a href="#5-浮动" class="headerlink" title="5. 浮动"></a>5. 浮动</h1><h2 id="5-1-display"><a href="#5-1-display" class="headerlink" title="5.1 display"></a>5.1 display</h2><p>标准文档流</p>
<figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="comment">/*block 块元素</span></span><br><span class="line"><span class="comment">  inline 行内元素</span></span><br><span class="line"><span class="comment">  inline-block 块元素 可以内联 在同一行*/</span></span><br><span class="line"><span class="selector-tag">div</span>&#123;</span><br><span class="line">    <span class="attribute">width</span>: <span class="number">100px</span>;</span><br><span class="line">    <span class="attribute">height</span>: <span class="number">100px</span>;</span><br><span class="line">    <span class="attribute">border</span>: <span class="number">1px</span> solid red;</span><br><span class="line">    <span class="attribute">display</span>: inline;</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-tag">span</span>&#123;</span><br><span class="line">    <span class="attribute">width</span>: <span class="number">100px</span>;</span><br><span class="line">    <span class="attribute">height</span>: <span class="number">100px</span>;</span><br><span class="line">    <span class="attribute">border</span>: <span class="number">1px</span> solid red;</span><br><span class="line">    <span class="attribute">display</span>: inline-block;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>



<h2 id="5-2-float"><a href="#5-2-float" class="headerlink" title="5.2 float"></a>5.2 float</h2><figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="selector-tag">div</span>&#123;</span><br><span class="line">	<span class="attribute">float</span>:right;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>



<h2 id="5-3-clear"><a href="#5-3-clear" class="headerlink" title="5.3 clear"></a>5.3 clear</h2><figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="selector-tag">clear</span>: <span class="selector-tag">right</span>; <span class="comment">/*右侧不允许有浮动*/</span></span><br><span class="line"></span><br><span class="line"><span class="selector-tag">clear</span><span class="selector-pseudo">:left</span>;  <span class="comment">/*左侧不允许有浮动*/</span></span><br><span class="line"></span><br><span class="line"><span class="selector-tag">clear</span>: <span class="selector-tag">both</span>; <span class="comment">/*两侧不允许有浮动*/</span></span><br><span class="line"></span><br><span class="line"><span class="selector-tag">clear</span>: <span class="selector-tag">none</span>; </span><br></pre></td></tr></table></figure>



<h2 id="5-4-边框塌陷解决方案"><a href="#5-4-边框塌陷解决方案" class="headerlink" title="5.4 边框塌陷解决方案"></a>5.4 边框塌陷解决方案</h2><figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="meta-keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">&quot;en&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">&quot;UTF-8&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>Title<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">link</span> <span class="attr">rel</span>=<span class="string">&quot;stylesheet&quot;</span> <span class="attr">href</span>=<span class="string">&quot;css/style.css&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">&quot;father&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;layer01&quot;</span>&gt;</span><span class="tag">&lt;<span class="name">img</span> <span class="attr">src</span>=<span class="string">&quot;images/1.bmp&quot;</span> <span class="attr">alt</span>=<span class="string">&quot;&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;layer02&quot;</span>&gt;</span><span class="tag">&lt;<span class="name">img</span> <span class="attr">src</span>=<span class="string">&quot;images/photo1.jpg&quot;</span> <span class="attr">alt</span>=<span class="string">&quot;&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;layer03&quot;</span>&gt;</span><span class="tag">&lt;<span class="name">img</span> <span class="attr">src</span>=<span class="string">&quot;images/QQ图片20210419222850.jpg&quot;</span> <span class="attr">alt</span>=<span class="string">&quot;&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;layer04&quot;</span>&gt;</span></span><br><span class="line">        指一个人发出的笑声，高兴开心欢乐时的状态，抒发快乐的心情，表现一个人很开心快乐的状态。也指人通常用来开玩笑。人的一种笑声，表示高兴、开心、愉悦，也表示兴奋。</span><br><span class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure>



<figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="selector-tag">div</span>&#123;</span><br><span class="line">    <span class="attribute">margin</span>: <span class="number">10px</span>;</span><br><span class="line">    <span class="attribute">padding</span>: <span class="number">5px</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-id">#father</span>&#123;</span><br><span class="line">    <span class="attribute">border</span>: <span class="number">1px</span> <span class="number">#000</span> solid;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-id">#father</span><span class="selector-pseudo">:after</span>&#123;  <span class="comment">/*解决边框塌陷问题*/</span></span><br><span class="line">    <span class="attribute">content</span>: <span class="string">&#x27;&#x27;</span>;</span><br><span class="line">    <span class="attribute">display</span>: block;</span><br><span class="line">    <span class="attribute">clear</span>: both;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-class">.layer01</span>&#123;</span><br><span class="line">    <span class="attribute">border</span>: <span class="number">1px</span> <span class="number">#F00</span> dashed;</span><br><span class="line">    <span class="attribute">display</span>: inline-block;</span><br><span class="line">    <span class="attribute">float</span>: left;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-class">.layer02</span>&#123;</span><br><span class="line">    <span class="attribute">border</span>: <span class="number">1px</span> <span class="number">#00F</span> dashed;</span><br><span class="line">    <span class="attribute">display</span>: inline-block;</span><br><span class="line">    <span class="attribute">float</span>: left;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-class">.layer03</span>&#123;</span><br><span class="line">    <span class="attribute">border</span>: <span class="number">1px</span> <span class="number">#060</span> dashed;</span><br><span class="line">    <span class="attribute">display</span>: inline-block;</span><br><span class="line">    <span class="attribute">float</span>: right;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">clear: right;</span></span><br><span class="line"><span class="comment">clear: left;</span></span><br><span class="line"><span class="comment">clear: both;</span></span><br><span class="line"><span class="comment">clear: none;</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"></span><br><span class="line"><span class="selector-class">.layer04</span>&#123;</span><br><span class="line">    <span class="attribute">border</span>: <span class="number">1px</span> <span class="number">#666</span> dashed;</span><br><span class="line">    <span class="attribute">font-size</span>: <span class="number">12px</span>;</span><br><span class="line">    <span class="attribute">line-height</span>: <span class="number">23px</span>;</span><br><span class="line">    <span class="attribute">display</span>: inline-block;</span><br><span class="line">    <span class="attribute">float</span>: right;</span><br><span class="line">    <span class="attribute">clear</span>: none;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure>

<h3 id="核心语句"><a href="#核心语句" class="headerlink" title="核心语句"></a>核心语句</h3><figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="selector-id">#father</span><span class="selector-pseudo">:after</span>&#123;</span><br><span class="line">    <span class="attribute">content</span>: <span class="string">&#x27;&#x27;</span>;</span><br><span class="line">    <span class="attribute">display</span>: block;</span><br><span class="line">    <span class="attribute">clear</span>: both;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>



<h1 id="6-定位"><a href="#6-定位" class="headerlink" title="6. 定位"></a>6. 定位</h1><h2 id="6-1-相对定位"><a href="#6-1-相对定位" class="headerlink" title="6.1 相对定位"></a>6.1 相对定位</h2><figure class="highlight"><table><tr><td class="code"><pre><span class="line">&lt;!<span class="selector-tag">DOCTYPE</span> <span class="selector-tag">html</span>&gt;</span><br><span class="line">&lt;html lang=&quot;en&quot;&gt;</span><br><span class="line">&lt;<span class="selector-tag">head</span>&gt;</span><br><span class="line">    &lt;meta charset=&quot;UTF-8&quot;&gt;</span><br><span class="line">    &lt;title&gt;Title&lt;/title&gt;</span><br><span class="line">    &lt;<span class="selector-tag">style</span>&gt;</span><br><span class="line">        <span class="selector-tag">div</span>&#123;</span><br><span class="line">            <span class="attribute">margin</span>: <span class="number">10px</span>;</span><br><span class="line">            <span class="attribute">padding</span>: <span class="number">5px</span>;</span><br><span class="line">            <span class="attribute">font-size</span>: <span class="number">12px</span>;</span><br><span class="line">            <span class="attribute">line-height</span>: <span class="number">25px</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="selector-id">#father</span>&#123;</span><br><span class="line">            <span class="attribute">border</span>: <span class="number">1px</span> solid <span class="number">#e05673</span>;</span><br><span class="line">            <span class="attribute">padding</span>: <span class="number">0</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="selector-id">#first</span>&#123;</span><br><span class="line">            <span class="attribute">border</span>: <span class="number">1px</span> solid <span class="number">#209bcb</span>;</span><br><span class="line">            <span class="attribute">background-color</span>: <span class="number">#209b99</span>;</span><br><span class="line">            <span class="attribute">position</span>: relative;</span><br><span class="line">            <span class="attribute">top</span>: -<span class="number">10px</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="selector-id">#second</span>&#123;</span><br><span class="line">            <span class="attribute">border</span>: <span class="number">1px</span> solid <span class="number">#490761</span>;</span><br><span class="line">            <span class="attribute">background-color</span>: <span class="number">#490799</span>;</span><br><span class="line">            <span class="attribute">position</span>: relative;</span><br><span class="line">            <span class="attribute">left</span>: <span class="number">10px</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="selector-id">#third</span>&#123;</span><br><span class="line">            <span class="attribute">border</span>: <span class="number">1px</span> solid <span class="number">#bfa008</span>;</span><br><span class="line">            <span class="attribute">background-color</span>: <span class="number">#bfa099</span>;</span><br><span class="line">            <span class="attribute">position</span>: relative;</span><br><span class="line">            <span class="attribute">right</span>: -<span class="number">10px</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &lt;/style&gt;</span><br><span class="line"></span><br><span class="line">&lt;/head&gt;</span><br><span class="line">&lt;<span class="selector-tag">body</span>&gt;</span><br><span class="line"></span><br><span class="line">&lt;div id=&quot;father&quot;&gt;</span><br><span class="line">    &lt;div id=&quot;first&quot;&gt;第一个盒子&lt;/div&gt;</span><br><span class="line">    &lt;div id=&quot;second&quot;&gt;第二个盒子&lt;/div&gt;</span><br><span class="line">    &lt;div id=&quot;third&quot;&gt;第三个盒子&lt;/div&gt;</span><br><span class="line">&lt;/div&gt;</span><br><span class="line"></span><br><span class="line">&lt;/body&gt;</span><br><span class="line">&lt;/html&gt;</span><br></pre></td></tr></table></figure>

<h3 id="关键代码"><a href="#关键代码" class="headerlink" title="关键代码"></a>关键代码</h3><figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="selector-id">#third</span>&#123;</span><br><span class="line">    <span class="attribute">border</span>: <span class="number">1px</span> solid <span class="number">#bfa008</span>;</span><br><span class="line">    <span class="attribute">background-color</span>: <span class="number">#bfa099</span>;</span><br><span class="line">    <span class="attribute">position</span>: relative;</span><br><span class="line">    <span class="attribute">right</span>: -<span class="number">10px</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p><code>position: relative</code> 相对定位，不会超出标准文件流，边框不会被破坏</p>
<p><code>top</code> 为负时，向上移动</p>
<p><code>bottom</code> 为负时，向下移动</p>
<p><code>left</code> 为负时，向左移动</p>
<p><code>right</code> 为负时，向右移动</p>
<h3 id="方块定位练习"><a href="#方块定位练习" class="headerlink" title="方块定位练习"></a>方块定位练习</h3><p><img src="https://img-blog.csdnimg.cn/409859799f06415fbc79810394085a85.png?x-oss-process=image/watermark,type_ZHJvaWRzYW5zZmFsbGJhY2s,shadow_50,text_Q1NETiBAQ29kZVNsb2dhbg==,size_18,color_FFFFFF,t_70,g_se,x_16#pic_center" alt="在这里插入图片描述"></p>
<figure class="highlight"><table><tr><td class="code"><pre><span class="line">&lt;!<span class="selector-tag">DOCTYPE</span> <span class="selector-tag">html</span>&gt;</span><br><span class="line">&lt;html lang=&quot;en&quot;&gt;</span><br><span class="line">&lt;<span class="selector-tag">head</span>&gt;</span><br><span class="line">    &lt;meta charset=&quot;UTF-8&quot;&gt;</span><br><span class="line">    &lt;title&gt;Title&lt;/title&gt;</span><br><span class="line">    &lt;<span class="selector-tag">style</span>&gt;</span><br><span class="line">        <span class="selector-class">.box</span>&#123;</span><br><span class="line">            <span class="attribute">width</span>: <span class="number">300px</span>;</span><br><span class="line">            <span class="attribute">height</span>: <span class="number">300px</span>;</span><br><span class="line">            <span class="attribute">border</span>: <span class="number">2px</span> solid red; <span class="comment">/*边框粗细颜色*/</span></span><br><span class="line">            <span class="attribute">padding</span>: <span class="number">10px</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="selector-tag">a</span>&#123;</span><br><span class="line">            <span class="attribute">text-decoration</span>: none; <span class="comment">/*取消下划线*/</span></span><br><span class="line">            <span class="attribute">background</span>: hotpink;</span><br><span class="line">            <span class="attribute">width</span>: <span class="number">100px</span>;</span><br><span class="line">            <span class="attribute">height</span>: <span class="number">100px</span>;</span><br><span class="line">            <span class="attribute">line-height</span>: <span class="number">100px</span>; <span class="comment">/*文字上下居中*/</span></span><br><span class="line">            <span class="attribute">text-align</span>: center; <span class="comment">/*文字左右居中*/</span></span><br><span class="line">            <span class="attribute">display</span>: block; <span class="comment">/*成块*/</span></span><br><span class="line">        &#125;</span><br><span class="line">        <span class="selector-tag">a</span><span class="selector-pseudo">:hover</span>&#123;</span><br><span class="line">            <span class="attribute">background-color</span>: dodgerblue;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="selector-class">.second</span>, <span class="selector-class">.four</span>&#123;</span><br><span class="line">            <span class="attribute">position</span>: relative; <span class="comment">/*相对移动*/</span></span><br><span class="line">            <span class="attribute">right</span>: -<span class="number">200px</span>;</span><br><span class="line">            <span class="attribute">top</span>: -<span class="number">100px</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="selector-class">.five</span>&#123;</span><br><span class="line">            <span class="attribute">position</span>: relative;</span><br><span class="line">            <span class="attribute">right</span>: -<span class="number">100px</span>;</span><br><span class="line">            <span class="attribute">top</span>: -<span class="number">300px</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &lt;/style&gt;</span><br><span class="line"></span><br><span class="line">&lt;/head&gt;</span><br><span class="line">&lt;<span class="selector-tag">body</span>&gt;</span><br><span class="line"></span><br><span class="line">&lt;div class=&quot;box&quot;&gt;</span><br><span class="line">    &lt;a href=&quot;&quot; class=&quot;first&quot;&gt;链接1&lt;/a&gt;</span><br><span class="line">    &lt;a href=&quot;&quot; class=&quot;second&quot;&gt;链接2&lt;/a&gt;</span><br><span class="line">    &lt;a href=&quot;&quot; class=&quot;third&quot;&gt;链接3&lt;/a&gt;</span><br><span class="line">    &lt;a href=&quot;&quot; class=&quot;four&quot;&gt;链接4&lt;/a&gt;</span><br><span class="line">    &lt;a href=&quot;&quot; class=&quot;five&quot;&gt;链接5&lt;/a&gt;</span><br><span class="line">&lt;/div&gt;</span><br><span class="line"></span><br><span class="line">&lt;/body&gt;</span><br><span class="line">&lt;/html&gt;</span><br></pre></td></tr></table></figure>







<h2 id="6-2-绝对定位"><a href="#6-2-绝对定位" class="headerlink" title="6.2 绝对定位"></a>6.2 绝对定位</h2><ul>
<li>不会保留原来的位置</li>
<li>没有父级元素的前提下，根据浏览器定位</li>
<li>有父级元素的限制下，参照父级元素定位</li>
<li>在父级元素的范围内移动</li>
</ul>
<p>总结：相对于父级及浏览器的位置，进行指定的偏移，它不在标准文档流中，原来的位置不会被保留</p>
<figure class="highlight"><table><tr><td class="code"><pre><span class="line">&lt;!<span class="selector-tag">DOCTYPE</span> <span class="selector-tag">html</span>&gt;</span><br><span class="line">&lt;html lang=&quot;en&quot;&gt;</span><br><span class="line">&lt;<span class="selector-tag">head</span>&gt;</span><br><span class="line">    &lt;meta charset=&quot;UTF-8&quot;&gt;</span><br><span class="line">    &lt;title&gt;Title&lt;/title&gt;</span><br><span class="line">    &lt;<span class="selector-tag">style</span>&gt;</span><br><span class="line">        <span class="selector-tag">div</span>&#123;</span><br><span class="line">            <span class="attribute">margin</span>: <span class="number">10px</span>;</span><br><span class="line">            <span class="attribute">padding</span>: <span class="number">5px</span>;</span><br><span class="line">            <span class="attribute">font-size</span>: <span class="number">12px</span>;</span><br><span class="line">            <span class="attribute">line-height</span>: <span class="number">25px</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="selector-id">#father</span>&#123;</span><br><span class="line">            <span class="attribute">border</span>: <span class="number">1px</span> solid <span class="number">#e05673</span>;</span><br><span class="line">            <span class="attribute">padding</span>: <span class="number">0</span>;</span><br><span class="line">            <span class="attribute">position</span>: relative;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="selector-id">#first</span>&#123;</span><br><span class="line">            <span class="attribute">border</span>: <span class="number">1px</span> solid <span class="number">#209bcb</span>;</span><br><span class="line">            <span class="attribute">background-color</span>: <span class="number">#209b99</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="selector-id">#second</span>&#123;</span><br><span class="line">            <span class="attribute">border</span>: <span class="number">1px</span> solid <span class="number">#490761</span>;</span><br><span class="line">            <span class="attribute">background-color</span>: <span class="number">#490799</span>;</span><br><span class="line">            <span class="attribute">position</span>: absolute;</span><br><span class="line">            <span class="attribute">top</span>: -<span class="number">10px</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="selector-id">#third</span>&#123;</span><br><span class="line">            <span class="attribute">border</span>: <span class="number">1px</span> solid <span class="number">#bfa008</span>;</span><br><span class="line">            <span class="attribute">background-color</span>: <span class="number">#bfa099</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &lt;/style&gt;</span><br><span class="line"></span><br><span class="line">&lt;/head&gt;</span><br><span class="line">&lt;<span class="selector-tag">body</span>&gt;</span><br><span class="line"></span><br><span class="line">&lt;div id=&quot;father&quot;&gt;</span><br><span class="line">    &lt;div id=&quot;first&quot;&gt;第一个盒子&lt;/div&gt;</span><br><span class="line">    &lt;div id=&quot;second&quot;&gt;第二个盒子&lt;/div&gt;</span><br><span class="line">    &lt;div id=&quot;third&quot;&gt;第三个盒子&lt;/div&gt;</span><br><span class="line">&lt;/div&gt;</span><br><span class="line"></span><br><span class="line">&lt;/body&gt;</span><br><span class="line">&lt;/html&gt;</span><br></pre></td></tr></table></figure>

<h3 id="无父级元素"><a href="#无父级元素" class="headerlink" title="无父级元素"></a>无父级元素</h3><p><img src="https://img-blog.csdnimg.cn/6f0d2b48687d467187230d7191da7e5e.png?x-oss-process=image/watermark,type_ZHJvaWRzYW5zZmFsbGJhY2s,shadow_50,text_Q1NETiBAQ29kZVNsb2dhbg==,size_20,color_FFFFFF,t_70,g_se,x_16#pic_center" alt="在这里插入图片描述"></p>
<h3 id="存在父级元素"><a href="#存在父级元素" class="headerlink" title="存在父级元素"></a>存在父级元素</h3><p><img src="https://img-blog.csdnimg.cn/febe405c29204008b1ab06306eecf802.png?x-oss-process=image/watermark,type_ZHJvaWRzYW5zZmFsbGJhY2s,shadow_50,text_Q1NETiBAQ29kZVNsb2dhbg==,size_20,color_FFFFFF,t_70,g_se,x_16#pic_center" alt="在这里插入图片描述"></p>
<h2 id="6-3-固定定位"><a href="#6-3-固定定位" class="headerlink" title="6.3 固定定位"></a>6.3 固定定位</h2><figure class="highlight"><table><tr><td class="code"><pre><span class="line">&lt;!<span class="selector-tag">DOCTYPE</span> <span class="selector-tag">html</span>&gt;</span><br><span class="line">&lt;html lang=&quot;en&quot;&gt;</span><br><span class="line">&lt;<span class="selector-tag">head</span>&gt;</span><br><span class="line">    &lt;meta charset=&quot;UTF-8&quot;&gt;</span><br><span class="line">    &lt;title&gt;Title&lt;/title&gt;</span><br><span class="line">    &lt;<span class="selector-tag">style</span>&gt;</span><br><span class="line">        <span class="selector-tag">body</span>&#123;</span><br><span class="line">            <span class="attribute">height</span>: <span class="number">1000px</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="selector-tag">div</span><span class="selector-pseudo">:nth-of-type(1)</span>&#123;</span><br><span class="line">            <span class="attribute">width</span>: <span class="number">100px</span>;</span><br><span class="line">            <span class="attribute">height</span>: <span class="number">100px</span>;</span><br><span class="line">            <span class="attribute">background-color</span>: red;</span><br><span class="line">            <span class="attribute">position</span>: absolute;</span><br><span class="line">            <span class="attribute">right</span>: <span class="number">0</span>;</span><br><span class="line">            <span class="attribute">bottom</span>: <span class="number">0</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="selector-tag">div</span><span class="selector-pseudo">:nth-of-type(2)</span>&#123;</span><br><span class="line">            <span class="attribute">width</span>: <span class="number">50px</span>;</span><br><span class="line">            <span class="attribute">height</span>: <span class="number">50px</span>;</span><br><span class="line">            <span class="attribute">background-color</span>: yellow;</span><br><span class="line">            <span class="attribute">position</span>: fixed;</span><br><span class="line">            <span class="attribute">right</span>: <span class="number">0</span>;</span><br><span class="line">            <span class="attribute">bottom</span>: <span class="number">0</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &lt;/style&gt;</span><br><span class="line">&lt;/head&gt;</span><br><span class="line">&lt;<span class="selector-tag">body</span>&gt;</span><br><span class="line"></span><br><span class="line">&lt;div&gt;div1&lt;/div&gt;</span><br><span class="line">&lt;div&gt;div2&lt;/div&gt;</span><br><span class="line"></span><br><span class="line">&lt;/body&gt;</span><br><span class="line">&lt;/html&gt;</span><br></pre></td></tr></table></figure>

<p><code>position: fixed;</code>固定位置，不会随着浏览器的滑动而发生改变</p>
<h2 id="6-4-z-index"><a href="#6-4-z-index" class="headerlink" title="6.4 z-index"></a>6.4 z-index</h2><p><code>z-index</code>决定图层的显示级别</p>
<p><code>opacity: 0.5;</code>透明度</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="meta-keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">&quot;en&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">&quot;UTF-8&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>zindex<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">link</span> <span class="attr">rel</span>=<span class="string">&quot;stylesheet&quot;</span> <span class="attr">href</span>=<span class="string">&quot;css/style.css&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">&quot;content&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">ul</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">li</span>&gt;</span><span class="tag">&lt;<span class="name">img</span> <span class="attr">src</span>=<span class="string">&quot;images/img.png&quot;</span> <span class="attr">alt</span>=<span class="string">&quot;&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">li</span> <span class="attr">class</span>=<span class="string">&quot;tipText&quot;</span>&gt;</span>JDBC<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">li</span> <span class="attr">class</span>=<span class="string">&quot;tipBg&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">li</span>&gt;</span>2021-10-02<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">li</span>&gt;</span>2栋404<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">ul</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure>



<figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="selector-id">#content</span>&#123;</span><br><span class="line">    <span class="attribute">padding</span>: <span class="number">0px</span>;</span><br><span class="line">    <span class="attribute">margin</span>: <span class="number">0px</span>;</span><br><span class="line">    <span class="attribute">width</span>: <span class="number">160px</span>;</span><br><span class="line">    <span class="attribute">overflow</span>: hidden;</span><br><span class="line">    <span class="attribute">font-size</span>: <span class="number">12px</span>;</span><br><span class="line">    <span class="attribute">line-height</span>: <span class="number">25px</span>;</span><br><span class="line">    <span class="attribute">border</span>: <span class="number">1px</span> solid black;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-tag">ul</span>, <span class="selector-tag">li</span>&#123;</span><br><span class="line">    <span class="attribute">list-style</span>: none;</span><br><span class="line">    <span class="attribute">padding</span>: <span class="number">0px</span>;</span><br><span class="line">    <span class="attribute">margin</span>: <span class="number">0px</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-id">#content</span> <span class="selector-tag">ul</span>&#123;</span><br><span class="line">    <span class="attribute">position</span>: relative;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-class">.tipText</span>&#123;</span><br><span class="line">    <span class="attribute">position</span>: absolute;</span><br><span class="line">    <span class="attribute">top</span>: <span class="number">80px</span>;</span><br><span class="line">    <span class="attribute">color</span>: white;</span><br><span class="line">    <span class="attribute">z-index</span>: <span class="number">999</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-class">.tipBg</span> &#123;</span><br><span class="line">    <span class="attribute">background</span>: black;</span><br><span class="line">    <span class="attribute">width</span>: <span class="number">160px</span>;</span><br><span class="line">    <span class="attribute">height</span>: <span class="number">18px</span>;</span><br><span class="line">    <span class="attribute">position</span>: absolute;</span><br><span class="line">    <span class="attribute">top</span>: <span class="number">82px</span>;</span><br><span class="line">    <span class="attribute">opacity</span>: <span class="number">0.5</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h1 id="参考资料"><a href="#参考资料" class="headerlink" title="参考资料"></a>参考资料</h1><p><a href="https://www.bilibili.com/video/BV1YJ411a7dy?p=1">【狂神说Java】CSS3最新教程快速入门通俗易懂</a></p>
]]></content>
      <categories>
        <category>web</category>
      </categories>
      <tags>
        <tag>web</tag>
      </tags>
  </entry>
  <entry>
    <title>天梯笔记</title>
    <url>/2021/03/04/%E5%A4%A9%E6%A2%AF%E7%AC%94%E8%AE%B0/</url>
    <content><![CDATA[<p>本节文章对刷天梯赛的过程作一些记录，主要是一些题目自己的理解。</p>
<p>涉及到一些数据，熟悉其基本原理，并加以例题帮助理解。</p>
<p>Nothing is unreachable ! to me</p>
<a id="more"></a>

<h1 id="并查集"><a href="#并查集" class="headerlink" title="并查集"></a>并查集</h1><h2 id="初始化结点"><a href="#初始化结点" class="headerlink" title="初始化结点"></a>初始化结点</h2><figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">init</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= n; i++)</span><br><span class="line">        father[i] = i;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="查找一个结点的根结点"><a href="#查找一个结点的根结点" class="headerlink" title="查找一个结点的根结点"></a>查找一个结点的根结点</h2><figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">get</span><span class="params">(<span class="keyword">int</span> x)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(father[x] == x) <span class="comment">//递归基，直至找到根结点</span></span><br><span class="line">        <span class="keyword">return</span> x;</span><br><span class="line">    <span class="keyword">return</span> father[x] = get(father[x]); <span class="comment">//使结点直接指向根结点</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="合并"><a href="#合并" class="headerlink" title="合并"></a>合并</h2><figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">merge</span><span class="params">(<span class="keyword">int</span> x, <span class="keyword">int</span> y)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    x = get(x); <span class="comment">//找到x结点的根结点</span></span><br><span class="line">    y = get(y); </span><br><span class="line">    <span class="keyword">if</span>(x != y) <span class="comment">//若二者不等</span></span><br><span class="line">        father[y] = x; <span class="comment">//让y指向x</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="例题-luogu"><a href="#例题-luogu" class="headerlink" title="例题(luogu)"></a>例题(luogu)</h2><h3 id="题目背景"><a href="#题目背景" class="headerlink" title="题目背景"></a>题目背景</h3><p>若某个家族人员过于庞大，要判断两个是否是亲戚，确实还很不容易，现在给出某个亲戚关系图，求任意给出的两个人是否具有亲戚关系。</p>
<h3 id="题目描述"><a href="#题目描述" class="headerlink" title="题目描述"></a>题目描述</h3><p>规定：x和y是亲戚，y和z是亲戚，那么x和z也是亲戚。如果x,y是亲戚，那么x的亲戚都是y的亲戚，y的亲戚也都是x的亲戚。</p>
<h3 id="输入格式"><a href="#输入格式" class="headerlink" title="输入格式"></a>输入格式</h3><p>第一行：三个整数n,m,p，（n&lt;=5000,m&lt;=5000,p&lt;=5000），分别表示有n个人，m个亲戚关系，询问p对亲戚关系。</p>
<p>以下m行：每行两个数Mi，Mj，1&lt;=Mi，Mj&lt;=N，表示Mi和Mj具有亲戚关系。</p>
<p>接下来p行：每行两个数Pi，Pj，询问Pi和Pj是否具有亲戚关系。</p>
<h3 id="输出格式"><a href="#输出格式" class="headerlink" title="输出格式"></a>输出格式</h3><p>P行，每行一个’Yes’或’No’。表示第i个询问的答案为“具有”或“不具有”亲戚关系。</p>
<h3 id="输入输出样例"><a href="#输入输出样例" class="headerlink" title="输入输出样例"></a>输入输出样例</h3><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">6 5 3</span><br><span class="line">1 2</span><br><span class="line">1 5</span><br><span class="line">3 4</span><br><span class="line">5 2</span><br><span class="line">1 3</span><br><span class="line">1 4</span><br><span class="line">2 3</span><br><span class="line">5 6</span><br></pre></td></tr></table></figure>

<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">Yes</span><br><span class="line">Yes</span><br><span class="line">No</span><br></pre></td></tr></table></figure>

<h3 id="solution"><a href="#solution" class="headerlink" title="solution"></a>solution</h3><figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="keyword">int</span> n, m, p, a, b, c, d, father[<span class="number">5005</span>];</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">get</span><span class="params">(<span class="keyword">int</span> x)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(father[x] == x)</span><br><span class="line">        <span class="keyword">return</span> x;</span><br><span class="line">    <span class="keyword">return</span> father[x] = get(father[x]);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">merge</span><span class="params">(<span class="keyword">int</span> x, <span class="keyword">int</span> y)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    x = get(x);</span><br><span class="line">    y = get(y);</span><br><span class="line">    <span class="keyword">if</span>(x != y)</span><br><span class="line">        father[y] = x;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="built_in">cin</span> &gt;&gt; n &gt;&gt; m &gt;&gt; p;</span><br><span class="line">    <span class="comment">//初始化</span></span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= n; i++)</span><br><span class="line">        father[i] = i;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; m; i++)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="built_in">cin</span> &gt;&gt; a &gt;&gt; b;</span><br><span class="line">        merge(a, b);        </span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">while</span>(p--)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="built_in">cin</span> &gt;&gt; c &gt;&gt; d;</span><br><span class="line">        c = get(c);</span><br><span class="line">        d = get(d);</span><br><span class="line">        <span class="keyword">if</span>(c == d)</span><br><span class="line">            <span class="built_in">cout</span> &lt;&lt; <span class="string">&quot;Yes&quot;</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">        <span class="keyword">else</span></span><br><span class="line">            <span class="built_in">cout</span> &lt;&lt; <span class="string">&quot;No&quot;</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>



<h1 id="L1-002-打印沙漏-20-分"><a href="#L1-002-打印沙漏-20-分" class="headerlink" title="L1-002 打印沙漏 (20 分)"></a>L1-002 打印沙漏 (20 分)</h1><p>本题要求你写个程序把给定的符号打印成沙漏的形状。例如给定17个“*”，要求按下列格式打印</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">*****</span><br><span class="line"> ***</span><br><span class="line">  *</span><br><span class="line"> ***</span><br><span class="line">*****</span><br></pre></td></tr></table></figure>

<p>所谓“沙漏形状”，是指每行输出奇数个符号；各行符号中心对齐；相邻两行符号数差2；符号数先从大到小顺序递减到1，再从小到大顺序递增；首尾符号数相等。</p>
<p>给定任意N个符号，不一定能正好组成一个沙漏。要求打印出的沙漏能用掉尽可能多的符号。</p>
<h2 id="输入格式-1"><a href="#输入格式-1" class="headerlink" title="输入格式:"></a>输入格式:</h2><p>输入在一行给出1个正整数N（≤1000）和一个符号，中间以空格分隔。</p>
<h2 id="输出格式-1"><a href="#输出格式-1" class="headerlink" title="输出格式:"></a>输出格式:</h2><p>首先打印出由给定符号组成的最大的沙漏形状，最后在一行中输出剩下没用掉的符号数。</p>
<h2 id="输入样例"><a href="#输入样例" class="headerlink" title="输入样例:"></a>输入样例:</h2><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">19 *</span><br></pre></td></tr></table></figure>

<h2 id="输出样例"><a href="#输出样例" class="headerlink" title="输出样例:"></a>输出样例:</h2><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">*****</span><br><span class="line"> ***</span><br><span class="line">  *</span><br><span class="line"> ***</span><br><span class="line">*****</span><br><span class="line">2</span><br></pre></td></tr></table></figure>

<h2 id="分析"><a href="#分析" class="headerlink" title="分析"></a>分析</h2><p>本道题为找规律题，前半段的行数与总数之间存在2*N^2-1的关系，发现这个关系后，就转化为普通的打印形状题</p>
<h2 id="solution-1"><a href="#solution-1" class="headerlink" title="solution"></a>solution</h2><figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstdio&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> N, row, remain;</span><br><span class="line">    <span class="keyword">char</span> ch;</span><br><span class="line">    <span class="built_in">scanf</span>(<span class="string">&quot;%d %c&quot;</span>, &amp;N, &amp;ch);</span><br><span class="line">    <span class="keyword">while</span>(<span class="literal">true</span>)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">if</span>(<span class="number">2</span>*row*row<span class="number">-1</span> &gt; N)</span><br><span class="line">            <span class="keyword">break</span>;</span><br><span class="line">        <span class="keyword">else</span></span><br><span class="line">            row++;</span><br><span class="line">    &#125;</span><br><span class="line">    row--;</span><br><span class="line">    remain = N - (<span class="number">2</span>*row*row<span class="number">-1</span>);</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i = row; i &gt; <span class="number">0</span>; i--)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> k = <span class="number">0</span>; k &lt; row - i; k++)</span><br><span class="line">            <span class="built_in">printf</span>(<span class="string">&quot; &quot;</span>);</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> j = <span class="number">2</span>*i - <span class="number">1</span>; j &gt; <span class="number">0</span>; j--)</span><br><span class="line">            <span class="built_in">printf</span>(<span class="string">&quot;%c&quot;</span>, ch);</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;\n&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">2</span>; i &lt; row+<span class="number">1</span>; i++)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> k = <span class="number">0</span>; k &lt; row - i; k++)</span><br><span class="line">            <span class="built_in">printf</span>(<span class="string">&quot; &quot;</span>);</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> j = <span class="number">2</span>*i - <span class="number">1</span>; j &gt; <span class="number">0</span>; j--)</span><br><span class="line">            <span class="built_in">printf</span>(<span class="string">&quot;%c&quot;</span>, ch);</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;\n&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;%d\n&quot;</span>, remain);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>



<h1 id="L1-011-A-B-20-分"><a href="#L1-011-A-B-20-分" class="headerlink" title="L1-011 A-B (20 分)"></a>L1-011 A-B (20 分)</h1><p>本题要求你计算<em>A</em>−<em>B</em>。不过麻烦的是，<em>A</em>和<em>B</em>都是字符串 —— 即从字符串<em>A</em>中把字符串<em>B</em>所包含的字符全删掉，剩下的字符组成的就是字符串<em>A</em>−<em>B</em>。</p>
<h2 id="输入格式："><a href="#输入格式：" class="headerlink" title="输入格式："></a>输入格式：</h2><p>输入在2行中先后给出字符串<em>A</em>和<em>B</em>。两字符串的长度都不超过104，并且保证每个字符串都是由可见的ASCII码和空白字符组成，最后以换行符结束。</p>
<h2 id="输出格式："><a href="#输出格式：" class="headerlink" title="输出格式："></a>输出格式：</h2><p>在一行中打印出<em>A</em>−<em>B</em>的结果字符串。</p>
<!--more-->

<h2 id="输入样例："><a href="#输入样例：" class="headerlink" title="输入样例："></a>输入样例：</h2><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">I love GPLT!  It&#39;s a fun game!</span><br><span class="line">aeiou</span><br></pre></td></tr></table></figure>

<h2 id="输出样例："><a href="#输出样例：" class="headerlink" title="输出样例："></a>输出样例：</h2><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">I lv GPLT!  It&#39;s  fn gm!</span><br></pre></td></tr></table></figure>

<h2 id="解法："><a href="#解法：" class="headerlink" title="解法："></a>解法：</h2><figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;string&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="built_in">string</span> A, B;</span><br><span class="line">    getline(<span class="built_in">cin</span>, A);<span class="comment">//面向行输入</span></span><br><span class="line">    getline(<span class="built_in">cin</span>, B);</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; B.size(); i++)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> j = <span class="number">0</span>; j &lt; A.size(); j++)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">if</span>(A[j] == B[i])</span><br><span class="line">            &#123;</span><br><span class="line">                A.replace(j, <span class="number">1</span>, <span class="string">&quot;&quot;</span>);</span><br><span class="line">                j--;<span class="comment">//删掉此位后，要再次判断本位的值，避免因重复出现而漏删</span></span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">cout</span> &lt;&lt; A &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>



<h1 id="L1-027-出租-20-分"><a href="#L1-027-出租-20-分" class="headerlink" title="L1-027 出租 (20 分)"></a><strong>L1-027 出租 (20 分)</strong></h1><h2 id="输入格式：-1"><a href="#输入格式：-1" class="headerlink" title="输入格式："></a>输入格式：</h2><p>输入在一行中给出一个由11位数字组成的手机号码。</p>
<h2 id="输出格式：-1"><a href="#输出格式：-1" class="headerlink" title="输出格式："></a>输出格式：</h2><p>为输入的号码生成代码的前两行，其中<code>arr</code>中的数字必须按递减顺序给出。</p>
<h2 id="输入样例：-1"><a href="#输入样例：-1" class="headerlink" title="输入样例："></a>输入样例：</h2><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">18013820100</span><br></pre></td></tr></table></figure>

<h2 id="输出样例：-1"><a href="#输出样例：-1" class="headerlink" title="输出样例："></a>输出样例：</h2><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">int[] arr &#x3D; new int[]&#123;8,3,2,1,0&#125;;</span><br><span class="line">int[] index &#x3D; new int[]&#123;3,0,4,3,1,0,2,4,3,4,4&#125;;</span><br></pre></td></tr></table></figure>

<h2 id="解法：-1"><a href="#解法：-1" class="headerlink" title="解法："></a>解法：</h2><figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;set&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;algorithm&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">MyCompare</span></span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function"><span class="keyword">bool</span> <span class="title">operator</span><span class="params">()</span><span class="params">(<span class="keyword">int</span> a, <span class="keyword">int</span> b)</span></span>&#123;</span><br><span class="line">         <span class="keyword">return</span> a &gt; b;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="built_in">string</span> phonenum;</span><br><span class="line">    <span class="built_in">cin</span> &gt;&gt; phonenum;</span><br><span class="line">    <span class="built_in">set</span>&lt;<span class="keyword">int</span>,MyCompare&gt;s;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; <span class="number">11</span>; i++)</span><br><span class="line">        s.insert(phonenum[i] - <span class="string">&#x27;0&#x27;</span>);</span><br><span class="line">        </span><br><span class="line">    <span class="built_in">cout</span> &lt;&lt; <span class="string">&quot;int[] arr = new int[]&#123;&quot;</span>;</span><br><span class="line">    <span class="keyword">for</span>(<span class="built_in">set</span>&lt;<span class="keyword">int</span>, MyCompare&gt;::iterator it = s.begin(); it != s.end(); it++)</span><br><span class="line">    &#123;</span><br><span class="line">    	<span class="built_in">cout</span> &lt;&lt; *it;</span><br><span class="line">    	<span class="keyword">if</span>(++it != s.end())</span><br><span class="line">    	    <span class="built_in">cout</span> &lt;&lt; <span class="string">&quot;,&quot;</span>;</span><br><span class="line">    	it--;</span><br><span class="line">	&#125;</span><br><span class="line">    <span class="built_in">cout</span> &lt;&lt; <span class="string">&quot;&#125;;&quot;</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">    </span><br><span class="line">    <span class="built_in">cout</span> &lt;&lt; <span class="string">&quot;int[] index = new int[]&#123;&quot;</span>;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; <span class="number">11</span>; i++)</span><br><span class="line">    &#123;</span><br><span class="line">    	<span class="keyword">int</span> j = <span class="number">0</span>;</span><br><span class="line">    	<span class="keyword">for</span>(<span class="built_in">set</span>&lt;<span class="keyword">int</span>, MyCompare&gt;::iterator it = s.begin(); it != s.end(); it++)</span><br><span class="line">    	&#123;</span><br><span class="line">    		<span class="keyword">if</span>((phonenum[i] - <span class="string">&#x27;0&#x27;</span>) == *it)</span><br><span class="line">    		&#123;</span><br><span class="line">    			<span class="built_in">cout</span> &lt;&lt; j;</span><br><span class="line">    			<span class="keyword">if</span>(i+<span class="number">1</span> != <span class="number">11</span>)</span><br><span class="line">    			    <span class="built_in">cout</span> &lt;&lt; <span class="string">&quot;,&quot;</span>;</span><br><span class="line">    			<span class="keyword">break</span>;</span><br><span class="line">			&#125;</span><br><span class="line">			j++;</span><br><span class="line">		&#125;</span><br><span class="line">    	</span><br><span class="line">	&#125;</span><br><span class="line">    </span><br><span class="line">    <span class="built_in">cout</span> &lt;&lt; <span class="string">&quot;&#125;;&quot;</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h1 id="L1-032-Left-pad-20-分"><a href="#L1-032-Left-pad-20-分" class="headerlink" title="L1-032 Left-pad (20 分)"></a>L1-032 Left-pad (20 分)</h1><p>根据新浪微博上的消息，有一位开发者不满NPM（Node Package Manager）的做法，收回了自己的开源代码，其中包括一个叫left-pad的模块，就是这个模块把javascript里面的React/Babel干瘫痪了。这是个什么样的模块？就是在字符串前填充一些东西到一定的长度。例如用<code>*</code>去填充字符串<code>GPLT</code>，使之长度为10，调用left-pad的结果就应该是<code>******GPLT</code>。Node社区曾经对left-pad紧急发布了一个替代，被严重吐槽。下面就请你来实现一下这个模块。</p>
<h2 id="输入格式：-2"><a href="#输入格式：-2" class="headerlink" title="输入格式："></a>输入格式：</h2><p>输入在第一行给出一个正整数<code>N</code>（≤104）和一个字符，分别是填充结果字符串的长度和用于填充的字符，中间以1个空格分开。第二行给出原始的非空字符串，以回车结束。</p>
<h2 id="输出格式：-2"><a href="#输出格式：-2" class="headerlink" title="输出格式："></a>输出格式：</h2><p>在一行中输出结果字符串。</p>
<h2 id="输入样例1："><a href="#输入样例1：" class="headerlink" title="输入样例1："></a>输入样例1：</h2><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">15 _</span><br><span class="line">I love GPLT</span><br></pre></td></tr></table></figure>

<h2 id="输出样例1："><a href="#输出样例1：" class="headerlink" title="输出样例1："></a>输出样例1：</h2><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">____I love GPLT</span><br></pre></td></tr></table></figure>

<h2 id="输入样例2："><a href="#输入样例2：" class="headerlink" title="输入样例2："></a>输入样例2：</h2><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">4 *</span><br><span class="line">this is a sample for cut</span><br></pre></td></tr></table></figure>

<h2 id="输出样例2："><a href="#输出样例2：" class="headerlink" title="输出样例2："></a>输出样例2：</h2><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">cut</span><br></pre></td></tr></table></figure>

<h2 id="解法：-2"><a href="#解法：-2" class="headerlink" title="解法："></a>解法：</h2><figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;string&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> N;</span><br><span class="line">    <span class="built_in">string</span> str, ch;</span><br><span class="line">    <span class="built_in">cin</span> &gt;&gt; N &gt;&gt; ch;<span class="comment">//字符以string类型读入便于之后的拼接</span></span><br><span class="line">    <span class="built_in">cin</span>.get(); <span class="comment">//读取行末的换行符</span></span><br><span class="line">    getline(<span class="built_in">cin</span>, str);</span><br><span class="line">    <span class="keyword">int</span> len = str.size();</span><br><span class="line">    <span class="keyword">if</span>(len &gt;= N) <span class="comment">//若字符串长度大于规定长度</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="built_in">string</span> substr = str.substr(len-N, N); <span class="comment">//则进行缩减，保留末尾的N个字符串</span></span><br><span class="line">        <span class="built_in">cout</span> &lt;&lt; substr &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">else</span>&#123; <span class="comment">//若字符串长度小于规定长度</span></span><br><span class="line">        <span class="keyword">int</span> i = len;</span><br><span class="line">        <span class="keyword">while</span>(i &lt; N)</span><br><span class="line">        &#123;</span><br><span class="line">            str = ch + str;<span class="comment">//采用拼接的方式扩充字符串</span></span><br><span class="line">            i++;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="built_in">cout</span> &lt;&lt; str &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>



<h1 id="L1-039-古风排版-20-分"><a href="#L1-039-古风排版-20-分" class="headerlink" title="L1-039 古风排版 (20 分)"></a>L1-039 古风排版 (20 分)</h1><p>中国的古人写文字，是从右向左竖向排版的。本题就请你编写程序，把一段文字按古风排版。</p>
<h2 id="输入格式：-3"><a href="#输入格式：-3" class="headerlink" title="输入格式："></a>输入格式：</h2><p>输入在第一行给出一个正整数<em>N</em>（&lt;100），是每一列的字符数。第二行给出一个长度不超过1000的非空字符串，以回车结束。</p>
<h2 id="输出格式：-3"><a href="#输出格式：-3" class="headerlink" title="输出格式："></a>输出格式：</h2><p>按古风格式排版给定的字符串，每列<em>N</em>个字符（除了最后一列可能不足<em>N</em>个）。</p>
<h2 id="输入样例：-2"><a href="#输入样例：-2" class="headerlink" title="输入样例："></a>输入样例：</h2><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">4</span><br><span class="line">This is a test case</span><br></pre></td></tr></table></figure>

<h2 id="输出样例：-2"><a href="#输出样例：-2" class="headerlink" title="输出样例："></a>输出样例：</h2><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">asa T</span><br><span class="line">st ih</span><br><span class="line">e tsi</span><br><span class="line"> ce s</span><br></pre></td></tr></table></figure>

<h2 id="解法：-3"><a href="#解法：-3" class="headerlink" title="解法："></a>解法：</h2><figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;string&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> N;</span><br><span class="line">    <span class="built_in">cin</span> &gt;&gt; N;</span><br><span class="line">    <span class="built_in">cin</span>.get();</span><br><span class="line">    <span class="built_in">string</span> str;</span><br><span class="line">    getline(<span class="built_in">cin</span>, str);</span><br><span class="line">    <span class="keyword">while</span>(str.size() % N != <span class="number">0</span>)</span><br><span class="line">        str += <span class="string">&quot; &quot;</span>;   <span class="comment">//使str内的字符数是N的倍数</span></span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; N; i++)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">int</span> j = str.size() / N<span class="number">-1</span>;</span><br><span class="line">        <span class="keyword">while</span>(j &gt;= <span class="number">0</span>)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="built_in">cout</span> &lt;&lt; str[i+j*N]; <span class="comment">//根据每行的数字特征得出i+j*N</span></span><br><span class="line">            j--;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="built_in">cout</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h1 id="L1-056-猜数字-20-分"><a href="#L1-056-猜数字-20-分" class="headerlink" title="L1-056 猜数字 (20 分)"></a>L1-056 猜数字 (20 分)</h1><p>一群人坐在一起，每人猜一个 100 以内的数，谁的数字最接近大家平均数的一半就赢。本题就要求你找出其中的赢家。</p>
<h2 id="输入格式：-4"><a href="#输入格式：-4" class="headerlink" title="输入格式："></a>输入格式：</h2><p>输入在第一行给出一个正整数N（≤104）。随后 N 行，每行给出一个玩家的名字（由不超过8个英文字母组成的字符串）和其猜的正整数（≤ 100）。</p>
<h2 id="输出格式：-4"><a href="#输出格式：-4" class="headerlink" title="输出格式："></a>输出格式：</h2><p>在一行中顺序输出：大家平均数的一半（只输出整数部分）、赢家的名字，其间以空格分隔。题目保证赢家是唯一的。</p>
<h2 id="输入样例：-3"><a href="#输入样例：-3" class="headerlink" title="输入样例："></a>输入样例：</h2><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">7</span><br><span class="line">Bob 35</span><br><span class="line">Amy 28</span><br><span class="line">James 98</span><br><span class="line">Alice 11</span><br><span class="line">Jack 45</span><br><span class="line">Smith 33</span><br><span class="line">Chris 62</span><br></pre></td></tr></table></figure>

<h2 id="输出样例：-3"><a href="#输出样例：-3" class="headerlink" title="输出样例："></a>输出样例：</h2><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">22 Amy</span><br></pre></td></tr></table></figure>

<h2 id="解法：-4"><a href="#解法：-4" class="headerlink" title="解法："></a>解法：</h2><figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;vector&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;string&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cmath&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> N;</span><br><span class="line">    <span class="built_in">cin</span> &gt;&gt; N;</span><br><span class="line">    <span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt; vi; <span class="comment">//存储int类型的向量，用于存储猜的数</span></span><br><span class="line">    <span class="built_in">vector</span>&lt;<span class="built_in">string</span>&gt; vs; <span class="comment">//存储string类型的向量，用于存储名字</span></span><br><span class="line">    <span class="comment">//将N个名字及数字读入并存储</span></span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; N; i++)</span><br><span class="line">    &#123;</span><br><span class="line">    	<span class="built_in">string</span> name;</span><br><span class="line">        <span class="built_in">cin</span> &gt;&gt; name;</span><br><span class="line">        vs.push_back(name);</span><br><span class="line">        <span class="keyword">int</span> num;</span><br><span class="line">        <span class="built_in">cin</span> &gt;&gt; num;</span><br><span class="line">        vi.push_back(num);</span><br><span class="line">	&#125;</span><br><span class="line">    <span class="comment">//计算平均值 </span></span><br><span class="line">    <span class="keyword">int</span> aver = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; vi.size(); i++)</span><br><span class="line">        aver += vi[i];</span><br><span class="line">    aver /= N;</span><br><span class="line">    aver /= <span class="number">2</span>;</span><br><span class="line">    <span class="keyword">int</span> j = <span class="number">0</span>; <span class="comment">//假设下标为0时最接近平均数</span></span><br><span class="line">    <span class="keyword">int</span> min = <span class="built_in">abs</span>(vi[<span class="number">0</span>] - aver);</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">1</span>; i &lt; vi.size(); i++) <span class="comment">//遍历，找到差值最小的数</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">int</span> temp = <span class="built_in">abs</span>(vi[i] - aver);</span><br><span class="line">        <span class="keyword">if</span>(temp &lt;= min)  </span><br><span class="line">        &#123;</span><br><span class="line">            j = i;  <span class="comment">//更新最小值的下标</span></span><br><span class="line">            min = temp; <span class="comment">//更新最小值</span></span><br><span class="line">		&#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">cout</span> &lt;&lt; aver &lt;&lt; <span class="string">&quot; &quot;</span> &lt;&lt; vs[j] &lt;&lt; <span class="built_in">endl</span>; <span class="comment">//输出结果 </span></span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>



<h1 id="L1-059-敲笨钟-20-分"><a href="#L1-059-敲笨钟-20-分" class="headerlink" title="L1-059 敲笨钟 (20 分)"></a>L1-059 敲笨钟 (20 分)</h1><p>微博上有个自称“大笨钟V”的家伙，每天敲钟催促码农们爱惜身体早点睡觉。为了增加敲钟的趣味性，还会糟改几句古诗词。其糟改的方法为：去网上搜寻压“ong”韵的古诗词，把句尾的三个字换成“敲笨钟”。例如唐代诗人李贺有名句曰：“寻章摘句老雕虫，晓月当帘挂玉弓”，其中“虫”（chong）和“弓”（gong）都压了“ong”韵。于是这句诗就被糟改为“寻章摘句老雕虫，晓月当帘敲笨钟”。</p>
<p>现在给你一大堆古诗词句，要求你写个程序自动将压“ong”韵的句子糟改成“敲笨钟”。</p>
<h2 id="输入格式：-5"><a href="#输入格式：-5" class="headerlink" title="输入格式："></a>输入格式：</h2><p>输入首先在第一行给出一个不超过 20 的正整数 N。随后 N 行，每行用汉语拼音给出一句古诗词，分上下两半句，用逗号 <code>,</code> 分隔，句号 <code>.</code> 结尾。相邻两字的拼音之间用一个空格分隔。题目保证每个字的拼音不超过 6 个字符，每行字符的总长度不超过 100，并且下半句诗至少有 3 个字。</p>
<h2 id="输出格式：-5"><a href="#输出格式：-5" class="headerlink" title="输出格式："></a>输出格式：</h2><p>对每一行诗句，判断其是否压“ong”韵。即上下两句末尾的字都是“ong”结尾。如果是压此韵的，就按题面方法糟改之后输出，输出格式同输入；否则输出 <code>Skipped</code>，即跳过此句。</p>
<h2 id="输入样例：-4"><a href="#输入样例：-4" class="headerlink" title="输入样例："></a>输入样例：</h2><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">5</span><br><span class="line">xun zhang zhai ju lao diao chong, xiao yue dang lian gua yu gong.</span><br><span class="line">tian sheng wo cai bi you yong, qian jin san jin huan fu lai.</span><br><span class="line">xue zhui rou zhi leng wei rong, an xiao chen jing shu wei long.</span><br><span class="line">zuo ye xing chen zuo ye feng, hua lou xi pan gui tang dong.</span><br><span class="line">ren xian gui hua luo, ye jing chun shan kong.</span><br></pre></td></tr></table></figure>

<h2 id="输出样例：-4"><a href="#输出样例：-4" class="headerlink" title="输出样例："></a>输出样例：</h2><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">xun zhang zhai ju lao diao chong, xiao yue dang lian qiao ben zhong.</span><br><span class="line">Skipped</span><br><span class="line">xue zhui rou zhi leng wei rong, an xiao chen jing qiao ben zhong.</span><br><span class="line">Skipped</span><br><span class="line">Skipped</span><br></pre></td></tr></table></figure>

<h2 id="解法一："><a href="#解法一：" class="headerlink" title="解法一："></a>解法一：</h2><figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;string&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> N, len, pos;</span><br><span class="line">    <span class="built_in">cin</span> &gt;&gt; N;</span><br><span class="line">    <span class="built_in">cin</span>.get();<span class="comment">//读取行末的空格，避免后续的输入错误</span></span><br><span class="line">    <span class="keyword">while</span>(N--&gt;<span class="number">0</span>)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="built_in">string</span> str;</span><br><span class="line">        getline(<span class="built_in">cin</span>, str);·</span><br><span class="line">        len = str.size();</span><br><span class="line">        pos = str.find(<span class="string">&quot;,&quot;</span>);<span class="comment">//保留逗号的位置，以便查找到前半句的ong</span></span><br><span class="line">        <span class="keyword">if</span>(pos &gt;= <span class="number">3</span> &amp;&amp; str.substr(pos<span class="number">-3</span>, <span class="number">3</span>) == <span class="string">&quot;ong&quot;</span> &amp;&amp; str.substr(len<span class="number">-4</span>, <span class="number">3</span>) == <span class="string">&quot;ong&quot;</span>)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="built_in">string</span> substr = str;</span><br><span class="line">            <span class="keyword">int</span> pos2;<span class="comment">//确定倒数第三个空格的位置</span></span><br><span class="line">            <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; <span class="number">3</span>; i++)</span><br><span class="line">            &#123;</span><br><span class="line">    	        pos2 = substr.rfind(<span class="string">&quot; &quot;</span>);</span><br><span class="line">    	        substr = str.substr(<span class="number">0</span>, pos2);</span><br><span class="line">	        &#125;  <span class="comment">//分开输出</span></span><br><span class="line">            <span class="built_in">cout</span> &lt;&lt; str.substr(<span class="number">0</span>, pos2+<span class="number">1</span>) &lt;&lt; <span class="string">&quot;qiao ben zhong.&quot;</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">else</span></span><br><span class="line">            <span class="built_in">cout</span> &lt;&lt; <span class="string">&quot;Skipped&quot;</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="解法二："><a href="#解法二：" class="headerlink" title="解法二："></a>解法二：</h2><figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;string&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> N;</span><br><span class="line">    <span class="built_in">cin</span> &gt;&gt; N;</span><br><span class="line">    <span class="built_in">cin</span>.get();<span class="comment">//读取行末的空格，避免后续的输入错误</span></span><br><span class="line">    <span class="keyword">while</span>(N--&gt;<span class="number">0</span>)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="built_in">string</span> str;</span><br><span class="line">        getline(<span class="built_in">cin</span>, str);</span><br><span class="line">        <span class="keyword">if</span>(str.find(<span class="string">&quot;ong,&quot;</span>) != str.npos &amp;&amp; str.rfind(<span class="string">&quot;ong.&quot;</span>) != str.npos)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="built_in">string</span> substr = str;</span><br><span class="line">            <span class="keyword">int</span> pos;<span class="comment">//确定倒数第三个空格的位置</span></span><br><span class="line">            <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; <span class="number">3</span>; i++)</span><br><span class="line">            &#123;</span><br><span class="line">    	        pos = substr.rfind(<span class="string">&quot; &quot;</span>);</span><br><span class="line">    	        substr = str.substr(<span class="number">0</span>, pos);</span><br><span class="line">	        &#125;</span><br><span class="line">            <span class="built_in">cout</span> &lt;&lt; str.substr(<span class="number">0</span>, pos+<span class="number">1</span>) &lt;&lt; <span class="string">&quot;qiao ben zhong.&quot;</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">else</span></span><br><span class="line">            <span class="built_in">cout</span> &lt;&lt; <span class="string">&quot;Skipped&quot;</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h1 id="L1-064-估值一亿的AI核心代码-20-分"><a href="#L1-064-估值一亿的AI核心代码-20-分" class="headerlink" title="L1-064 估值一亿的AI核心代码 (20 分)"></a><strong>L1-064 估值一亿的AI核心代码 (20 分)</strong></h1><p>以上图片来自新浪微博。</p>
<p>本题要求你实现一个稍微更值钱一点的 AI 英文问答程序，规则是：</p>
<ul>
<li>无论用户说什么，首先把对方说的话在一行中原样打印出来；</li>
<li>消除原文中多余空格：把相邻单词间的多个空格换成 1 个空格，把行首尾的空格全部删掉，把标点符号前面的空格删掉；</li>
<li>把原文中所有大写英文字母变成小写，除了 <code>I</code>；</li>
<li>把原文中所有独立的 <code>can you</code>、<code>could you</code> 对应地换成 <code>I can</code>、<code>I could</code>—— 这里“独立”是指被空格或标点符号分隔开的单词；</li>
<li>把原文中所有独立的 <code>I</code> 和 <code>me</code> 换成 <code>you</code>；</li>
<li>把原文中所有的问号 <code>?</code> 换成惊叹号 <code>!</code>；</li>
<li>在一行中输出替换后的句子作为 AI 的回答。</li>
</ul>
<h2 id="输入格式：-6"><a href="#输入格式：-6" class="headerlink" title="输入格式："></a>输入格式：</h2><p>输入首先在第一行给出不超过 10 的正整数 N，随后 N 行，每行给出一句不超过 1000 个字符的、以回车结尾的用户的对话，对话为非空字符串，仅包括字母、数字、空格、可见的半角标点符号。</p>
<h2 id="输出格式：-6"><a href="#输出格式：-6" class="headerlink" title="输出格式："></a>输出格式：</h2><p>按题面要求输出，每个 AI 的回答前要加上 <code>AI:</code> 和一个空格。</p>
<h2 id="输入样例：-5"><a href="#输入样例：-5" class="headerlink" title="输入样例："></a>输入样例：</h2><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">6</span><br><span class="line">Hello ?</span><br><span class="line"> Good to chat   with you</span><br><span class="line">can   you speak Chinese?</span><br><span class="line">Really?</span><br><span class="line">Could you show me 5</span><br><span class="line">What Is this prime? I,don &#39;t know</span><br></pre></td></tr></table></figure>

<h2 id="输出样例：-5"><a href="#输出样例：-5" class="headerlink" title="输出样例："></a>输出样例：</h2><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">Hello ?</span><br><span class="line">AI: hello!</span><br><span class="line"> Good to chat   with you</span><br><span class="line">AI: good to chat with you</span><br><span class="line">can   you speak Chinese?</span><br><span class="line">AI: I can speak chinese!</span><br><span class="line">Really?</span><br><span class="line">AI: really!</span><br><span class="line">Could you show me 5</span><br><span class="line">AI: I could show you 5</span><br><span class="line">What Is this prime? I,don &#39;t know</span><br><span class="line">AI: what Is this prime! you,don&#39;t know</span><br></pre></td></tr></table></figure>

<h2 id="解法（STL）："><a href="#解法（STL）：" class="headerlink" title="解法（STL）："></a>解法（STL）：</h2><figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;string&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> N;</span><br><span class="line">    <span class="built_in">string</span> str;</span><br><span class="line">    <span class="built_in">cin</span> &gt;&gt; N;</span><br><span class="line">    <span class="built_in">cin</span>.get();</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">while</span>(N-- &gt; <span class="number">0</span>)</span><br><span class="line">    &#123;</span><br><span class="line">        getline(<span class="built_in">cin</span>, str);</span><br><span class="line">        <span class="built_in">cout</span> &lt;&lt; str &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">        str = <span class="string">&#x27; &#x27;</span> + str + <span class="string">&#x27; &#x27;</span>;</span><br><span class="line">        </span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">1</span>; i &lt; str.size(); i++)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">if</span>(str[i<span class="number">-1</span>] == <span class="string">&#x27; &#x27;</span> &amp;&amp; !<span class="built_in">isalnum</span>(str[i])) <span class="comment">//前一个字符是空格，后一个是空格或者标点的情况</span></span><br><span class="line">            &#123;                                        <span class="comment">//两种情况均符合删除要求</span></span><br><span class="line">                str.erase(i<span class="number">-1</span>, <span class="number">1</span>);</span><br><span class="line">                i--; <span class="comment">//再次检查原位</span></span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">if</span>(str[i] != <span class="string">&#x27;I&#x27;</span> &amp;&amp; <span class="built_in">isupper</span>(str[i])) <span class="comment">//除I以外全部转换为小写</span></span><br><span class="line">                str[i] = <span class="built_in">tolower</span>(str[i]);</span><br><span class="line">            <span class="keyword">if</span>(str[i] == <span class="string">&#x27;?&#x27;</span>)  str.replace(i, <span class="number">1</span>, <span class="string">&quot;!&quot;</span>); </span><br><span class="line">        &#125;</span><br><span class="line">        </span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; str.size(); i++)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">if</span>(str.substr(i, <span class="number">7</span>) == <span class="string">&quot;can you&quot;</span> &amp;&amp; !<span class="built_in">isalnum</span>(str[i<span class="number">-1</span>]) &amp;&amp; !<span class="built_in">isalnum</span>(str[i+<span class="number">7</span>]))</span><br><span class="line">                str.replace(i, <span class="number">7</span>, <span class="string">&quot;# can&quot;</span>);</span><br><span class="line">            <span class="keyword">if</span>(str.substr(i, <span class="number">9</span>) == <span class="string">&quot;could you&quot;</span> &amp;&amp; !<span class="built_in">isalnum</span>(str[i<span class="number">-1</span>]) &amp;&amp; !<span class="built_in">isalnum</span>(str[i+<span class="number">9</span>]))</span><br><span class="line">                str.replace(i, <span class="number">9</span>, <span class="string">&quot;# could&quot;</span>);</span><br><span class="line">            <span class="keyword">if</span>(str.substr(i, <span class="number">1</span>) == <span class="string">&quot;I&quot;</span> &amp;&amp; !<span class="built_in">isalnum</span>(str[i<span class="number">-1</span>]) &amp;&amp; !<span class="built_in">isalnum</span>(str[i+<span class="number">1</span>]))</span><br><span class="line">                str.replace(i, <span class="number">1</span>, <span class="string">&quot;you&quot;</span>);</span><br><span class="line">            <span class="keyword">if</span>(str.substr(i, <span class="number">2</span>) == <span class="string">&quot;me&quot;</span> &amp;&amp; !<span class="built_in">isalnum</span>(str[i<span class="number">-1</span>]) &amp;&amp; !<span class="built_in">isalnum</span>(str[i+<span class="number">2</span>]))</span><br><span class="line">                str.replace(i, <span class="number">2</span>, <span class="string">&quot;you&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; str.size(); i++)</span><br><span class="line">            <span class="keyword">if</span>(str[i] == <span class="string">&#x27;#&#x27;</span>) str[i] = <span class="string">&#x27;I&#x27;</span>;</span><br><span class="line">        <span class="keyword">while</span>(str[<span class="number">0</span>] == <span class="string">&#x27; &#x27;</span>) str.erase(<span class="number">0</span>,<span class="number">1</span>);<span class="comment">//删除头尾多余的空格</span></span><br><span class="line">        <span class="keyword">while</span>(str[str.size() - <span class="number">1</span>] == <span class="string">&#x27; &#x27;</span>) str.erase(str.size()<span class="number">-1</span>,<span class="number">1</span>);</span><br><span class="line">        <span class="built_in">cout</span> &lt;&lt; <span class="string">&quot;AI: &quot;</span> &lt;&lt; str &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>



<h1 id="L1-071-前世档案-20-分"><a href="#L1-071-前世档案-20-分" class="headerlink" title="L1-071 前世档案 (20 分)"></a><strong>L1-071 前世档案 (20 分)</strong></h1><h2 id="输入格式：-7"><a href="#输入格式：-7" class="headerlink" title="输入格式："></a>输入格式：</h2><p>输入第一行给出两个正整数：<em>N</em>（≤30）为玩家做一次测试要回答的问题数量；<em>M</em>（≤100）为玩家人数。</p>
<p>随后 <em>M</em> 行，每行顺次给出玩家的 <em>N</em> 个回答。这里用 <code>y</code> 代表“是”，用 <code>n</code> 代表“否”。</p>
<h2 id="输出格式：-7"><a href="#输出格式：-7" class="headerlink" title="输出格式："></a>输出格式：</h2><p>对每个玩家，在一行中输出其对应的结论的编号。</p>
<h2 id="输入样例：-6"><a href="#输入样例：-6" class="headerlink" title="输入样例："></a>输入样例：</h2><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">3 4</span><br><span class="line">yny</span><br><span class="line">nyy</span><br><span class="line">nyn</span><br><span class="line">yyn</span><br></pre></td></tr></table></figure>

<h2 id="输出样例：-6"><a href="#输出样例：-6" class="headerlink" title="输出样例："></a>输出样例：</h2><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">3</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">2</span><br></pre></td></tr></table></figure>

<h2 id="解法：-5"><a href="#解法：-5" class="headerlink" title="解法："></a>解法：</h2><figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cmath&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> N, M;</span><br><span class="line">    <span class="built_in">scanf</span>(<span class="string">&quot;%d %d&quot;</span>, &amp;N, &amp;M);</span><br><span class="line">    <span class="built_in">cin</span>.get(); <span class="comment">//将换行符读取掉，避免影响后续输入</span></span><br><span class="line">    <span class="keyword">while</span>(M-- &gt; <span class="number">0</span>)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">int</span> score = <span class="number">1</span>;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; N; i++)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">char</span> ch = <span class="built_in">cin</span>.get();</span><br><span class="line">            <span class="keyword">if</span>(ch == <span class="string">&#x27;n&#x27;</span>)</span><br><span class="line">                score = score + <span class="built_in">pow</span>(<span class="number">2</span>, N-i<span class="number">-1</span>); <span class="comment">//将yn看成二进制数</span></span><br><span class="line">        &#125;</span><br><span class="line">        <span class="built_in">cout</span> &lt;&lt; score &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">        <span class="built_in">cin</span>.get(); <span class="comment">//将换行符读取掉，避免影响后续输入</span></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h1 id="L2-010-排座位-25-分"><a href="#L2-010-排座位-25-分" class="headerlink" title="L2-010 排座位 (25 分)"></a>L2-010 排座位 (25 分)</h1><p>布置宴席最微妙的事情，就是给前来参宴的各位宾客安排座位。无论如何，总不能把两个死对头排到同一张宴会桌旁！这个艰巨任务现在就交给你，对任何一对客人，请编写程序告诉主人他们是否能被安排同席。</p>
<h2 id="输入格式：-8"><a href="#输入格式：-8" class="headerlink" title="输入格式："></a>输入格式：</h2><p>输入第一行给出3个正整数：<code>N</code>（≤100），即前来参宴的宾客总人数，则这些人从1到<code>N</code>编号；<code>M</code>为已知两两宾客之间的关系数；<code>K</code>为查询的条数。随后<code>M</code>行，每行给出一对宾客之间的关系，格式为：<code>宾客1 宾客2 关系</code>，其中<code>关系</code>为1表示是朋友，-1表示是死对头。注意两个人不可能既是朋友又是敌人。最后<code>K</code>行，每行给出一对需要查询的宾客编号。</p>
<p>这里假设朋友的朋友也是朋友。但敌人的敌人并不一定就是朋友，朋友的敌人也不一定是敌人。只有单纯直接的敌对关系才是绝对不能同席的。</p>
<h2 id="输出格式：-8"><a href="#输出格式：-8" class="headerlink" title="输出格式："></a>输出格式：</h2><p>对每个查询输出一行结果：如果两位宾客之间是朋友，且没有敌对关系，则输出<code>No problem</code>；如果他们之间并不是朋友，但也不敌对，则输出<code>OK</code>；如果他们之间有敌对，然而也有共同的朋友，则输出<code>OK but...</code>；如果他们之间只有敌对关系，则输出<code>No way</code>。</p>
<h2 id="输入样例：-7"><a href="#输入样例：-7" class="headerlink" title="输入样例："></a>输入样例：</h2><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">7 8 4</span><br><span class="line">5 6 1</span><br><span class="line">2 7 -1</span><br><span class="line">1 3 1</span><br><span class="line">3 4 1</span><br><span class="line">6 7 -1</span><br><span class="line">1 2 1</span><br><span class="line">1 4 1</span><br><span class="line">2 3 -1</span><br><span class="line">3 4</span><br><span class="line">5 7</span><br><span class="line">2 3</span><br><span class="line">7 2</span><br></pre></td></tr></table></figure>

<h2 id="输出样例：-7"><a href="#输出样例：-7" class="headerlink" title="输出样例："></a>输出样例：</h2><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">No problem</span><br><span class="line">OK</span><br><span class="line">OK but...</span><br><span class="line">No way</span><br></pre></td></tr></table></figure>

<h2 id="解法：-6"><a href="#解法：-6" class="headerlink" title="解法："></a>解法：</h2><figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstdio&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">int</span> N, M, K, b1, b2, r;</span><br><span class="line"><span class="keyword">int</span> father[<span class="number">105</span>], enemy[<span class="number">105</span>][<span class="number">105</span>];</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">get</span><span class="params">(<span class="keyword">int</span> x)</span><span class="comment">//查询</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(father[x] == x)</span><br><span class="line">        <span class="keyword">return</span> x;</span><br><span class="line">    <span class="keyword">return</span> father[x] = get(father[x]);</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">merge</span><span class="params">(<span class="keyword">int</span> x, <span class="keyword">int</span> y)</span><span class="comment">//合并</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    x = get(x);</span><br><span class="line">    y = get(y);</span><br><span class="line">    <span class="keyword">if</span>(x != y)</span><br><span class="line">    &#123;</span><br><span class="line">        father[y] = x;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="built_in">scanf</span>(<span class="string">&quot;%d %d %d&quot;</span>, &amp;N, &amp;M, &amp;K);</span><br><span class="line">    <span class="comment">//初始化</span></span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= N; i++)</span><br><span class="line">        father[i] = i;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; M; i++)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="built_in">scanf</span>(<span class="string">&quot;%d %d %d&quot;</span>, &amp;b1, &amp;b2, &amp;r);</span><br><span class="line">        <span class="keyword">if</span>(r == <span class="number">1</span>)</span><br><span class="line">            merge(b1, b2);</span><br><span class="line">        <span class="keyword">else</span> <span class="keyword">if</span> (r == <span class="number">-1</span>)</span><br><span class="line">            enemy[b1][b2] = enemy[b2][b1] = <span class="number">1</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">while</span>(K--)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="built_in">scanf</span>(<span class="string">&quot;%d %d&quot;</span>, &amp;b1, &amp;b2);</span><br><span class="line">        <span class="keyword">if</span>(get(b1) == get(b2) &amp;&amp; enemy[b1][b2] != <span class="number">1</span>)</span><br><span class="line">            <span class="built_in">printf</span>(<span class="string">&quot;No problem\n&quot;</span>);</span><br><span class="line">        <span class="keyword">else</span> <span class="keyword">if</span>(get(b1) != get(b2) &amp;&amp; enemy[b1][b2] != <span class="number">1</span>)</span><br><span class="line">            <span class="built_in">printf</span>(<span class="string">&quot;OK\n&quot;</span>);</span><br><span class="line">        <span class="keyword">else</span> <span class="keyword">if</span>(get(b1) == get(b2) &amp;&amp; enemy[b1][b2] == <span class="number">1</span>)</span><br><span class="line">            <span class="built_in">printf</span>(<span class="string">&quot;OK but...\n&quot;</span>);</span><br><span class="line">        <span class="keyword">else</span></span><br><span class="line">            <span class="built_in">printf</span>(<span class="string">&quot;No way\n&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>



<h1 id="L2-019-悄悄关注-25-分"><a href="#L2-019-悄悄关注-25-分" class="headerlink" title="L2-019 悄悄关注 (25 分)"></a>L2-019 悄悄关注 (25 分)</h1><p>新浪微博上有个“悄悄关注”，一个用户悄悄关注的人，不出现在这个用户的关注列表上，但系统会推送其悄悄关注的人发表的微博给该用户。现在我们来做一回网络侦探，根据某人的关注列表和其对其他用户的点赞情况，扒出有可能被其悄悄关注的人。</p>
<h2 id="输入格式：-9"><a href="#输入格式：-9" class="headerlink" title="输入格式："></a>输入格式：</h2><p>输入首先在第一行给出某用户的关注列表，格式如下：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">人数N 用户1 用户2 …… 用户N</span><br></pre></td></tr></table></figure>

<p>其中<code>N</code>是不超过5000的正整数，每个<code>用户i</code>（<code>i</code>=1, …, <code>N</code>）是被其关注的用户的ID，是长度为4位的由数字和英文字母组成的字符串，各项间以空格分隔。</p>
<p>之后给出该用户点赞的信息：首先给出一个不超过10000的正整数<code>M</code>，随后<code>M</code>行，每行给出一个被其点赞的用户ID和对该用户的点赞次数（不超过1000），以空格分隔。注意：用户ID是一个用户的唯一身份标识。题目保证在关注列表中没有重复用户，在点赞信息中也没有重复用户。</p>
<h2 id="输出格式：-9"><a href="#输出格式：-9" class="headerlink" title="输出格式："></a>输出格式：</h2><p>我们认为被该用户点赞次数大于其点赞平均数、且不在其关注列表上的人，很可能是其悄悄关注的人。根据这个假设，请你按用户ID字母序的升序输出可能是其悄悄关注的人，每行1个ID。如果其实并没有这样的人，则输出“Bing Mei You”。</p>
<h2 id="输入样例1：-1"><a href="#输入样例1：-1" class="headerlink" title="输入样例1："></a>输入样例1：</h2><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">10 GAO3 Magi Zha1 Sen1 Quan FaMK LSum Eins FatM LLao</span><br><span class="line">8</span><br><span class="line">Magi 50</span><br><span class="line">Pota 30</span><br><span class="line">LLao 3</span><br><span class="line">Ammy 48</span><br><span class="line">Dave 15</span><br><span class="line">GAO3 31</span><br><span class="line">Zoro 1</span><br><span class="line">Cath 60</span><br></pre></td></tr></table></figure>

<h2 id="输出样例1：-1"><a href="#输出样例1：-1" class="headerlink" title="输出样例1："></a>输出样例1：</h2><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">Ammy</span><br><span class="line">Cath</span><br><span class="line">Pota</span><br></pre></td></tr></table></figure>

<h2 id="输入样例2：-1"><a href="#输入样例2：-1" class="headerlink" title="输入样例2："></a>输入样例2：</h2><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">11 GAO3 Magi Zha1 Sen1 Quan FaMK LSum Eins FatM LLao Pota</span><br><span class="line">7</span><br><span class="line">Magi 50</span><br><span class="line">Pota 30</span><br><span class="line">LLao 48</span><br><span class="line">Ammy 3</span><br><span class="line">Dave 15</span><br><span class="line">GAO3 31</span><br><span class="line">Zoro 29</span><br></pre></td></tr></table></figure>

<h2 id="输出样例2：-1"><a href="#输出样例2：-1" class="headerlink" title="输出样例2："></a>输出样例2：</h2><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">Bing Mei You</span><br></pre></td></tr></table></figure>

<h2 id="解法：-7"><a href="#解法：-7" class="headerlink" title="解法："></a>解法：</h2><figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">USER</span></span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line">    <span class="built_in">string</span> name;</span><br><span class="line">    <span class="keyword">int</span> good;</span><br><span class="line">&#125;user[<span class="number">10005</span>];</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="built_in">set</span>&lt;<span class="built_in">string</span>&gt;s; <span class="comment">//用set存储关注用户，便于后续查找</span></span><br><span class="line">    <span class="built_in">set</span>&lt;<span class="built_in">string</span>&gt; s2; <span class="comment">//用于存储悄悄关注的用户</span></span><br><span class="line">    <span class="built_in">string</span> str;</span><br><span class="line">    <span class="keyword">bool</span> flag = <span class="literal">true</span>;</span><br><span class="line">    <span class="keyword">int</span> N, M, num, avg = <span class="number">0</span>;</span><br><span class="line">    <span class="built_in">cin</span> &gt;&gt; N;</span><br><span class="line">    <span class="keyword">while</span>(N--)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="built_in">cin</span> &gt;&gt; str;</span><br><span class="line">        s.insert(str);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">cin</span> &gt;&gt; M;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; M; i++)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="built_in">cin</span> &gt;&gt; str &gt;&gt; num;</span><br><span class="line">        user[i].name = str;</span><br><span class="line">        user[i].good = num;</span><br><span class="line">        avg += num;</span><br><span class="line">    &#125;</span><br><span class="line">    avg /= M;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; M; i++)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">if</span>(user[i].good &gt; avg &amp;&amp; s.find(user[i].name) == s.end())</span><br><span class="line">        &#123;</span><br><span class="line">            s2.insert(user[i].name);</span><br><span class="line">            flag = <span class="literal">false</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span>(flag)</span><br><span class="line">        <span class="built_in">cout</span> &lt;&lt; <span class="string">&quot;Bing Mei You&quot;</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">    <span class="keyword">else</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">auto</span> it = s2.begin(); it != s2.end(); it++)</span><br><span class="line">            <span class="built_in">cout</span> &lt;&lt; *it &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>



<h1 id="L2-033-简单计算器-25-分"><a href="#L2-033-简单计算器-25-分" class="headerlink" title="L2-033 简单计算器 (25 分)"></a><strong>L2-033 简单计算器 (25 分)</strong></h1><p>本题要求你为初学数据结构的小伙伴设计一款简单的利用堆栈执行的计算器。如上图所示，计算器由两个堆栈组成，一个堆栈 <em>S</em>1 存放数字，另一个堆栈 <em>S</em>2 存放运算符。计算器的最下方有一个等号键，每次按下这个键，计算器就执行以下操作：</p>
<ol>
<li>从 <em>S</em>1 中弹出两个数字，顺序为 <em>n</em>1 和 <em>n</em>2；</li>
<li>从 <em>S</em>2 中弹出一个运算符 op；</li>
<li>执行计算 <em>n</em>2 op <em>n</em>1；</li>
<li>将得到的结果压回 <em>S</em>1。</li>
</ol>
<p>直到两个堆栈都为空时，计算结束，最后的结果将显示在屏幕上。</p>
<h2 id="输入格式：-10"><a href="#输入格式：-10" class="headerlink" title="输入格式："></a>输入格式：</h2><p>输入首先在第一行给出正整数 <em>N</em>（1&lt;<em>N</em>≤103），为 <em>S</em>1 中数字的个数。</p>
<p>第二行给出 <em>N</em> 个绝对值不超过 100 的整数；第三行给出 <em>N</em>−1 个运算符 —— 这里仅考虑 <code>+</code>、<code>-</code>、<code>*</code>、<code>/</code> 这四种运算。一行中的数字和符号都以空格分隔。</p>
<h2 id="输出格式：-10"><a href="#输出格式：-10" class="headerlink" title="输出格式："></a>输出格式：</h2><p>将输入的数字和运算符按给定顺序分别压入堆栈 <em>S</em>1 和 <em>S</em>2，将执行计算的最后结果输出。注意所有的计算都只取结果的整数部分。题目保证计算的中间和最后结果的绝对值都不超过 109。</p>
<p>如果执行除法时出现分母为零的非法操作，则在一行中输出：<code>ERROR: X/0</code>，其中 <code>X</code> 是当时的分子。然后结束程序。</p>
<h2 id="输入样例-1："><a href="#输入样例-1：" class="headerlink" title="输入样例 1："></a>输入样例 1：</h2><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">5</span><br><span class="line">40 5 8 3 2</span><br><span class="line">&#x2F; * - +</span><br></pre></td></tr></table></figure>

<h2 id="输出样例-1："><a href="#输出样例-1：" class="headerlink" title="输出样例 1："></a>输出样例 1：</h2><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">2</span><br></pre></td></tr></table></figure>

<h2 id="输入样例-2："><a href="#输入样例-2：" class="headerlink" title="输入样例 2："></a>输入样例 2：</h2><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">5</span><br><span class="line">2 5 8 4 4</span><br><span class="line">* &#x2F; - +</span><br></pre></td></tr></table></figure>

<h2 id="输出样例-2："><a href="#输出样例-2：" class="headerlink" title="输出样例 2："></a>输出样例 2：</h2><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">ERROR: 5&#x2F;0</span><br></pre></td></tr></table></figure>

<h2 id="解法：-8"><a href="#解法：-8" class="headerlink" title="解法："></a>解法：</h2><figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stack&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;vector&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">char</span> ch;</span><br><span class="line">    <span class="keyword">int</span> N, num, a, b, result;</span><br><span class="line">    <span class="built_in">cin</span> &gt;&gt; N;</span><br><span class="line">    <span class="built_in">stack</span>&lt;<span class="keyword">int</span>&gt; si;</span><br><span class="line">    <span class="built_in">stack</span>&lt;<span class="keyword">char</span>&gt; sc;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; N; i++)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="built_in">cin</span> &gt;&gt; num;</span><br><span class="line">        si.push(num);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; N <span class="number">-1</span>; i++)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="built_in">cin</span> &gt;&gt; ch;</span><br><span class="line">        sc.push(ch);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">while</span>(!sc.empty())</span><br><span class="line">    &#123;</span><br><span class="line">        b = si.top();</span><br><span class="line">        si.pop();</span><br><span class="line">        a = si.top();</span><br><span class="line">        si.pop();</span><br><span class="line">        ch = sc.top();</span><br><span class="line">        sc.pop();</span><br><span class="line">        <span class="keyword">switch</span>(ch)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">case</span> <span class="string">&#x27;+&#x27;</span>: result = a + b; <span class="keyword">break</span>;</span><br><span class="line">            <span class="keyword">case</span> <span class="string">&#x27;-&#x27;</span>: result = a - b; <span class="keyword">break</span>;</span><br><span class="line">            <span class="keyword">case</span> <span class="string">&#x27;*&#x27;</span>: result = a * b; <span class="keyword">break</span>;</span><br><span class="line">            <span class="keyword">case</span> <span class="string">&#x27;/&#x27;</span>: </span><br><span class="line">                &#123;</span><br><span class="line">                    <span class="keyword">if</span>(b == <span class="number">0</span>)</span><br><span class="line">                    &#123;</span><br><span class="line">                        <span class="built_in">printf</span>(<span class="string">&quot;ERROR: %d/0\n&quot;</span>, a);</span><br><span class="line">                        <span class="keyword">goto</span> flag;</span><br><span class="line">                    &#125;</span><br><span class="line">                    <span class="keyword">else</span></span><br><span class="line">                        result = a / b;</span><br><span class="line">                    <span class="keyword">break</span>;</span><br><span class="line">                &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        si.push(result);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">cout</span> &lt;&lt; si.top() &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">    flag:</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h1 id="L2-031-深入虎穴-25-分"><a href="#L2-031-深入虎穴-25-分" class="headerlink" title="L2-031 深入虎穴 (25 分)"></a>L2-031 深入虎穴 (25 分)</h1><p>著名的王牌间谍 007 需要执行一次任务，获取敌方的机密情报。已知情报藏在一个地下迷宫里，迷宫只有一个入口，里面有很多条通路，每条路通向一扇门。每一扇门背后或者是一个房间，或者又有很多条路，同样是每条路通向一扇门…… 他的手里有一张表格，是其他间谍帮他收集到的情报，他们记下了每扇门的编号，以及这扇门背后的每一条通路所到达的门的编号。007 发现不存在两条路通向同一扇门。</p>
<p>内线告诉他，情报就藏在迷宫的最深处。但是这个迷宫太大了，他需要你的帮助 —— 请编程帮他找出距离入口最远的那扇门。</p>
<h2 id="输入格式：-11"><a href="#输入格式：-11" class="headerlink" title="输入格式："></a>输入格式：</h2><p>输入首先在一行中给出正整数 <em>N</em>（&lt;105），是门的数量。最后 <em>N</em> 行，第 <em>i</em> 行（1≤<em>i</em>≤<em>N</em>）按以下格式描述编号为 <em>i</em> 的那扇门背后能通向的门：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">K D[1] D[2] ... D[K]</span><br></pre></td></tr></table></figure>

<p>其中 <code>K</code> 是通道的数量，其后是每扇门的编号。</p>
<h2 id="输出格式：-11"><a href="#输出格式：-11" class="headerlink" title="输出格式："></a>输出格式：</h2><p>在一行中输出距离入口最远的那扇门的编号。题目保证这样的结果是唯一的。</p>
<h2 id="输入样例：-8"><a href="#输入样例：-8" class="headerlink" title="输入样例："></a>输入样例：</h2><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">13</span><br><span class="line">3 2 3 4</span><br><span class="line">2 5 6</span><br><span class="line">1 7</span><br><span class="line">1 8</span><br><span class="line">1 9</span><br><span class="line">0</span><br><span class="line">2 11 10</span><br><span class="line">1 13</span><br><span class="line">0</span><br><span class="line">0</span><br><span class="line">1 12</span><br><span class="line">0</span><br><span class="line">0</span><br></pre></td></tr></table></figure>

<h2 id="输出样例：-8"><a href="#输出样例：-8" class="headerlink" title="输出样例："></a>输出样例：</h2><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">12</span><br></pre></td></tr></table></figure>

<h2 id="solution-2"><a href="#solution-2" class="headerlink" title="solution"></a>solution</h2><figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="comment">//本题主要考察BFS</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">DOOR</span>&#123;</span></span><br><span class="line">    <span class="keyword">int</span> pos, dis;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> N, K, j, temp, longestdis = <span class="number">-1</span>;</span><br><span class="line">    <span class="built_in">cin</span> &gt;&gt; N;</span><br><span class="line">    <span class="keyword">int</span> arr[N+<span class="number">1</span>] = &#123;<span class="number">0</span>&#125;;</span><br><span class="line">    <span class="function"><span class="built_in">vector</span>&lt;<span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt;&gt; <span class="title">v</span><span class="params">(N+<span class="number">1</span>)</span></span>;</span><br><span class="line">    <span class="built_in">queue</span>&lt;DOOR&gt; q;</span><br><span class="line">    <span class="built_in">vector</span>&lt;DOOR&gt; ans;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= N; i++)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="built_in">cin</span> &gt;&gt; K;</span><br><span class="line">        <span class="keyword">while</span>(K--)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="built_in">cin</span> &gt;&gt; temp;</span><br><span class="line">            v[i].push_back(temp);</span><br><span class="line">            arr[temp] = <span class="number">1</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= N; i++)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">if</span>(arr[i] != <span class="number">1</span>)</span><br><span class="line">        &#123;</span><br><span class="line">            j = i;</span><br><span class="line">            <span class="keyword">break</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    q.push(&#123;j, <span class="number">0</span>&#125;);</span><br><span class="line">    <span class="keyword">while</span>(!q.empty())</span><br><span class="line">    &#123;</span><br><span class="line">        DOOR d = q.front();</span><br><span class="line">        <span class="keyword">int</span> pos = d.pos, dis = d.dis;</span><br><span class="line">        <span class="keyword">if</span>(dis &gt; longestdis) longestdis = dis;</span><br><span class="line">        ans.push_back(d);</span><br><span class="line">        q.pop();</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; v[pos].size(); i++)</span><br><span class="line">            q.push(&#123;v[pos][i], dis+<span class="number">1</span>&#125;);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; ans.size(); i++)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">if</span>(ans[i].dis == longestdis)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="built_in">cout</span> &lt;&lt; ans[i].pos &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">            <span class="keyword">break</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    </span><br><span class="line">    </span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>



<h1 id="L3-003-社交集群-30-分"><a href="#L3-003-社交集群-30-分" class="headerlink" title="L3-003 社交集群 (30 分)"></a>L3-003 社交集群 (30 分)</h1><p>当你在社交网络平台注册时，一般总是被要求填写你的个人兴趣爱好，以便找到具有相同兴趣爱好的潜在的朋友。一个“社交集群”是指部分兴趣爱好相同的人的集合。你需要找出所有的社交集群。</p>
<h2 id="输入格式：-12"><a href="#输入格式：-12" class="headerlink" title="输入格式："></a>输入格式：</h2><p>输入在第一行给出一个正整数 N（≤1000），为社交网络平台注册的所有用户的人数。于是这些人从 1 到 N 编号。随后 N 行，每行按以下格式给出一个人的兴趣爱好列表：</p>
<p><em>K**i</em>: <em>h**i</em>[1] <em>h**i</em>[2] … <em>h**i</em>[<em>K**i</em>]</p>
<p>其中<em>K**i</em>(&gt;0)是兴趣爱好的个数，<em>h**i</em>[<em>j</em>]是第<em>j</em>个兴趣爱好的编号，为区间 [1, 1000] 内的整数。</p>
<h2 id="输出格式：-12"><a href="#输出格式：-12" class="headerlink" title="输出格式："></a>输出格式：</h2><p>首先在一行中输出不同的社交集群的个数。随后第二行按非增序输出每个集群中的人数。数字间以一个空格分隔，行末不得有多余空格。</p>
<h2 id="输入样例：-9"><a href="#输入样例：-9" class="headerlink" title="输入样例："></a>输入样例：</h2><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">8</span><br><span class="line">3: 2 7 10</span><br><span class="line">1: 4</span><br><span class="line">2: 5 3</span><br><span class="line">1: 4</span><br><span class="line">1: 3</span><br><span class="line">1: 4</span><br><span class="line">4: 6 8 1 5</span><br><span class="line">1: 4</span><br></pre></td></tr></table></figure>

<h2 id="输出样例：-9"><a href="#输出样例：-9" class="headerlink" title="输出样例："></a>输出样例：</h2><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">3</span><br><span class="line">4 3 1</span><br></pre></td></tr></table></figure>

<h2 id="解法：-9"><a href="#解法：-9" class="headerlink" title="解法："></a>解法：</h2><figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">int</span> father[<span class="number">1005</span>];</span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">NODE</span></span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line">    <span class="keyword">int</span> people;</span><br><span class="line">    <span class="keyword">bool</span> flag = <span class="literal">false</span>;</span><br><span class="line">&#125;ans[<span class="number">1005</span>];</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">get</span><span class="params">(<span class="keyword">int</span> x)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(father[x] == x)</span><br><span class="line">        <span class="keyword">return</span> x;</span><br><span class="line">    <span class="keyword">return</span> father[x] = get(father[x]);</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">merge</span><span class="params">(<span class="keyword">int</span> x, <span class="keyword">int</span> y)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    x = get(x);</span><br><span class="line">    y = get(y);</span><br><span class="line">    <span class="keyword">if</span>(x != y)</span><br><span class="line">        father[y] = x;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">cmp</span><span class="params">(NODE a, NODE b)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">return</span> a.people &gt; b.people;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> N, K, h, h2, cnt = <span class="number">0</span>;</span><br><span class="line">    <span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt;vi;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">1</span>; i &lt; <span class="number">1005</span>; i++)</span><br><span class="line">        father[i] = i;</span><br><span class="line">    <span class="built_in">scanf</span>(<span class="string">&quot;%d&quot;</span>, &amp;N);</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; N; i++)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="built_in">scanf</span>(<span class="string">&quot;%d: %d&quot;</span>, &amp;K, &amp;h);</span><br><span class="line">        vi.push_back(h);</span><br><span class="line">        <span class="keyword">if</span>(K == <span class="number">1</span>)</span><br><span class="line">        &#123;</span><br><span class="line">            merge(h, h);</span><br><span class="line">            <span class="keyword">continue</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> j = <span class="number">1</span>; j &lt; K; j++)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="built_in">scanf</span>(<span class="string">&quot;%d&quot;</span>, &amp;h2);</span><br><span class="line">            merge(h, h2);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">auto</span> it = vi.begin(); it != vi.end(); it++)</span><br><span class="line">    &#123;</span><br><span class="line">        ans[get(*it)].flag = <span class="literal">true</span>;</span><br><span class="line">        ans[get(*it)].people++;</span><br><span class="line">    &#125;</span><br><span class="line">    sort(ans, ans+<span class="number">1005</span>, cmp);</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; <span class="number">1005</span>; i++)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">if</span>(ans[i].flag)</span><br><span class="line">            cnt++;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;%d\n&quot;</span>, cnt);</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; <span class="number">1005</span>; i++)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">if</span>(ans[i].flag &amp;&amp; i == <span class="number">0</span>)</span><br><span class="line">            <span class="built_in">printf</span>(<span class="string">&quot;%d&quot;</span>, ans[i].people);</span><br><span class="line">        <span class="keyword">else</span> <span class="keyword">if</span> (ans[i].flag)</span><br><span class="line">            <span class="built_in">printf</span>(<span class="string">&quot; %d&quot;</span>, ans[i].people);</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    </span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

]]></content>
      <categories>
        <category>天梯赛</category>
      </categories>
      <tags>
        <tag>算法</tag>
        <tag>C++</tag>
      </tags>
  </entry>
</search>
